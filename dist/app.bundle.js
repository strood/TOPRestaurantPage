!function(e){var t={};function n(a){if(t[a])return t[a].exports;var i=t[a]={i:a,l:!1,exports:{}};return e[a].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(a,i,function(t){return e[t]}.bind(null,i));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=7)}([function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",a=e[3];if(!a)return n;if(t&&"function"==typeof btoa){var i=(o=a,s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(c," */")),r=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[n].concat(r).concat([i]).join("\n")}var o,s,c;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,a){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(a)for(var r=0;r<this.length;r++){var o=this[r][0];null!=o&&(i[o]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);a&&i[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},function(e,t,n){"use strict";var a,i=function(){return void 0===a&&(a=Boolean(window&&document&&document.all&&!window.atob)),a},r=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),o=[];function s(e){for(var t=-1,n=0;n<o.length;n++)if(o[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},a=[],i=0;i<e.length;i++){var r=e[i],c=t.base?r[0]+t.base:r[0],l=n[c]||0,d="".concat(c," ").concat(l);n[c]=l+1;var p=s(d),u={css:r[1],media:r[2],sourceMap:r[3]};-1!==p?(o[p].references++,o[p].updater(u)):o.push({identifier:d,updater:h(u,t),references:1}),a.push(d)}return a}function l(e){var t=document.createElement("style"),a=e.attributes||{};if(void 0===a.nonce){var i=n.nc;i&&(a.nonce=i)}if(Object.keys(a).forEach((function(e){t.setAttribute(e,a[e])})),"function"==typeof e.insert)e.insert(t);else{var o=r(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var d,p=(d=[],function(e,t){return d[e]=t,d.filter(Boolean).join("\n")});function u(e,t,n,a){var i=n?"":a.media?"@media ".concat(a.media," {").concat(a.css,"}"):a.css;if(e.styleSheet)e.styleSheet.cssText=p(t,i);else{var r=document.createTextNode(i),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(r,o[t]):e.appendChild(r)}}function f(e,t,n){var a=n.css,i=n.media,r=n.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),r&&btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleSheet)e.styleSheet.cssText=a;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(a))}}var m=null,A=0;function h(e,t){var n,a,i;if(t.singleton){var r=A++;n=m||(m=l(t)),a=u.bind(null,n,r,!1),i=u.bind(null,n,r,!0)}else n=l(t),a=f.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return a(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;a(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=i());var n=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var a=0;a<n.length;a++){var i=s(n[a]);o[i].references--}for(var r=c(e,t),l=0;l<n.length;l++){var d=s(n[l]);0===o[d].references&&(o[d].updater(),o.splice(d,1))}n=r}}}},,function(e,t,n){var a=n(1),i=n(4);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var r={insert:"head",singleton:!1};a(i,r);e.exports=i.locals||{}},function(e,t,n){"use strict";n.r(t);var a=n(0),i=n.n(a)()(!0);i.push([e.i,"html,body,header,nav,h1,a,ul,li,strong,main,button,i,section,img,div,h2,h3,h4,h5,p,form,fieldset,label,input,textarea,span,article,footer,time,small,aside{margin:0;padding:0;border:0;outline:0;font-family:inherit;color:inherit;text-align:inherit;text-decoration:inherit;vertical-align:inherit;box-sizing:inherit;background:inherit}ul{list-style:none}img{display:block;width:100%;height:auto}input[type=password],input[type=email],input[type=text],input[type=submit],textarea,button{-webkit-appearance:none;-moz-appearance:none;appearance:none}button,input[type=submit]{cursor:pointer}*:focus{outline:none}","",{version:3,sources:["webpack://src/style/reset.scss"],names:[],mappings:"AACA,2JAKE,QAAA,CACA,SAAA,CACA,QAAA,CACA,SAAA,CACA,mBAAA,CACA,aAAA,CACA,kBAAA,CACA,uBAAA,CACA,sBAAA,CACA,kBAAA,CACA,kBAAA,CAGF,GACE,eAAA,CAGF,IACE,aAAA,CACA,UAAA,CACA,WAAA,CAGF,2FAMC,uBAAA,CACA,oBAAA,CACA,eAAA,CAGD,0BAEE,cAAA,CAGF,QACI,YAAA",sourcesContent:['/* STANDARD CSS RESET BELOW */\nhtml, body, header, nav, h1, a,\nul, li, strong, main, button, i,\nsection, img, div, h2, h3, h4, h5, p, form,\nfieldset, label, input, textarea,\nspan, article, footer, time, small, aside {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  font-family: inherit;\n  color: inherit;\n  text-align: inherit;\n  text-decoration: inherit;\n  vertical-align: inherit;\n  box-sizing: inherit;\n  background: inherit;\n}\n\nul {\n  list-style: none;\n}\n\nimg {\n  display: block;\n  width: 100%;\n  height: auto;\n}\n\ninput[type="password"],\ninput[type="email"],\ninput[type="text"],\ninput[type="submit"],\ntextarea,\nbutton {\n -webkit-appearance: none;\n -moz-appearance: none;\n appearance: none;\n}\n\nbutton,\ninput[type="submit"] {\n  cursor: pointer;\n}\n\n*:focus {\n    outline: none;\n}\n'],sourceRoot:""}]),t.default=i},function(e,t,n){var a=n(1),i=n(6);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var r={insert:"head",singleton:!1};a(i,r);e.exports=i.locals||{}},function(e,t,n){"use strict";n.r(t);var a=n(0),i=n.n(a)()(!0);i.push([e.i,'@font-face{font-family:"Open Sans Condensed";font-style:normal;font-weight:300;font-display:swap;src:local("Open Sans Condensed Light"),local("OpenSansCondensed-Light"),url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDujMR6WR.woff2) format("woff2");unicode-range:U+0460-052F,U+1C80-1C88,U+20B4,U+2DE0-2DFF,U+A640-A69F,U+FE2E-FE2F}@font-face{font-family:"Open Sans Condensed";font-style:normal;font-weight:300;font-display:swap;src:local("Open Sans Condensed Light"),local("OpenSansCondensed-Light"),url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDuHMR6WR.woff2) format("woff2");unicode-range:U+0400-045F,U+0490-0491,U+04B0-04B1,U+2116}@font-face{font-family:"Open Sans Condensed";font-style:normal;font-weight:300;font-display:swap;src:local("Open Sans Condensed Light"),local("OpenSansCondensed-Light"),url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDunMR6WR.woff2) format("woff2");unicode-range:U+1F00-1FFF}@font-face{font-family:"Open Sans Condensed";font-style:normal;font-weight:300;font-display:swap;src:local("Open Sans Condensed Light"),local("OpenSansCondensed-Light"),url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDubMR6WR.woff2) format("woff2");unicode-range:U+0370-03FF}@font-face{font-family:"Open Sans Condensed";font-style:normal;font-weight:300;font-display:swap;src:local("Open Sans Condensed Light"),local("OpenSansCondensed-Light"),url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDurMR6WR.woff2) format("woff2");unicode-range:U+0102-0103,U+0110-0111,U+0128-0129,U+0168-0169,U+01A0-01A1,U+01AF-01B0,U+1EA0-1EF9,U+20AB}@font-face{font-family:"Open Sans Condensed";font-style:normal;font-weight:300;font-display:swap;src:local("Open Sans Condensed Light"),local("OpenSansCondensed-Light"),url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDuvMR6WR.woff2) format("woff2");unicode-range:U+0100-024F,U+0259,U+1E00-1EFF,U+2020,U+20A0-20AB,U+20AD-20CF,U+2113,U+2C60-2C7F,U+A720-A7FF}@font-face{font-family:"Open Sans Condensed";font-style:normal;font-weight:300;font-display:swap;src:local("Open Sans Condensed Light"),local("OpenSansCondensed-Light"),url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDuXMRw.woff2) format("woff2");unicode-range:U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+2000-206F,U+2074,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD}.mdc-tab-bar{width:100%}.mdc-tab{height:48px}.mdc-tab--stacked{height:72px}.mdc-tab-scroller{overflow-y:hidden}.mdc-tab-scroller.mdc-tab-scroller--animating .mdc-tab-scroller__scroll-content{transition:250ms transform cubic-bezier(0.4, 0, 0.2, 1)}.mdc-tab-scroller__test{position:absolute;top:-9999px;width:100px;height:100px;overflow-x:scroll}.mdc-tab-scroller__scroll-area{-webkit-overflow-scrolling:touch;display:flex;overflow-x:hidden}.mdc-tab-scroller__scroll-area::-webkit-scrollbar,.mdc-tab-scroller__test::-webkit-scrollbar{display:none}.mdc-tab-scroller__scroll-area--scroll{overflow-x:scroll}.mdc-tab-scroller__scroll-content{position:relative;display:flex;flex:1 0 auto;transform:none;will-change:transform}.mdc-tab-scroller--align-start .mdc-tab-scroller__scroll-content{justify-content:flex-start}.mdc-tab-scroller--align-end .mdc-tab-scroller__scroll-content{justify-content:flex-end}.mdc-tab-scroller--align-center .mdc-tab-scroller__scroll-content{justify-content:center}.mdc-tab-scroller--animating .mdc-tab-scroller__scroll-area{-webkit-overflow-scrolling:auto}.mdc-tab-indicator{display:flex;position:absolute;top:0;left:0;justify-content:center;width:100%;height:100%;pointer-events:none;z-index:1}.mdc-tab-indicator .mdc-tab-indicator__content--underline{border-color:#6200ee;border-color:var(--mdc-theme-primary, #6200ee)}.mdc-tab-indicator .mdc-tab-indicator__content--icon{color:#018786;color:var(--mdc-theme-secondary, #018786)}.mdc-tab-indicator .mdc-tab-indicator__content--underline{border-top-width:2px}.mdc-tab-indicator .mdc-tab-indicator__content--icon{height:34px;font-size:34px}.mdc-tab-indicator__content{transform-origin:left;opacity:0}.mdc-tab-indicator__content--underline{align-self:flex-end;box-sizing:border-box;width:100%;border-top-style:solid}.mdc-tab-indicator__content--icon{align-self:center;margin:0 auto}.mdc-tab-indicator--active .mdc-tab-indicator__content{opacity:1}.mdc-tab-indicator .mdc-tab-indicator__content{transition:250ms transform cubic-bezier(0.4, 0, 0.2, 1)}.mdc-tab-indicator--no-transition .mdc-tab-indicator__content{transition:none}.mdc-tab-indicator--fade .mdc-tab-indicator__content{transition:150ms opacity linear}.mdc-tab-indicator--active.mdc-tab-indicator--fade .mdc-tab-indicator__content{transition-delay:100ms}.mdc-tab{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-button-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:0.875rem;font-size:var(--mdc-typography-button-font-size, 0.875rem);line-height:2.25rem;line-height:var(--mdc-typography-button-line-height, 2.25rem);font-weight:500;font-weight:var(--mdc-typography-button-font-weight, 500);letter-spacing:0.0892857143em;letter-spacing:var(--mdc-typography-button-letter-spacing, 0.0892857143em);text-decoration:none;-webkit-text-decoration:var(--mdc-typography-button-text-decoration, none);text-decoration:var(--mdc-typography-button-text-decoration, none);text-transform:uppercase;text-transform:var(--mdc-typography-button-text-transform, uppercase);padding-right:24px;padding-left:24px;position:relative;display:flex;flex:1 0 auto;justify-content:center;box-sizing:border-box;margin:0;padding-top:0;padding-bottom:0;border:none;outline:none;background:none;text-align:center;white-space:nowrap;cursor:pointer;-webkit-appearance:none;z-index:1}.mdc-tab .mdc-tab__text-label{color:rgba(0,0,0,.6)}.mdc-tab .mdc-tab__icon{color:rgba(0,0,0,.54);fill:currentColor}.mdc-tab::-moz-focus-inner{padding:0;border:0}.mdc-tab--min-width{flex:0 1 auto}.mdc-tab__content{position:relative;display:flex;align-items:center;justify-content:center;height:inherit;pointer-events:none}.mdc-tab__text-label{transition:150ms color linear;display:inline-block;line-height:1;z-index:2}.mdc-tab__icon{transition:150ms color linear;width:24px;height:24px;font-size:24px;z-index:2}.mdc-tab--stacked .mdc-tab__content{flex-direction:column;align-items:center;justify-content:center}.mdc-tab--stacked .mdc-tab__text-label{padding-top:6px;padding-bottom:4px}.mdc-tab--active .mdc-tab__text-label{color:#6200ee;color:var(--mdc-theme-primary, #6200ee)}.mdc-tab--active .mdc-tab__icon{color:#6200ee;color:var(--mdc-theme-primary, #6200ee);fill:currentColor}.mdc-tab--active .mdc-tab__text-label,.mdc-tab--active .mdc-tab__icon{transition-delay:100ms}.mdc-tab:not(.mdc-tab--stacked) .mdc-tab__icon+.mdc-tab__text-label{padding-left:8px;padding-right:0}[dir=rtl] .mdc-tab:not(.mdc-tab--stacked) .mdc-tab__icon+.mdc-tab__text-label,.mdc-tab:not(.mdc-tab--stacked) .mdc-tab__icon+.mdc-tab__text-label[dir=rtl]{padding-left:0;padding-right:8px}@-webkit-keyframes mdc-ripple-fg-radius-in{from{-webkit-animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transform:translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1)}to{transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}}@keyframes mdc-ripple-fg-radius-in{from{-webkit-animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transform:translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1)}to{transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}}@-webkit-keyframes mdc-ripple-fg-opacity-in{from{-webkit-animation-timing-function:linear;animation-timing-function:linear;opacity:0}to{opacity:var(--mdc-ripple-fg-opacity, 0)}}@keyframes mdc-ripple-fg-opacity-in{from{-webkit-animation-timing-function:linear;animation-timing-function:linear;opacity:0}to{opacity:var(--mdc-ripple-fg-opacity, 0)}}@-webkit-keyframes mdc-ripple-fg-opacity-out{from{-webkit-animation-timing-function:linear;animation-timing-function:linear;opacity:var(--mdc-ripple-fg-opacity, 0)}to{opacity:0}}@keyframes mdc-ripple-fg-opacity-out{from{-webkit-animation-timing-function:linear;animation-timing-function:linear;opacity:var(--mdc-ripple-fg-opacity, 0)}to{opacity:0}}.mdc-tab__ripple{--mdc-ripple-fg-size: 0;--mdc-ripple-left: 0;--mdc-ripple-top: 0;--mdc-ripple-fg-scale: 1;--mdc-ripple-fg-translate-end: 0;--mdc-ripple-fg-translate-start: 0;-webkit-tap-highlight-color:rgba(0,0,0,0);position:absolute;top:0;left:0;width:100%;height:100%;overflow:hidden}.mdc-tab__ripple::before,.mdc-tab__ripple::after{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:""}.mdc-tab__ripple::before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1}.mdc-tab__ripple.mdc-ripple-upgraded::before{transform:scale(var(--mdc-ripple-fg-scale, 1))}.mdc-tab__ripple.mdc-ripple-upgraded::after{top:0;left:0;transform:scale(0);transform-origin:center center}.mdc-tab__ripple.mdc-ripple-upgraded--unbounded::after{top:var(--mdc-ripple-top, 0);left:var(--mdc-ripple-left, 0)}.mdc-tab__ripple.mdc-ripple-upgraded--foreground-activation::after{-webkit-animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards;animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-tab__ripple.mdc-ripple-upgraded--foreground-deactivation::after{-webkit-animation:mdc-ripple-fg-opacity-out 150ms;animation:mdc-ripple-fg-opacity-out 150ms;transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}.mdc-tab__ripple::before,.mdc-tab__ripple::after{top:calc(50% - 100%);left:calc(50% - 100%);width:200%;height:200%}.mdc-tab__ripple.mdc-ripple-upgraded::after{width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-tab__ripple::before,.mdc-tab__ripple::after{background-color:#6200ee;background-color:var(--mdc-theme-primary, #6200ee)}.mdc-tab__ripple:hover::before{opacity:.04}.mdc-tab__ripple.mdc-ripple-upgraded--background-focused::before,.mdc-tab__ripple:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.12}.mdc-tab__ripple:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-tab__ripple:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.12}.mdc-tab__ripple.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.12}html{height:100%;width:100%;font-family:"Open Sans Condensed";font-weight:bold;scroll-behavior:smooth}body{width:100%;height:100%;display:flex;flex-direction:column;align-items:center}.mdc-tab-bar{position:fixed;top:0;z-index:1;background:#fff}article{display:flex;font-size:20px}article h2{font-size:40px}article h3{font-size:30px}article pre{font-family:"Open Sans Condensed"}#content{margin-top:48px;max-width:1400px;width:100%;display:flex;flex-direction:column;align-items:center;justify-content:center}.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__text-label{color:#a41109}.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple::before,.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple::after{background-color:#a41109}.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple:hover::before{opacity:.04}.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded--background-focused::before,.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.12}.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.12}.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.12}.mdc-tab[id=mdc-tab-1] .mdc-tab-indicator .mdc-tab-indicator__content--underline{border-color:#a41109}.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__text-label{color:#8f0066}.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple::before,.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple::after{background-color:#8f0066}.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple:hover::before{opacity:.04}.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded--background-focused::before,.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.12}.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.12}.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.12}.mdc-tab[id=mdc-tab-2] .mdc-tab-indicator .mdc-tab-indicator__content--underline{border-color:#8f0066}.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__text-label{color:#00aeef}.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple::before,.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple::after{background-color:#00aeef}.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple:hover::before{opacity:.08}.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded--background-focused::before,.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.24}.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.24}.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.24}.mdc-tab[id=mdc-tab-3] .mdc-tab-indicator .mdc-tab-indicator__content--underline{border-color:#00aeef}.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__text-label{color:#dac200}.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple::before,.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple::after{background-color:#dac200}.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple:hover::before{opacity:.08}.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded--background-focused::before,.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.24}.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.24}.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.24}.mdc-tab[id=mdc-tab-4] .mdc-tab-indicator .mdc-tab-indicator__content--underline{border-color:#dac200}.logo-div{background-size:cover;background-position:center;width:50px;height:50px;align-self:center;margin:1%}.hero-image{background-size:cover;background-position:center;background-repeat:no-repeat;position:relative;width:100%;height:85vh;margin-bottom:4%}.hero-text{text-align:center;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);color:#fff;background:none;margin-top:1%;margin-bottom:1%}@media only screen and (max-width: 560px){.hero-text h1{font-size:24px}}footer{display:flex;width:100%;background-color:#666;padding:.5% 0%}footer p{padding-left:1%}.hours-article{display:flex;width:100%;flex-direction:row;justify-content:space-around}.hours-article .article-card{display:flex;flex-direction:column;align-items:center}@media only screen and (max-width: 560px){.hours-article{flex-direction:column}}.manifesto-article{flex-direction:column;font-size:20px}.manifesto-article h3{padding-left:5%;padding-bottom:2%}.manifesto-article p{padding-left:5%;padding-right:5%;padding-top:1%}.manifesto-article ul{padding:1% 5% 2% 6%}.manifesto-article ul li::before{content:"-";color:#00aeef;font-weight:bolder;display:inline-block;width:1em}.contact-article{display:flex;width:100%;flex-direction:row;justify-content:space-around}.contact-article .article-card{display:flex;flex-direction:column;align-items:center}.contact-article svg{width:30px;height:30px;margin-top:2%;margin-left:1%}.contact-form{display:flex;flex-direction:column;justify-content:space-around;align-items:center;width:80%;height:40vh}.contact-form h3{font-size:30px}.contact-form .infoDiv{display:flex;justify-content:space-around;height:50px;width:60%}.contact-form .messageDiv{display:flex;width:80%}.contact-form .messageDiv .input-group{width:50%}.contact-form .input-group{position:relative;margin:40px auto;width:35%}.contact-form .form-control{position:relative;z-index:1;width:100%;height:35px;font-size:16px;border:none;border-bottom:1px solid #d9d9d9;background-color:transparent}.contact-form .form-control+label{position:absolute;top:10px;left:3px;font-size:16px;color:#999;transition:all .2s ease-out}.contact-form .form-control:focus{outline:none;border-width:2px;border-color:#dac200;transition:all .2s ease-out}.contact-form .form-control.has-value+label,.contact-form .form-control:focus+label{top:-15px;color:#dac200;font-size:12px}.contact-form .form-control.has-value:not(:focus)+label{color:#999}.map-container{width:100%;height:40vh;margin:1% 0}.map-display{width:100%;height:100%}.map-frame{width:100%;height:100%;border:0}@media only screen and (max-width: 1065px){.contact-article{flex-direction:column}}@media only screen and (max-width: 560px){.contact-article .article-card{flex-direction:column;padding:3% 0}.contact-article p{margin-left:5%;margin-right:5%}.contact-form h3{margin-top:-25px;margin-bottom:-50px}.contact-form .infoDiv{flex-direction:column;justify-content:flex-start;height:20%;padding:0;margin:0}.contact-form .infoDiv .input-group{margin:3%;width:80%}.contact-form .input-group{margin:1%}.contact-form .messageDiv{flex-direction:column;align-items:center}}button{background-color:#dac200;color:#fff;font-size:14px;text-transform:uppercase;font-weight:500;border:1px solid #dac200;height:36px;padding:0 16px;border-radius:2px;box-shadow:0 1px 3px #999}textarea.form-control{height:120px}select{-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:0;box-shadow:none;border:0 !important;background-image:none}select::-ms-expand{display:none}.select{position:relative;top:60%;left:550px;display:flex;width:20em;height:3em;line-height:3;background-color:#fff;overflow:hidden;border-radius:.25em}select{flex:1;padding:0 .5em;background-color:#fff;cursor:pointer}option{background-color:#fff;-webkit-text-decoration-color:#8f0066;text-decoration-color:#8f0066}.select::after{content:"▼";position:absolute;top:0;right:0;padding:0 1em;background:#fff;cursor:pointer;pointer-events:none;transition:.25s all ease}.select:hover::after{color:#8f0066}.menus-article{flex-direction:column;width:100%}.menus-article h2{color:#8f0066}.menu-holder{display:flex;flex-direction:column;align-items:center;width:100%}.menu-holder p{display:flex;width:70%;justify-content:center}hr{width:100%;height:1px;background-color:#8f0066;border-color:#8f0066}.menu-div{display:flex;flex-direction:row;flex-wrap:wrap;justify-content:space-between;padding:5%}.menu-item-div{display:flex;flex-direction:column;width:300px;padding:1%}.menu-item-div p{justify-content:flex-start}.menu-item-title-div{display:flex;flex-direction:row;justify-content:space-between}.lunch-menu-div{display:flex;flex-direction:column;align-items:center;padding:1%}.lunch-item-holder{display:flex;flex-wrap:wrap;justify-content:space-between}@media only screen and (max-width: 1395px){.select{left:38%}}@media only screen and (max-width: 1100px){.select{left:32%}}@media only screen and (max-width: 800px){.select{left:26%}}@media only screen and (max-width: 630px){.select{left:20%}}@media only screen and (max-width: 480px){.select{left:14%}}@media only screen and (max-width: 400px){.select{left:5%}}',"",{version:3,sources:["webpack://src/style/style.scss","webpack://src/style/vars/font.scss","webpack://node_modules/@material/tab-bar/_mixins.scss","webpack://node_modules/@material/tab-scroller/_mixins.scss","webpack://node_modules/@material/tab/_mixins.scss","webpack://node_modules/@material/tab-indicator/_mixins.scss","webpack://node_modules/@material/theme/_mixins.scss","webpack://node_modules/@material/typography/_mixins.scss","webpack://node_modules/@material/theme/_custom-properties.scss","webpack://node_modules/@material/tab/_variables.scss","webpack://node_modules/@material/rtl/_mixins.scss","webpack://node_modules/@material/ripple/_keyframes.scss","webpack://node_modules/@material/animation/_variables.scss","webpack://node_modules/@material/ripple/_mixins.scss","webpack://node_modules/@material/ripple/_variables.scss","webpack://src/style/base.scss","webpack://src/style/vars/vars.scss","webpack://src/style/components/logo.scss","webpack://src/style/components/hero.scss","webpack://src/style/components/footer.scss","webpack://src/style/vars/colors.scss","webpack://src/style/pages/hours.scss","webpack://src/style/pages/manifesto.scss","webpack://src/style/pages/contact.scss","webpack://src/style/pages/menus.scss"],names:[],mappings:"AAAA,WCCA,iCACE,CAAA,iBACA,CAAA,eACA,CAAA,iBACA,CAAA,iMACA,CAAA,gFACA,CAAA,WAGF,iCACE,CAAA,iBACA,CAAA,eACA,CAAA,iBACA,CAAA,iMACA,CAAA,wDACA,CAAA,WAGF,iCACE,CAAA,iBACA,CAAA,eACA,CAAA,iBACA,CAAA,iMACA,CAAA,yBACA,CAAA,WAGF,iCACE,CAAA,iBACA,CAAA,eACA,CAAA,iBACA,CAAA,iMACA,CAAA,yBACA,CAAA,WAGF,iCACE,CAAA,iBACA,CAAA,eACA,CAAA,iBACA,CAAA,iMACA,CAAA,wGACA,CAAA,WAGF,iCACE,CAAA,iBACA,CAAA,eACA,CAAA,iBACA,CAAA,iMACA,CAAA,0GACA,CAAA,WAGF,iCACE,CAAA,iBACA,CAAA,eACA,CAAA,iBACA,CAAA,+LACA,CAAA,wJACA,CAAA,aC7BA,UACiB,CAAA,SA6BjB,WANS,CAAA,kBA0BT,WANS,CAAA,kBCvBT,iBAOI,CAAA,gFAnBJ,uDAEI,CAAA,wBAsBJ,iBAEI,CAAA,WACA,CAAA,WACA,CAAA,YACA,CAAA,iBACA,CAAA,+BAIJ,gCAEI,CAAA,YACA,CAAA,iBACA,CAAA,6FAOA,YACE,CAAA,uCAMN,iBAEI,CAAA,kCAIJ,iBCkFE,CAAA,YDtCA,CAAA,aACA,CAAA,cACA,CAAA,qBAIA,CAAA,iEA9CF,0BAEI,CAAA,+DAIJ,wBAEI,CAAA,kEAIJ,sBAEI,CAAA,4DAKF,+BAEI,CAAA,mBE3FN,YAyIE,CAAA,iBACA,CAAA,KACA,CAAA,MACA,CAAA,sBACA,CAAA,UACA,CAAA,WACA,CAAA,mBACA,CAAA,SACA,CAAA,0DAtEF,oBCgBE,CAAA,8CAEA,CAAA,qDDaF,aCfE,CAAA,yCAEA,CAAA,0DDRF,oBAgD0B,CAAA,qDAjB1B,WAkBqB,CAAA,cAAA,CAAA,4BAlIrB,qBAEI,CAAA,SACA,CAAA,uCAIJ,mBAEI,CAAA,qBACA,CAAA,UACA,CAAA,sBACA,CAAA,kCAIJ,iBAEI,CAAA,aACA,CAAA,uDAIJ,SAEI,CAAA,+CAKJ,uDAEI,CAAA,8DAKJ,eAEI,CAAA,qDAIJ,+BAEI,CAAA,+EAKJ,sBAGI,CAAA,SD5CJ,iCGgEE,CAAA,kCACA,CAAA,8BCgCA,CAAA,2GAYF,CAAA,kBAZE,CAAA,0DAYF,CAAA,mBAZE,CAAA,6DAYF,CAAA,eAZE,CAAA,yDAYF,CAAA,6BAZE,CAAA,0EAYF,CAAA,oBAZE,CAAA,0EAYF,CAZE,kEAYF,CAAA,wBAZE,CAAA,qEAYF,CAAA,kBChImB,CAAA,iBAAA,CAAA,iBJ0EjB,CAAA,YDoIA,CAAA,aACA,CAAA,sBACA,CAAA,qBACA,CAAA,QAEA,CAAA,aACA,CAAA,gBACA,CAAA,WACA,CAAA,YACA,CAAA,eACA,CAAA,iBACA,CAAA,kBACA,CAAA,cACA,CAAA,uBACA,CAAA,SACA,CAAA,8BAxHF,oBEXE,CAAA,wBFqBF,qBErBE,CAAA,iBFyBE,CAAA,2BA6GF,SACE,CAAA,QACA,CAAA,oBA3MJ,aAEI,CAAA,kBAIJ,iBC6CE,CAAA,YDoLA,CAAA,kBACA,CAAA,sBACA,CAAA,cACA,CAAA,mBACA,CAAA,qBAjOF,6BAEI,CAAA,oBAIA,CAAA,aAKA,CAAA,SACA,CAAA,eAIJ,6BAEI,CAAA,UKtDM,CAAA,WAAA,CAAA,cAAA,CAAA,SL6DN,CAAA,oCAgNF,qBACE,CAAA,kBACA,CAAA,sBACA,CAAA,uCAGF,eACE,CAAA,kBACA,CAAA,sCA7KJ,aEJE,CAAA,uCAEA,CAAA,gCFYF,aEdE,CAAA,uCAEA,CAAA,iBFgBE,CAAA,sEA0KJ,sBAGI,CAAA,oEA1NJ,gBEME,CAAA,eAAA,CAAA,2JIrBE,cJqBF,CAAA,iBAAA,CAAA,2CK3EF,KACE,8DCN6B,CDM7B,sDCN6B,CAAA,qEDY3B,CAAA,GAGF,+FACE,CAAA,CLgEF,mCK3EF,KACE,8DCN6B,CDM7B,sDCN6B,CAAA,qEDY3B,CAAA,GAGF,+FACE,CAAA,CAAA,4CAKJ,KACE,wCACE,CADF,gCACE,CAAA,SACA,CAAA,GAGF,uCACE,CAAA,CAZA,oCAKJ,KACE,wCACE,CADF,gCACE,CAAA,SACA,CAAA,GAGF,uCACE,CAAA,CAAA,6CAIJ,KACE,wCACE,CADF,gCACE,CAAA,uCACA,CAAA,GAGF,SACE,CAAA,CAXA,qCAIJ,KACE,wCACE,CADF,gCACE,CAAA,uCACA,CAAA,GAGF,SACE,CAAA,CAAA,iBPiDJ,uBStBE,CAAA,oBACA,CAAA,mBACA,CAAA,wBACA,CAAA,gCACA,CAAA,kCACA,CAAA,yCAEA,CAAA,iBT0KA,CAAA,KACA,CAAA,MACA,CAAA,UACA,CAAA,WACA,CAAA,eACA,CAAA,iDS3KF,iBAGI,CAAA,iBACA,CAAA,SACA,CAAA,mBACA,CAAA,UACA,CAAA,yBAIJ,2DAGI,CAAA,SAKA,CAAA,6CAOF,8CAEI,CAAA,4CAIJ,KAEI,CAAA,MAEA,CAAA,kBACA,CAAA,8BACA,CAAA,uDAMJ,4BAEI,CAAA,8BAEA,CAAA,mEAMJ,+FAEI,CAFJ,uFAEI,CAAA,qEAQJ,iDAEI,CAFJ,yCAEI,CAAA,+FAKA,CAAA,iDAuQN,oBAGI,CAAA,qBAEA,CAAA,UACA,CAAA,WACA,CAAA,4CAKF,qCAEI,CAAA,sCACA,CAAA,iDAxQN,wBP7DE,CAAA,kDAEA,CAAA,+BOyHA,WAjCE,CAAA,0HAwEA,wBAiBF,CAAA,WAjFE,CAAA,kDAqGF,+BAEI,CAAA,yDAKF,wBCpTa,CAAA,WDiNb,CAAA,qCAgHJ,6BAEI,CAAA,KEzVN,WACE,CAAA,UACA,CAAA,iCCAU,CAAA,gBDEV,CAAA,sBACA,CAAA,KAEF,UACE,CAAA,WACA,CAAA,YACA,CAAA,qBACA,CAAA,kBACA,CAAA,aAGF,cACE,CAAA,KACA,CAAA,SACA,CAAA,eACA,CAAA,QAGF,YACE,CAAA,cACA,CAAA,WACA,cACE,CAAA,WAGF,cACE,CAAA,YAGF,iCC/BU,CAAA,SDsCZ,eACE,CAAA,gBACA,CAAA,UACA,CAAA,YACA,CAAA,qBACA,CAAA,kBACA,CAAA,sBACA,CAAA,4DXiFA,aEXE,CAAA,+HOoEF,wBPpEE,CAAA,sEOkIA,WAjCE,CAAA,wMAwEA,wBAiBF,CAAA,WAjFE,CAAA,yFAqGF,+BAEI,CAAA,gGAKF,wBCpTa,CAAA,WDiNb,CAAA,4EAgHJ,6BAEI,CAAA,iFR7OJ,oBCSE,CAAA,4DFWF,aEXE,CAAA,+HOoEF,wBPpEE,CAAA,sEOkIA,WAjCE,CAAA,wMAwEA,wBAiBF,CAAA,WAjFE,CAAA,yFAqGF,+BAEI,CAAA,gGAKF,wBCpTa,CAAA,WDiNb,CAAA,4EAgHJ,6BAEI,CAAA,iFR7OJ,oBCSE,CAAA,4DFWF,aEXE,CAAA,+HOoEF,wBPpEE,CAAA,sEOkIA,WAjCE,CAAA,wMAwEA,wBAiBF,CAAA,WAjFE,CAAA,yFAqGF,+BAEI,CAAA,gGAKF,wBCpTa,CAAA,WDiNb,CAAA,4EAgHJ,6BAEI,CAAA,iFR7OJ,oBCSE,CAAA,4DFWF,aEXE,CAAA,+HOoEF,wBPpEE,CAAA,sEOkIA,WAjCE,CAAA,wMAwEA,wBAiBF,CAAA,WAjFE,CAAA,yFAqGF,+BAEI,CAAA,gGAKF,wBCpTa,CAAA,WDiNb,CAAA,4EAgHJ,6BAEI,CAAA,iFR7OJ,oBCSE,CAAA,UWrHJ,qBACE,CAAA,0BACA,CAAA,UACA,CAAA,WACA,CAAA,iBACA,CAAA,SACA,CAAA,YCNF,qBACE,CAAA,0BACA,CAAA,2BACA,CAAA,iBACA,CAAA,UACA,CAAA,WACA,CAAA,gBACA,CAAA,WAGF,iBACE,CAAA,iBACA,CAAA,OACA,CAAA,QACA,CAAA,+BACA,CAAA,UACA,CAAA,eACA,CAAA,aACA,CAAA,gBACA,CAAA,0CAGF,cAEI,cACE,CAAA,CAAA,OCzBN,YACE,CAAA,UACA,CAAA,qBCEK,CAAA,cAAA,CAAA,SDCL,eACE,CAAA,eENJ,YACE,CAAA,UACA,CAAA,kBACA,CAAA,4BACA,CAAA,6BACA,YACE,CAAA,qBACA,CAAA,kBACA,CAAA,0CAKJ,eACA,qBACI,CAAA,CAAA,mBCfJ,qBACE,CAAA,cACA,CAAA,sBACA,eACE,CAAA,iBACA,CAAA,qBAEF,eACE,CAAA,gBACA,CAAA,cACA,CAAA,sBAGF,mBACE,CAAA,iCAGF,WACE,CAAA,aFhBG,CAAA,kBEkBH,CAAA,oBACA,CAAA,SAEA,CAAA,iBCrBJ,YACE,CAAA,UACA,CAAA,kBACA,CAAA,4BACA,CAAA,+BAEA,YACE,CAAA,qBACA,CAAA,kBACA,CAAA,qBAGF,UACE,CAAA,WACA,CAAA,aACA,CAAA,cACA,CAAA,cAIJ,YACE,CAAA,qBACA,CAAA,4BACA,CAAA,kBACA,CAAA,SACA,CAAA,WACA,CAAA,iBAEA,cACE,CAAA,uBAGF,YACE,CAAA,4BACA,CAAA,WACA,CAAA,SACA,CAAA,0BAGF,YACE,CAAA,SACA,CAAA,uCACA,SACE,CAAA,2BAIJ,iBACE,CAAA,gBACA,CAAA,SACA,CAAA,4BAIF,iBACE,CAAA,SACA,CAAA,UACA,CAAA,WACA,CAAA,cACA,CAAA,WACA,CAAA,+BACA,CAAA,4BACA,CAAA,kCAEA,iBACE,CAAA,QACA,CAAA,QACA,CAAA,cACA,CAAA,UACA,CAAA,2BACA,CAAA,kCAGF,YACE,CAAA,gBACA,CAAA,oBH5EE,CAAA,2BG8EF,CAAA,oFAGF,SAEE,CAAA,aHnFE,CAAA,cGqFF,CAAA,wDAGF,UACE,CAAA,eAKN,UACE,CAAA,WACA,CAAA,WACA,CAAA,aAEF,UACE,CAAA,WACA,CAAA,WAEF,UACE,CAAA,WACA,CAAA,QACA,CAAA,2CAKF,iBACE,qBACE,CAAA,CAAA,0CAGJ,+BAEI,qBACE,CAAA,YACA,CAAA,mBAGF,cACE,CAAA,eACA,CAAA,iBAKF,gBACE,CAAA,mBACA,CAAA,uBAGF,qBACE,CAAA,0BACA,CAAA,UACA,CAAA,SACA,CAAA,QACA,CAAA,oCAEA,SACE,CAAA,SACA,CAAA,2BAIJ,SACE,CAAA,0BAGF,qBACE,CAAA,kBACA,CAAA,CAAA,OAIN,wBH9JQ,CAAA,UGgKJ,CAAA,cACA,CAAA,wBACA,CAAA,eACA,CAAA,wBACA,CAAA,WACA,CAAA,cACA,CAAA,iBACA,CAAA,yBACA,CAAA,sBAGJ,YACE,CAAA,OCzKF,uBACE,CAAA,oBACA,CACA,eACA,CAAA,SACA,CAAA,eACA,CAAA,mBACA,CAAA,qBACA,CAAA,mBAGF,YACE,CAAA,QAGF,iBACE,CAAA,OACA,CAAA,UACA,CAAA,YACA,CAAA,UACA,CAAA,UACA,CAAA,aACA,CAAA,qBACA,CAAA,eACA,CAAA,mBACA,CAAA,OAEF,MACE,CAAA,cACA,CAAA,qBACA,CAAA,cACA,CAAA,OAEF,qBACE,CAAA,qCJnCO,CImCP,6BJnCO,CAAA,eIuCT,WACE,CAAA,iBACA,CAAA,KACA,CAAA,OACA,CAAA,aACA,CAAA,eACA,CAAA,cACA,CAAA,mBACA,CAEA,wBACA,CAAA,qBAGF,aJrDS,CAAA,eI4DT,qBACE,CAAA,UACA,CAAA,kBACA,aJ/DO,CAAA,aIqET,YACE,CAAA,qBACA,CAAA,kBACA,CAAA,UACA,CAAA,eACA,YACE,CAAA,SACA,CAAA,sBACA,CAAA,GAGJ,UACE,CAAA,UACA,CAAA,wBJlFO,CAAA,oBAAA,CAAA,UIsFT,YACE,CAAA,kBACA,CAAA,cACA,CAAA,6BACA,CAAA,UACA,CAAA,eAEF,YACE,CAAA,qBACA,CAAA,WACA,CAAA,UACA,CAAA,iBACA,0BACE,CAAA,qBAGJ,YACE,CAAA,kBACA,CAAA,6BACA,CAAA,gBAEF,YACE,CAAA,qBACA,CAAA,kBACA,CAAA,UACA,CAAA,mBAEF,YACE,CAAA,cACA,CAAA,6BACA,CAAA,2CAMF,QACE,QACE,CAAA,CAAA,2CAGJ,QACE,QACE,CAAA,CAAA,0CAGJ,QACE,QACE,CAAA,CAAA,0CAGJ,QACE,QACE,CAAA,CAAA,0CAGJ,QACE,QACE,CAAA,CAAA,0CAGJ,QACE,OACE,CAAA",sourcesContent:['@font-face{font-family:"Open Sans Condensed";font-style:normal;font-weight:300;font-display:swap;src:local("Open Sans Condensed Light"),local("OpenSansCondensed-Light"),url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDujMR6WR.woff2) format("woff2");unicode-range:U+0460-052F,U+1C80-1C88,U+20B4,U+2DE0-2DFF,U+A640-A69F,U+FE2E-FE2F}@font-face{font-family:"Open Sans Condensed";font-style:normal;font-weight:300;font-display:swap;src:local("Open Sans Condensed Light"),local("OpenSansCondensed-Light"),url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDuHMR6WR.woff2) format("woff2");unicode-range:U+0400-045F,U+0490-0491,U+04B0-04B1,U+2116}@font-face{font-family:"Open Sans Condensed";font-style:normal;font-weight:300;font-display:swap;src:local("Open Sans Condensed Light"),local("OpenSansCondensed-Light"),url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDunMR6WR.woff2) format("woff2");unicode-range:U+1F00-1FFF}@font-face{font-family:"Open Sans Condensed";font-style:normal;font-weight:300;font-display:swap;src:local("Open Sans Condensed Light"),local("OpenSansCondensed-Light"),url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDubMR6WR.woff2) format("woff2");unicode-range:U+0370-03FF}@font-face{font-family:"Open Sans Condensed";font-style:normal;font-weight:300;font-display:swap;src:local("Open Sans Condensed Light"),local("OpenSansCondensed-Light"),url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDurMR6WR.woff2) format("woff2");unicode-range:U+0102-0103,U+0110-0111,U+0128-0129,U+0168-0169,U+01A0-01A1,U+01AF-01B0,U+1EA0-1EF9,U+20AB}@font-face{font-family:"Open Sans Condensed";font-style:normal;font-weight:300;font-display:swap;src:local("Open Sans Condensed Light"),local("OpenSansCondensed-Light"),url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDuvMR6WR.woff2) format("woff2");unicode-range:U+0100-024F,U+0259,U+1E00-1EFF,U+2020,U+20A0-20AB,U+20AD-20CF,U+2113,U+2C60-2C7F,U+A720-A7FF}@font-face{font-family:"Open Sans Condensed";font-style:normal;font-weight:300;font-display:swap;src:local("Open Sans Condensed Light"),local("OpenSansCondensed-Light"),url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDuXMRw.woff2) format("woff2");unicode-range:U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+2000-206F,U+2074,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD}.mdc-tab-bar{width:100%}.mdc-tab{height:48px}.mdc-tab--stacked{height:72px}.mdc-tab-scroller{overflow-y:hidden}.mdc-tab-scroller.mdc-tab-scroller--animating .mdc-tab-scroller__scroll-content{transition:250ms transform cubic-bezier(0.4, 0, 0.2, 1)}.mdc-tab-scroller__test{position:absolute;top:-9999px;width:100px;height:100px;overflow-x:scroll}.mdc-tab-scroller__scroll-area{-webkit-overflow-scrolling:touch;display:flex;overflow-x:hidden}.mdc-tab-scroller__scroll-area::-webkit-scrollbar,.mdc-tab-scroller__test::-webkit-scrollbar{display:none}.mdc-tab-scroller__scroll-area--scroll{overflow-x:scroll}.mdc-tab-scroller__scroll-content{position:relative;display:flex;flex:1 0 auto;transform:none;will-change:transform}.mdc-tab-scroller--align-start .mdc-tab-scroller__scroll-content{justify-content:flex-start}.mdc-tab-scroller--align-end .mdc-tab-scroller__scroll-content{justify-content:flex-end}.mdc-tab-scroller--align-center .mdc-tab-scroller__scroll-content{justify-content:center}.mdc-tab-scroller--animating .mdc-tab-scroller__scroll-area{-webkit-overflow-scrolling:auto}.mdc-tab-indicator{display:flex;position:absolute;top:0;left:0;justify-content:center;width:100%;height:100%;pointer-events:none;z-index:1}.mdc-tab-indicator .mdc-tab-indicator__content--underline{border-color:#6200ee;border-color:var(--mdc-theme-primary, #6200ee)}.mdc-tab-indicator .mdc-tab-indicator__content--icon{color:#018786;color:var(--mdc-theme-secondary, #018786)}.mdc-tab-indicator .mdc-tab-indicator__content--underline{border-top-width:2px}.mdc-tab-indicator .mdc-tab-indicator__content--icon{height:34px;font-size:34px}.mdc-tab-indicator__content{transform-origin:left;opacity:0}.mdc-tab-indicator__content--underline{align-self:flex-end;box-sizing:border-box;width:100%;border-top-style:solid}.mdc-tab-indicator__content--icon{align-self:center;margin:0 auto}.mdc-tab-indicator--active .mdc-tab-indicator__content{opacity:1}.mdc-tab-indicator .mdc-tab-indicator__content{transition:250ms transform cubic-bezier(0.4, 0, 0.2, 1)}.mdc-tab-indicator--no-transition .mdc-tab-indicator__content{transition:none}.mdc-tab-indicator--fade .mdc-tab-indicator__content{transition:150ms opacity linear}.mdc-tab-indicator--active.mdc-tab-indicator--fade .mdc-tab-indicator__content{transition-delay:100ms}.mdc-tab{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-button-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:0.875rem;font-size:var(--mdc-typography-button-font-size, 0.875rem);line-height:2.25rem;line-height:var(--mdc-typography-button-line-height, 2.25rem);font-weight:500;font-weight:var(--mdc-typography-button-font-weight, 500);letter-spacing:0.0892857143em;letter-spacing:var(--mdc-typography-button-letter-spacing, 0.0892857143em);text-decoration:none;text-decoration:var(--mdc-typography-button-text-decoration, none);text-transform:uppercase;text-transform:var(--mdc-typography-button-text-transform, uppercase);padding-right:24px;padding-left:24px;position:relative;display:flex;flex:1 0 auto;justify-content:center;box-sizing:border-box;margin:0;padding-top:0;padding-bottom:0;border:none;outline:none;background:none;text-align:center;white-space:nowrap;cursor:pointer;-webkit-appearance:none;z-index:1}.mdc-tab .mdc-tab__text-label{color:rgba(0,0,0,.6)}.mdc-tab .mdc-tab__icon{color:rgba(0,0,0,.54);fill:currentColor}.mdc-tab::-moz-focus-inner{padding:0;border:0}.mdc-tab--min-width{flex:0 1 auto}.mdc-tab__content{position:relative;display:flex;align-items:center;justify-content:center;height:inherit;pointer-events:none}.mdc-tab__text-label{transition:150ms color linear;display:inline-block;line-height:1;z-index:2}.mdc-tab__icon{transition:150ms color linear;width:24px;height:24px;font-size:24px;z-index:2}.mdc-tab--stacked .mdc-tab__content{flex-direction:column;align-items:center;justify-content:center}.mdc-tab--stacked .mdc-tab__text-label{padding-top:6px;padding-bottom:4px}.mdc-tab--active .mdc-tab__text-label{color:#6200ee;color:var(--mdc-theme-primary, #6200ee)}.mdc-tab--active .mdc-tab__icon{color:#6200ee;color:var(--mdc-theme-primary, #6200ee);fill:currentColor}.mdc-tab--active .mdc-tab__text-label,.mdc-tab--active .mdc-tab__icon{transition-delay:100ms}.mdc-tab:not(.mdc-tab--stacked) .mdc-tab__icon+.mdc-tab__text-label{padding-left:8px;padding-right:0}[dir=rtl] .mdc-tab:not(.mdc-tab--stacked) .mdc-tab__icon+.mdc-tab__text-label,.mdc-tab:not(.mdc-tab--stacked) .mdc-tab__icon+.mdc-tab__text-label[dir=rtl]{padding-left:0;padding-right:8px}@keyframes mdc-ripple-fg-radius-in{from{animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transform:translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1)}to{transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}}@keyframes mdc-ripple-fg-opacity-in{from{animation-timing-function:linear;opacity:0}to{opacity:var(--mdc-ripple-fg-opacity, 0)}}@keyframes mdc-ripple-fg-opacity-out{from{animation-timing-function:linear;opacity:var(--mdc-ripple-fg-opacity, 0)}to{opacity:0}}.mdc-tab__ripple{--mdc-ripple-fg-size: 0;--mdc-ripple-left: 0;--mdc-ripple-top: 0;--mdc-ripple-fg-scale: 1;--mdc-ripple-fg-translate-end: 0;--mdc-ripple-fg-translate-start: 0;-webkit-tap-highlight-color:rgba(0,0,0,0);position:absolute;top:0;left:0;width:100%;height:100%;overflow:hidden}.mdc-tab__ripple::before,.mdc-tab__ripple::after{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:""}.mdc-tab__ripple::before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1}.mdc-tab__ripple.mdc-ripple-upgraded::before{transform:scale(var(--mdc-ripple-fg-scale, 1))}.mdc-tab__ripple.mdc-ripple-upgraded::after{top:0;left:0;transform:scale(0);transform-origin:center center}.mdc-tab__ripple.mdc-ripple-upgraded--unbounded::after{top:var(--mdc-ripple-top, 0);left:var(--mdc-ripple-left, 0)}.mdc-tab__ripple.mdc-ripple-upgraded--foreground-activation::after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-tab__ripple.mdc-ripple-upgraded--foreground-deactivation::after{animation:mdc-ripple-fg-opacity-out 150ms;transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}.mdc-tab__ripple::before,.mdc-tab__ripple::after{top:calc(50% - 100%);left:calc(50% - 100%);width:200%;height:200%}.mdc-tab__ripple.mdc-ripple-upgraded::after{width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-tab__ripple::before,.mdc-tab__ripple::after{background-color:#6200ee;background-color:var(--mdc-theme-primary, #6200ee)}.mdc-tab__ripple:hover::before{opacity:.04}.mdc-tab__ripple.mdc-ripple-upgraded--background-focused::before,.mdc-tab__ripple:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.12}.mdc-tab__ripple:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-tab__ripple:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.12}.mdc-tab__ripple.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.12}html{height:100%;width:100%;font-family:"Open Sans Condensed";font-weight:bold;scroll-behavior:smooth}body{width:100%;height:100%;display:flex;flex-direction:column;align-items:center}.mdc-tab-bar{position:fixed;top:0;z-index:1;background:#fff}article{display:flex;font-size:20px}article h2{font-size:40px}article h3{font-size:30px}article pre{font-family:"Open Sans Condensed"}#content{margin-top:48px;max-width:1400px;width:100%;display:flex;flex-direction:column;align-items:center;justify-content:center}.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__text-label{color:#a41109}.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple::before,.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple::after{background-color:#a41109}.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple:hover::before{opacity:.04}.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded--background-focused::before,.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.12}.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.12}.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.12}.mdc-tab[id=mdc-tab-1] .mdc-tab-indicator .mdc-tab-indicator__content--underline{border-color:#a41109}.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__text-label{color:#8f0066}.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple::before,.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple::after{background-color:#8f0066}.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple:hover::before{opacity:.04}.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded--background-focused::before,.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.12}.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.12}.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.12}.mdc-tab[id=mdc-tab-2] .mdc-tab-indicator .mdc-tab-indicator__content--underline{border-color:#8f0066}.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__text-label{color:#00aeef}.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple::before,.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple::after{background-color:#00aeef}.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple:hover::before{opacity:.08}.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded--background-focused::before,.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.24}.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.24}.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.24}.mdc-tab[id=mdc-tab-3] .mdc-tab-indicator .mdc-tab-indicator__content--underline{border-color:#00aeef}.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__text-label{color:#dac200}.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple::before,.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple::after{background-color:#dac200}.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple:hover::before{opacity:.08}.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded--background-focused::before,.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.24}.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.24}.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.24}.mdc-tab[id=mdc-tab-4] .mdc-tab-indicator .mdc-tab-indicator__content--underline{border-color:#dac200}.logo-div{background-size:cover;background-position:center;width:50px;height:50px;align-self:center;margin:1%}.hero-image{background-size:cover;background-position:center;background-repeat:no-repeat;position:relative;width:100%;height:85vh;margin-bottom:4%}.hero-text{text-align:center;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);color:#fff;background:none;margin-top:1%;margin-bottom:1%}@media only screen and (max-width: 560px){.hero-text h1{font-size:24px}}footer{display:flex;width:100%;background-color:#666;padding:.5% 0%}footer p{padding-left:1%}.hours-article{display:flex;width:100%;flex-direction:row;justify-content:space-around}.hours-article .article-card{display:flex;flex-direction:column;align-items:center}@media only screen and (max-width: 560px){.hours-article{flex-direction:column}}.manifesto-article{flex-direction:column;font-size:20px}.manifesto-article h3{padding-left:5%;padding-bottom:2%}.manifesto-article p{padding-left:5%;padding-right:5%;padding-top:1%}.manifesto-article ul{padding:1% 5% 2% 6%}.manifesto-article ul li::before{content:"-";color:#00aeef;font-weight:bolder;display:inline-block;width:1em}.contact-article{display:flex;width:100%;flex-direction:row;justify-content:space-around}.contact-article .article-card{display:flex;flex-direction:column;align-items:center}.contact-article svg{width:30px;height:30px;margin-top:2%;margin-left:1%}.contact-form{display:flex;flex-direction:column;justify-content:space-around;align-items:center;width:80%;height:40vh}.contact-form h3{font-size:30px}.contact-form .infoDiv{display:flex;justify-content:space-around;height:50px;width:60%}.contact-form .messageDiv{display:flex;width:80%}.contact-form .messageDiv .input-group{width:50%}.contact-form .input-group{position:relative;margin:40px auto;width:35%}.contact-form .form-control{position:relative;z-index:1;width:100%;height:35px;font-size:16px;border:none;border-bottom:1px solid #d9d9d9;background-color:transparent}.contact-form .form-control+label{position:absolute;top:10px;left:3px;font-size:16px;color:#999;transition:all .2s ease-out}.contact-form .form-control:focus{outline:none;border-width:2px;border-color:#dac200;transition:all .2s ease-out}.contact-form .form-control.has-value+label,.contact-form .form-control:focus+label{top:-15px;color:#dac200;font-size:12px}.contact-form .form-control.has-value:not(:focus)+label{color:#999}.map-container{width:100%;height:40vh;margin:1% 0}.map-display{width:100%;height:100%}.map-frame{width:100%;height:100%;border:0}@media only screen and (max-width: 1065px){.contact-article{flex-direction:column}}@media only screen and (max-width: 560px){.contact-article .article-card{flex-direction:column;padding:3% 0}.contact-article p{margin-left:5%;margin-right:5%}.contact-form h3{margin-top:-25px;margin-bottom:-50px}.contact-form .infoDiv{flex-direction:column;justify-content:flex-start;height:20%;padding:0;margin:0}.contact-form .infoDiv .input-group{margin:3%;width:80%}.contact-form .input-group{margin:1%}.contact-form .messageDiv{flex-direction:column;align-items:center}}button{background-color:#dac200;color:#fff;font-size:14px;text-transform:uppercase;font-weight:500;border:1px solid #dac200;height:36px;padding:0 16px;border-radius:2px;box-shadow:0 1px 3px #999}textarea.form-control{height:120px}select{-webkit-appearance:none;-moz-appearance:none;-ms-appearance:none;appearance:none;outline:0;box-shadow:none;border:0 !important;background-image:none}select::-ms-expand{display:none}.select{position:relative;top:60%;left:550px;display:flex;width:20em;height:3em;line-height:3;background-color:#fff;overflow:hidden;border-radius:.25em}select{flex:1;padding:0 .5em;background-color:#fff;cursor:pointer}option{background-color:#fff;text-decoration-color:#8f0066}.select::after{content:"▼";position:absolute;top:0;right:0;padding:0 1em;background:#fff;cursor:pointer;pointer-events:none;-webkit-transition:.25s all ease;-o-transition:.25s all ease;transition:.25s all ease}.select:hover::after{color:#8f0066}.menus-article{flex-direction:column;width:100%}.menus-article h2{color:#8f0066}.menu-holder{display:flex;flex-direction:column;align-items:center;width:100%}.menu-holder p{display:flex;width:70%;justify-content:center}hr{width:100%;height:1px;background-color:#8f0066;border-color:#8f0066}.menu-div{display:flex;flex-direction:row;flex-wrap:wrap;justify-content:space-between;padding:5%}.menu-item-div{display:flex;flex-direction:column;width:300px;padding:1%}.menu-item-div p{justify-content:flex-start}.menu-item-title-div{display:flex;flex-direction:row;justify-content:space-between}.lunch-menu-div{display:flex;flex-direction:column;align-items:center;padding:1%}.lunch-item-holder{display:flex;flex-wrap:wrap;justify-content:space-between}@media only screen and (max-width: 1395px){.select{left:38%}}@media only screen and (max-width: 1100px){.select{left:32%}}@media only screen and (max-width: 800px){.select{left:26%}}@media only screen and (max-width: 630px){.select{left:20%}}@media only screen and (max-width: 480px){.select{left:14%}}@media only screen and (max-width: 400px){.select{left:5%}}',"/* cyrillic-ext */\n@font-face {\n  font-family: 'Open Sans Condensed';\n  font-style: normal;\n  font-weight: 300;\n  font-display: swap;\n  src: local('Open Sans Condensed Light'), local('OpenSansCondensed-Light'), url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDujMR6WR.woff2) format('woff2');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* cyrillic */\n@font-face {\n  font-family: 'Open Sans Condensed';\n  font-style: normal;\n  font-weight: 300;\n  font-display: swap;\n  src: local('Open Sans Condensed Light'), local('OpenSansCondensed-Light'), url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDuHMR6WR.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* greek-ext */\n@font-face {\n  font-family: 'Open Sans Condensed';\n  font-style: normal;\n  font-weight: 300;\n  font-display: swap;\n  src: local('Open Sans Condensed Light'), local('OpenSansCondensed-Light'), url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDunMR6WR.woff2) format('woff2');\n  unicode-range: U+1F00-1FFF;\n}\n/* greek */\n@font-face {\n  font-family: 'Open Sans Condensed';\n  font-style: normal;\n  font-weight: 300;\n  font-display: swap;\n  src: local('Open Sans Condensed Light'), local('OpenSansCondensed-Light'), url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDubMR6WR.woff2) format('woff2');\n  unicode-range: U+0370-03FF;\n}\n/* vietnamese */\n@font-face {\n  font-family: 'Open Sans Condensed';\n  font-style: normal;\n  font-weight: 300;\n  font-display: swap;\n  src: local('Open Sans Condensed Light'), local('OpenSansCondensed-Light'), url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDurMR6WR.woff2) format('woff2');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* latin-ext */\n@font-face {\n  font-family: 'Open Sans Condensed';\n  font-style: normal;\n  font-weight: 300;\n  font-display: swap;\n  src: local('Open Sans Condensed Light'), local('OpenSansCondensed-Light'), url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDuvMR6WR.woff2) format('woff2');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* latin */\n@font-face {\n  font-family: 'Open Sans Condensed';\n  font-style: normal;\n  font-weight: 300;\n  font-display: swap;\n  src: local('Open Sans Condensed Light'), local('OpenSansCondensed-Light'), url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDuXMRw.woff2) format('woff2');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n",'//\n// Copyright 2018 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the "Software"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use "@material/animation/variables" as animation-variables;\n@use "@material/density/functions" as density-functions;\n@use "@material/feature-targeting/functions" as feature-targeting-functions;\n@use "@material/feature-targeting/mixins" as feature-targeting-mixins;\n@use "@material/tab-scroller/mixins" as tab-scroller-mixins;\n@use "@material/tab/mixins" as tab-mixins;\n@use "./variables";\n\n@mixin core-styles($query: feature-targeting-functions.all()) {\n  // postcss-bem-linter: define tab-bar\n  .mdc-tab-bar {\n    @include width(100%, $query);\n  }\n\n  @include density(variables.$density-scale, $query: $query);\n  @include stacked-density(variables.$stacked-density-scale, $query: $query);\n  // postcss-bem-linter: end\n}\n\n@mixin width($width, $query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    width: $width;\n  }\n}\n\n///\n/// Sets density scale to default tab bar variant. Use `mdc-tab-bar-stacked-density()` mixin for stacked tab bar\n/// variant.\n///\n/// @param {Number} $density-scale Density scale value. Supported density scales `-4`, `-3`, `-2`, `-1` and `0`.\n///\n@mixin density($density-scale, $query: feature-targeting-functions.all()) {\n  $height: density-functions.prop-value(\n    $density-config: variables.$density-config,\n    $density-scale: $density-scale,\n    $property-name: height,\n  );\n\n  .mdc-tab {\n    @include tab-mixins.height($height, $query: $query);\n  }\n}\n\n///\n/// Sets density scale to stacked tab bar variant.\n///\n/// @param {Number} $density-scale Density scale value. Supported density scales `-4`, `-3`, `-2`, `-1` and `0`.\n///\n@mixin stacked-density(\n  $density-scale,\n  $query: feature-targeting-functions.all()\n) {\n  $height: density-functions.prop-value(\n    $density-config: variables.$stacked-density-config,\n    $density-scale: $density-scale,\n    $property-name: height,\n  );\n\n  .mdc-tab--stacked {\n    @include tab-mixins.height($height, $query: $query);\n  }\n}\n\n///\n/// Sets the CSS transition for the tab scrolling animation. This mixin is a proxy to `mdc-tab-scroller-transition`\n/// mixin.\n///\n/// @param {Number | String} $duration-ms - Duration (in ms) of the animation.\n/// @param {String} $timing-function - Optionally overrides the default animation timing function.\n///\n@mixin tab-scroller-transition(\n  $duration-ms,\n  $timing-function: animation-variables.$standard-curve-timing-function,\n  $query: feature-targeting-functions.all()\n) {\n  .mdc-tab-scroller {\n    @include tab-scroller-mixins.transition(\n      $duration-ms,\n      $timing-function: $timing-function,\n      $query: $query\n    );\n  }\n}\n','//\n// Copyright 2018 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the "Software"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use "@material/animation/variables" as animation-variables;\n@use "@material/tab/mixins" as tab-mixins;\n@use "@material/feature-targeting/functions";\n@use "@material/feature-targeting/mixins" as feature-targeting-mixins;\n@use "./variables";\n\n///\n/// Sets the CSS transition for the tab scrolling animation.\n///\n/// @param {Number | String} $duration-ms - Duration (in ms) of the animation.\n/// @param {String} $timing-function - Optionally overrides the default animation timing function.\n///\n@mixin transition(\n  $duration-ms,\n  $timing-function: animation-variables.$standard-curve-timing-function,\n  $query: functions.all()\n) {\n  $feat-animation: functions.create-target($query, animation);\n\n  &.mdc-tab-scroller--animating .mdc-tab-scroller__scroll-content {\n    @include feature-targeting-mixins.targets($feat-animation) {\n      transition: $duration-ms transform $timing-function;\n    }\n  }\n}\n\n@mixin core-styles($query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n  $feat-animation: functions.create-target($query, animation);\n\n  // postcss-bem-linter: define tab-scroller\n  .mdc-tab-scroller {\n    @include transition(\n      $duration-ms: variables.$transition-duration,\n      $query: $query\n    );\n\n    @include feature-targeting-mixins.targets($feat-structure) {\n      overflow-y: hidden;\n    }\n  }\n\n  // Selector for test element used to feature-detect horizontal scrollbar height\n  .mdc-tab-scroller__test {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      position: absolute;\n      top: -9999px;\n      width: 100px;\n      height: 100px;\n      overflow-x: scroll;\n    }\n  }\n\n  .mdc-tab-scroller__scroll-area {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      -webkit-overflow-scrolling: touch;\n      display: flex;\n      overflow-x: hidden;\n    }\n  }\n\n  .mdc-tab-scroller__scroll-area,\n  .mdc-tab-scroller__test {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      &::-webkit-scrollbar {\n        display: none;\n      }\n    }\n  }\n\n  // This modifier class will be added in JS after computing the OS scrollbar size in order to hide the scrollbar.\n  .mdc-tab-scroller__scroll-area--scroll {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      overflow-x: scroll;\n    }\n  }\n\n  .mdc-tab-scroller__scroll-content {\n    @include scroll-content_($query);\n  }\n\n  .mdc-tab-scroller--align-start .mdc-tab-scroller__scroll-content {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      justify-content: flex-start;\n    }\n  }\n\n  .mdc-tab-scroller--align-end .mdc-tab-scroller__scroll-content {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      justify-content: flex-end;\n    }\n  }\n\n  .mdc-tab-scroller--align-center .mdc-tab-scroller__scroll-content {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      justify-content: center;\n    }\n  }\n\n  .mdc-tab-scroller--animating {\n    .mdc-tab-scroller__scroll-area {\n      @include feature-targeting-mixins.targets($feat-animation) {\n        -webkit-overflow-scrolling: auto;\n      }\n    }\n  }\n\n  // postcss-bem-linter: end\n}\n\n//\n// Private\n//\n\n@mixin scroll-content_($query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n  $feat-animation: functions.create-target($query, animation);\n\n  @include tab-mixins.parent-positioning($query);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    display: flex;\n    flex: 1 0 auto;\n    transform: none;\n  }\n\n  @include feature-targeting-mixins.targets($feat-animation) {\n    will-change: transform;\n  }\n}\n','//\n// Copyright 2018 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the "Software"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use "@material/feature-targeting/functions";\n@use "@material/feature-targeting/mixins" as feature-targeting-mixins;\n@use "@material/ripple/mixins" as ripple-mixins;\n@use "@material/theme/mixins" as theme-mixins;\n@use "@material/typography/mixins" as typography-mixins;\n@use "@material/rtl/mixins" as rtl-mixins;\n@use "@material/tab-indicator/mixins" as tab-indicator-mixins;\n@use "./variables";\n\n// Public mixins\n\n@mixin core-styles($query: functions.all()) {\n  @include without-ripple($query);\n  @include ripple($query);\n}\n\n// This API is intended for use by frameworks that may want to separate the ripple-related styles\n// from the other tah styles. It is recommended that most users use `mdc-tab-core-styles` instead.\n@mixin without-ripple($query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n  $feat-animation: functions.create-target($query, animation);\n\n  // postcss-bem-linter: define tab\n\n  .mdc-tab {\n    @include base_($query);\n  }\n\n  .mdc-tab--min-width {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      flex: 0 1 auto;\n    }\n  }\n\n  .mdc-tab__content {\n    @include content_($query);\n  }\n\n  .mdc-tab__text-label {\n    @include feature-targeting-mixins.targets($feat-animation) {\n      transition: 150ms color linear;\n    }\n\n    @include feature-targeting-mixins.targets($feat-structure) {\n      display: inline-block;\n      // Setting line-height here overrides the line-height from the typography\n      // mixin above. The line-height needs to be overridden so that the spacing\n      // between the text label and the icon as well as the text label and the\n      // bottom of the tab remain the same.\n      line-height: 1;\n      z-index: 2;\n    }\n  }\n\n  .mdc-tab__icon {\n    @include feature-targeting-mixins.targets($feat-animation) {\n      transition: 150ms color linear;\n    }\n\n    @include feature-targeting-mixins.targets($feat-structure) {\n      width: variables.$icon-size;\n      height: variables.$icon-size;\n      font-size: variables.$icon-size;\n      z-index: 2;\n    }\n  }\n\n  .mdc-tab--stacked {\n    @include stacked_($query);\n  }\n\n  .mdc-tab--active {\n    @include active_($query);\n  }\n\n  .mdc-tab:not(.mdc-tab--stacked) .mdc-tab__icon + .mdc-tab__text-label {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      @include rtl-mixins.reflexive-box(padding, left, 8px);\n    }\n  }\n\n  // postcss-bem-linter: end\n}\n\n// This API is intended for use by frameworks that may want to separate the ripple-related styles\n// from the other tah styles. It is recommended that most users use `mdc-tab-core-styles` instead.\n@mixin ripple($query: functions.all()) {\n  @include ripple-mixins.common($query); // COPYBARA_COMMENT_THIS_LINE\n\n  .mdc-tab__ripple {\n    @include ripple_($query);\n  }\n}\n\n@mixin horizontal-padding($padding, $query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    padding-right: $padding;\n    padding-left: $padding;\n  }\n}\n\n@mixin text-label-color($color, $query: functions.all()) {\n  $feat-color: functions.create-target($query, color);\n\n  .mdc-tab__text-label {\n    @include feature-targeting-mixins.targets($feat-color) {\n      @include theme-mixins.prop(color, $color);\n    }\n  }\n}\n\n@mixin icon-color($color, $query: functions.all()) {\n  $feat-color: functions.create-target($query, color);\n\n  .mdc-tab__icon {\n    @include feature-targeting-mixins.targets($feat-color) {\n      @include theme-mixins.prop(color, $color);\n\n      fill: currentColor;\n    }\n  }\n}\n\n@mixin states-color($color, $query: functions.all()) {\n  .mdc-tab__ripple {\n    @include ripple-mixins.states($color, $query: $query);\n  }\n}\n\n@mixin ink-color($color, $query: functions.all()) {\n  @include icon-color($color, $query);\n  @include states-color($color, $query);\n  @include text-label-color($color, $query);\n}\n\n@mixin active-text-label-color($color, $query: functions.all()) {\n  &.mdc-tab--active {\n    @include text-label-color($color, $query);\n  }\n}\n\n@mixin active-icon-color($color, $query: functions.all()) {\n  &.mdc-tab--active {\n    @include icon-color($color, $query);\n  }\n}\n\n@mixin active-states-color($color, $query: functions.all()) {\n  &.mdc-tab--active {\n    @include states-color($color, $query);\n  }\n}\n\n@mixin parent-positioning($query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    position: relative;\n  }\n}\n\n@mixin fixed-width($width, $query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    flex: 0 1 $width;\n  }\n}\n\n///\n/// Sets tab height\n///\n/// @param {Number} $height Height value in `px`.\n///\n@mixin height($height, $query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    height: $height;\n  }\n}\n\n///\n/// Sets tab text transform\n///\n/// @param {String} $transform The text-transform property to apply.\n///\n@mixin text-transform($transform, $query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    text-transform: $transform;\n  }\n}\n\n//\n// Private\n//\n\n@mixin base_($query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n\n  @include typography-mixins.typography(button, $query);\n  @include text-label-color(variables.$text-label-color-default, $query);\n  @include icon-color(variables.$icon-color-default, $query);\n  @include horizontal-padding(variables.$horizontal-padding, $query);\n  @include tab-indicator-mixins.surface($query);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    display: flex;\n    flex: 1 0 auto;\n    justify-content: center;\n    box-sizing: border-box;\n    // Explicitly setting margin to 0 is to override safari default margin for button elements.\n    margin: 0;\n    padding-top: 0;\n    padding-bottom: 0;\n    border: none;\n    outline: none;\n    background: none;\n    text-align: center;\n    white-space: nowrap;\n    cursor: pointer;\n    -webkit-appearance: none;\n    z-index: 1;\n\n    // Firefox still draws a dotted border around focused buttons unless specifically overridden.\n    &::-moz-focus-inner {\n      padding: 0;\n      border: 0;\n    }\n  }\n}\n\n@mixin ripple_($query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n\n  @include ripple-mixins.surface($query);\n  @include ripple-mixins.radius-bounded($query: $query);\n  @include ripple-mixins.states($color: primary, $query: $query);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n  }\n}\n\n@mixin content_($query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n\n  @include tab-indicator-mixins.surface($query);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: inherit;\n    pointer-events: none;\n  }\n}\n\n@mixin stacked_($query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    .mdc-tab__content {\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n    }\n\n    .mdc-tab__text-label {\n      padding-top: 6px;\n      padding-bottom: 4px;\n    }\n  }\n}\n\n@mixin active_($query: functions.all()) {\n  $feat-animation: functions.create-target($query, animation);\n\n  @include text-label-color(variables.$text-label-color-active, $query);\n  @include icon-color(variables.$icon-color-active, $query);\n\n  .mdc-tab__text-label,\n  .mdc-tab__icon {\n    @include feature-targeting-mixins.targets($feat-animation) {\n      transition-delay: 100ms;\n    }\n  }\n}\n','//\n// Copyright 2018 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the "Software"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use "@material/animation/variables";\n@use "@material/theme/mixins" as theme-mixins;\n@use "@material/feature-targeting/functions";\n@use "@material/feature-targeting/mixins" as feature-targeting-mixins;\n\n@mixin core-styles($query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n  $feat-animation: functions.create-target($query, animation);\n\n  // postcss-bem-linter: define tab-indicator\n\n  .mdc-tab-indicator {\n    @include base_($query);\n  }\n\n  .mdc-tab-indicator__content {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      transform-origin: left;\n      opacity: 0;\n    }\n  }\n\n  .mdc-tab-indicator__content--underline {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      align-self: flex-end;\n      box-sizing: border-box;\n      width: 100%;\n      border-top-style: solid;\n    }\n  }\n\n  .mdc-tab-indicator__content--icon {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      align-self: center;\n      margin: 0 auto;\n    }\n  }\n\n  .mdc-tab-indicator--active .mdc-tab-indicator__content {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      opacity: 1;\n    }\n  }\n\n  // Slide by default\n  .mdc-tab-indicator .mdc-tab-indicator__content {\n    @include feature-targeting-mixins.targets($feat-animation) {\n      transition: 250ms transform variables.$standard-curve-timing-function;\n    }\n  }\n\n  // --no-transition is applied in cases where styles need to be applied immediately to set up a transition\n  .mdc-tab-indicator--no-transition .mdc-tab-indicator__content {\n    @include feature-targeting-mixins.targets($feat-animation) {\n      transition: none;\n    }\n  }\n\n  .mdc-tab-indicator--fade .mdc-tab-indicator__content {\n    @include feature-targeting-mixins.targets($feat-animation) {\n      transition: 150ms opacity linear;\n    }\n  }\n\n  // postcss-bem-linter: ignore\n  .mdc-tab-indicator--active.mdc-tab-indicator--fade\n    .mdc-tab-indicator__content {\n    @include feature-targeting-mixins.targets($feat-animation) {\n      transition-delay: 100ms;\n    }\n  }\n\n  // postcss-bem-linter: end\n}\n\n@mixin surface($query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    position: relative;\n  }\n}\n\n@mixin underline-color($color, $query: functions.all()) {\n  $feat-color: functions.create-target($query, color);\n\n  .mdc-tab-indicator__content--underline {\n    @include feature-targeting-mixins.targets($feat-color) {\n      @include theme-mixins.prop(border-color, $color);\n    }\n  }\n}\n\n@mixin underline-height($height, $query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n\n  .mdc-tab-indicator__content--underline {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      border-top-width: $height;\n    }\n  }\n}\n\n@mixin underline-top-corner-radius($radius, $query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n\n  .mdc-tab-indicator__content--underline {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      border-top-left-radius: $radius;\n      border-top-right-radius: $radius;\n    }\n  }\n}\n\n@mixin icon-color($color, $query: functions.all()) {\n  $feat-color: functions.create-target($query, color);\n\n  .mdc-tab-indicator__content--icon {\n    @include feature-targeting-mixins.targets($feat-color) {\n      @include theme-mixins.prop(color, $color);\n    }\n  }\n}\n\n@mixin icon-height($height, $query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n\n  .mdc-tab-indicator__content--icon {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      height: $height;\n      font-size: $height;\n    }\n  }\n}\n\n//\n// Private\n//\n\n@mixin base_($query) {\n  $feat-structure: functions.create-target($query, structure);\n\n  @include underline-color(primary, $query);\n  @include icon-color(secondary, $query);\n  @include underline-height(2px, $query);\n  @include icon-height(34px, $query);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    display: flex;\n    position: absolute;\n    top: 0;\n    left: 0;\n    justify-content: center;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    z-index: 1;\n  }\n}\n','//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the "Software"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use "sass:map";\n@use "@material/feature-targeting/functions" as feature-targeting-functions;\n@use "@material/feature-targeting/mixins";\n@use "./custom-properties";\n@use "./gss";\n@use "./variables";\n\n@mixin core-styles($query: feature-targeting-functions.all()) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  :root {\n    @include mixins.targets($feat-color) {\n      @each $style in map.keys(variables.$property-values) {\n        --mdc-theme-#{$style}: #{map.get(variables.$property-values, $style)};\n      }\n    }\n  }\n\n  @each $style in map.keys(variables.$property-values) {\n    @if $style != \'background\' and $style != \'surface\' {\n      .mdc-theme--#{$style} {\n        @include mixins.targets($feat-color) {\n          @include prop(color, $style, true);\n        }\n      }\n    } @else {\n      .mdc-theme--#{$style} {\n        @include mixins.targets($feat-color) {\n          @include prop(background-color, $style);\n        }\n      }\n    }\n  }\n\n  // CSS rules for using primary and secondary (plus light/dark variants) as background colors.\n  @each $style in (\'primary\', \'secondary\') {\n    .mdc-theme--#{$style}-bg {\n      @include mixins.targets($feat-color) {\n        @include prop(background-color, $style, true);\n      }\n    }\n  }\n}\n\n/// Applies a dynamic value to the specified property. This mixin should be used\n/// in theme style mixins when setting properties.\n///\n/// The value may be any of the following:\n/// - a standard CSS value\n/// - a custom property Map, e.g. (varname: --mdc-foo, fallback: blue)\n/// - a Material theme key String, e.g. "primary", "on-primary"\n///\n/// @param {String} $property - the name of the CSS property.\n/// @param {String | Number | Color | List | Map} $value - the property\'s value.\n/// @param {Map} $gss - optional Map of GSS annotations to set.\n/// @param {Bool} $important - set to true to add an `!important` rule. Defaults\n///     to false.\n@mixin property($property, $value, $gss: (), $important: false) {\n  $important-rule: if($important, \'!important\', \'\');\n\n  @if custom-properties.is-custom-prop($value) {\n    // $value is a custom property Map\n    @include custom-properties.apply(\n      $property,\n      $value,\n      $gss: $gss,\n      $important: $important\n    );\n  } @else if map.has-key(variables.$property-values, $value) {\n    // $value is a theme property String\n    $fallback: map.get(variables.$property-values, $value);\n    $custom-prop: custom-properties.create(--mdc-theme-#{$style}, $fallback);\n    @include custom-properties.apply(\n      $property,\n      $custom-prop,\n      $gss: $gss,\n      $important: $important\n    );\n  } @else {\n    // $value is a standard CSS value\n    @include gss.annotate($gss);\n    #{$property}: $value #{$important-rule};\n  }\n}\n\n// Applies the correct theme color style to the specified property.\n// $property is typically color or background-color, but can be any CSS property that accepts color values.\n// $style should be one of the map keys in $mdc-theme-property-values (_variables.scss), or a color value.\n// @deprecated use the `property()` mixin instead\n@mixin prop($property, $style, $important: false) {\n  $important-rule: if($important, \'!important\', \'\');\n\n  @if custom-properties.is-custom-prop($style) {\n    @include custom-properties.apply($property, $style, $important: $important);\n  } @else if variables.is-valid-theme-prop-value_($style) {\n    #{$property}: $style #{$important-rule};\n  } @else {\n    @if not map.has-key(variables.$property-values, $style) {\n      @error "Invalid style: \'#{$style}\'. Choose one of: #{map.keys(variables.$property-values)}";\n    }\n    $value: map.get(variables.$property-values, $style);\n\n    #{$property}: $value #{$important-rule};\n    /* @alternate */\n    #{$property}: var(--mdc-theme-#{$style}, $value) #{$important-rule};\n  }\n}\n','//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the "Software"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use "sass:list";\n@use "sass:map";\n@use "sass:string";\n@use "@material/feature-targeting/functions" as feature-targeting-functions;\n@use "@material/feature-targeting/mixins" as feature-targeting-mixins;\n@use "@material/theme/mixins" as theme-mixins;\n@use "./variables";\n\n@mixin core-styles($query: feature-targeting-functions.all()) {\n  .mdc-typography {\n    @include base($query: $query);\n  }\n\n  @each $style in map.keys(variables.$styles) {\n    .mdc-typography--#{$style} {\n      @include typography($style, $query: $query);\n    }\n  }\n}\n\n@mixin base($query: feature-targeting-functions.all()) {\n  $feat-typography: feature-targeting-functions.create-target(\n    $query,\n    typography\n  );\n\n  @include smooth-font($query: $query);\n  @include feature-targeting-mixins.targets($feat-typography) {\n    @include theme-mixins.prop(\n      font-family,\n      (\n        varname: --mdc-typography-font-family,\n        fallback: map.get(variables.$base, \'font-family\'),\n      )\n    );\n  }\n}\n\n@mixin typography(\n  $style,\n  $query: feature-targeting-functions.all(),\n  $exclude-props: ()\n) {\n  $feat-typography: feature-targeting-functions.create-target(\n    $query,\n    typography\n  );\n  $style-props: map.get(variables.$styles, $style);\n\n  @if not map.has-key(variables.$styles, $style) {\n    @error "Invalid style specified! #{$style} doesn\'t exist. Choose one of #{map.keys(variables.$styles)}";\n  }\n\n  @include smooth-font($query: $query);\n  @include feature-targeting-mixins.targets($feat-typography) {\n    @each $key, $value in $style-props {\n      @if list.index($exclude-props, $key) == null {\n        $fallback: $value;\n        @if $key == \'font-family\' {\n          // Each style has its own font-family custom property, but should\n          // fallback to a generic font-family property. This allows\n          // customizing the font-family for all styles or only specific ones.\n          $fallback: (\n            varname: --mdc-typography-font-family,\n            fallback: $fallback,\n          );\n        }\n\n        @include theme-mixins.prop(\n          $key,\n          (\n            varname: --mdc-typography-#{$style}-#{$key},\n            fallback: $fallback,\n          )\n        );\n      }\n    }\n  }\n}\n\n/// Applies antialiasing via font-smoothing to text.\n@mixin smooth-font($query: feature-targeting-functions.all()) {\n  $feat-typography: feature-targeting-functions.create-target(\n    $query,\n    typography\n  );\n\n  @include feature-targeting-mixins.targets($feat-typography) {\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-font-smoothing: antialiased;\n  }\n}\n\n// Element must be `display: block` or `display: inline-block` for this to work.\n@mixin overflow-ellipsis($query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n  }\n}\n\n/// Sets a container\'s baseline that text content will align to.\n///\n/// If the `$display` is set to a flexbox display, only `$top` baseline may be\n/// set. A separate element must be added as a child of the container with a\n/// `$bottom` baseline.\n///\n/// @param {Number} $top - the distance from the top of the container to the\n///     text\'s baseline.\n/// @param {Number} $bottom - the distance from the text\'s baseline to the\n///     bottom of the container.\n/// @param {String} $display - the display type of the container. May be `flex`,\n///     `inline-flex`, `block`, or `inline-block`.\n@mixin baseline(\n  $top: 0,\n  $bottom: 0,\n  $display: block,\n  $query: feature-targeting-functions.all()\n) {\n  $validDisplayTypes: (flex, inline-flex, block, inline-block);\n\n  @if list.index($validDisplayTypes, $display) == null {\n    @error "mdc-typography: invalid display specified! #{$display} must be one of #{$validDisplayTypes}";\n  }\n\n  $isFlexbox: $display == \'flex\' or $display == \'inline-flex\';\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    display: $display;\n\n    @if $isFlexbox {\n      align-items: baseline;\n    }\n  }\n\n  @if $top > 0 {\n    @include baseline-top($top, $query: $query);\n  }\n\n  @if $bottom > 0 {\n    @if $isFlexbox {\n      @error "mdc-typography: invalid baseline with display type. #{$display} cannot specifiy $bottom. Add a separate child element with its own $bottom.";\n    }\n\n    @include baseline-bottom($bottom, $query: $query);\n  }\n}\n\n/// Sets the baseline of flow text content.\n///\n/// Separate `$top` and `$bottom` baselines may be specified. You should ensure\n/// that the `$top` baseline matches the previous text content\'s $bottom\n/// baseline to ensure text is positioned appropriately.\n///\n/// See go/css-baseline for reference on how this mixin works.\n///\n/// This is intended for text flow content only (e.g. `<h1>`, `<p>`, `<span>`,\n/// or `<div>` with only text content). Use `baseline()` to set the baseline of\n/// containers that are flexbox or have non-flow content children.\n///\n/// @param {Number} $top - the distance from the top of the container to the\n///     text\'s baseline.\n/// @param {Number} $bottom - the distance from the text\'s baseline to the\n///     bottom of the container.\n/// @param {Boolean} $lineHeight - the line-height to use for the text. This\n///     is the distance between baselines of multiple lines of text.\n/// @param {String} $display - the display type of the container. May be `block`\n///     or `inline-block`.\n@mixin text-baseline(\n  $top: 0,\n  $bottom: 0,\n  $display: block,\n  $lineHeight: normal,\n  $query: feature-targeting-functions.all()\n) {\n  $validDisplayTypes: (block, inline-block);\n\n  @if list.index($validDisplayTypes, $display) == null {\n    @error "mdc-typography: invalid display specified! #{$display} must be one of #{$validDisplayTypes}";\n  }\n\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include baseline(\n    $display: $display,\n    $top: $top,\n    $bottom: $bottom,\n    $query: $query\n  );\n  @include feature-targeting-mixins.targets($feat-structure) {\n    @if $top > 0 {\n      margin-top: 0;\n      /* @alternate */\n      line-height: #{$lineHeight};\n    }\n\n    @if $bottom > 0 {\n      margin-bottom: -1 * $bottom;\n    }\n  }\n}\n\n/// Creates a baseline strut from the top of a container. This mixin is for\n/// advanced users, prefer `baseline()`.\n///\n/// @param {Number} $distance - The distance from the top of the container to\n///     the text\'s baseline.\n@mixin baseline-top($distance, $query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  &::before {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      @include baseline-strut_($distance);\n\n      vertical-align: 0;\n    }\n  }\n}\n\n/// Creates a baseline strut from the baseline to the bottom of a container.\n/// This mixin is for advanced users, prefer `baseline()`.\n///\n/// @param {Number} $distance - The distance from the text\'s baseline to the\n///     bottom of the container.\n@mixin baseline-bottom($distance, $query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  &::after {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      @include baseline-strut_($distance);\n\n      vertical-align: -1 * $distance;\n    }\n  }\n}\n\n/// Adds an invisible, zero-width prefix to a container\'s text.\n/// This ensures that the baseline is always where the text would be, instead\n/// of defaulting to the container bottom when text is empty. Do not use this\n/// mixin if the `baseline` mixin is already applied.\n@mixin zero-width-prefix($query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  &::before {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      content: \'\\200b\';\n    }\n  }\n}\n\n@mixin baseline-strut_($distance) {\n  display: inline-block;\n  width: 0;\n  height: $distance;\n  content: \'\';\n}\n',"//\n// Copyright 2020 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n@use \"sass:map\";\n@use \"sass:meta\";\n@use \"./gss\";\n\n/// When true, add an additional property/value declaration before a custom\n/// property's `var()` to support IE. Configure\n/// `@material/theme/custom-properties` with this variable set to false to\n/// disable IE fallback values for custom properties.\n$ie-fallback: true !default;\n\n/// Returns true if the parameter is a custom property Map.\n///\n/// @param {*} $value - the value to test.\n/// @return true if the value is a custom property Map, or false if not.\n@function is-custom-prop($value) {\n  @return meta.type-of($value) == 'map' and map.has-key($value, 'varname');\n}\n\n/// Returns true if $prop1's varname and fallback values are deeply equal to\n/// $prop2's varname and fallback values.\n///\n/// @param {Map} $prop1 - the first value to test.\n/// @param {Map} $prop2 - the second value to test.\n/// @return true if both properties are deeply equal\n@function are-equal($prop1, $prop2) {\n  @return create-var($prop1) == create-var($prop2);\n}\n\n/// Creates a custom property Map.\n///\n/// @param {String} $varname - the custom property name.\n/// @param {String | Number | Map} - the fallback value (may be another custom\n///     property Map). May be null.\n/// @return a custom property Map.\n@function create($varname, $fallback: null) {\n  @return (varname: $varname, fallback: $fallback);\n}\n\n/// Returns the custom property variable name of a custom property Map.\n///\n/// @param {Map} $custom-prop - a custom property Map.\n/// @return the custom property variable name defined by the Map.\n@function get-varname($custom-prop) {\n  @return map.get($custom-prop, 'varname');\n}\n\n/// Returns the fallback value of a custom property Map. May be null if the\n/// custom property does not have a fallback.\n///\n/// @param {Map} $custom-prop - a custom property Map.\n/// @param {Bool} $shallow - if true, return the first fallback value, which\n///     may be another custom property Map. Defaults to false, which will return\n///     the deep final fallback value.\n/// @return the fallback value of a custom property Map. May be null.\n@function get-fallback($custom-prop, $shallow: false) {\n  $fallback: map.get($custom-prop, 'fallback');\n  @if is-custom-prop($fallback) and not $shallow {\n    @return get-fallback($fallback);\n  }\n\n  @return $fallback;\n}\n\n/// Creates a new custom property Map and returns it with the specified new\n/// fallback value.\n///\n/// @param {Map} $custom-prop - the custom property Map to copy.\n/// @param {String | Number | Map} $new-fallback - the new fallback value of the\n///     custom property Map. May be null.\n/// @param {Bool} $shallow - if true, set the first fallback value. Defaults to\n///     false, which will set the deep final fallback value.\n/// @return a new custom property Map with the new fallback value.\n@function set-fallback($custom-prop, $new-fallback, $shallow: false) {\n  $varname: get-varname($custom-prop);\n  $first-fallback: get-fallback($custom-prop, $shallow: true);\n\n  @if is-custom-prop($first-fallback) and not $shallow {\n    // The first fallback is a custom property and $shallow is false. Deeply\n    // set the fallback value of the custom property and get the new custom\n    // property Map returned.\n    $new-fallback: set-fallback($first-fallback, $new-fallback);\n  }\n\n  @return create($varname, $new-fallback);\n}\n\n/// Creates and returns a `var()` function declaration represented by the\n/// provided custom property Map.\n///\n/// @param {Map} $custom-prop - a custom property Map.\n/// @return a `var()` function declaration using the custom property Map's\n///     varname and fallback value.\n@function create-var($custom-prop) {\n  $varname: get-varname($custom-prop);\n  $fallback: get-fallback($custom-prop, $shallow: true);\n\n  @if is-custom-prop($fallback) {\n    @return var($varname, create-var($fallback));\n  } @else if $fallback != null {\n    @return var($varname, $fallback);\n  } @else {\n    @return var($varname);\n  }\n}\n\n/// Applies a custom property value to the specified property.\n///\n/// @param {String} $property - the name of the CSS property.\n/// @param {Map} $custom-prop - a custom property Map for the property's value.\n/// @param {Map} $gss - optional Map of GSS annotations to set.\n/// @param {Bool} $important - set to true to add an `!important` rule. Defaults\n///     to false.\n@mixin apply($property, $custom-prop, $gss: (), $important: false) {\n  @if not is-custom-prop($custom-prop) {\n    @error \"mdc-theme: Invalid custom property: #{$custom-prop}. Must be a Map with 'varname' and 'fallback'.\";\n  }\n\n  $important-rule: if($important, '!important', '');\n\n  $fallback: get-fallback($custom-prop);\n  @if $ie-fallback and $fallback != null {\n    @include gss.annotate($gss);\n    #{$property}: #{$fallback} #{$important-rule};\n\n    // add @alternate to annotations\n    $gss: map.merge(\n      $gss,\n      (\n        alternate: true,\n      )\n    );\n  }\n\n  @include gss.annotate($gss);\n  #{$property}: create-var($custom-prop) #{$important-rule};\n}\n",'//\n// Copyright 2018 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the "Software"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use "@material/theme/variables"; // for mdc-theme-prop-value()\n\n$icon-size: 24px !default;\n$height: 48px !default;\n$stacked-height: 72px !default;\n$horizontal-padding: 24px !default;\n$text-label-opacity: 0.6 !default;\n$icon-opacity: 0.54 !default;\n$text-label-color-default: rgba(\n  variables.prop-value(on-surface),\n  $text-label-opacity\n) !default;\n$icon-color-default: rgba(\n  variables.prop-value(on-surface),\n  $icon-opacity\n) !default;\n$text-label-color-active: primary !default;\n$icon-color-active: primary !default;\n','//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the "Software"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use "sass:list";\n@use "@material/theme/mixins" as theme;\n@use "./variables";\n\n// Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.\n//\n// Usage Example:\n//\n// ```scss\n// .mdc-foo {\n//   position: absolute;\n//   left: 0;\n//\n//   @include rtl {\n//     left: auto;\n//     right: 0;\n//   }\n//\n//   &__bar {\n//     margin-left: 4px;\n//     @include rtl(".mdc-foo") {\n//       margin-left: auto;\n//       margin-right: 4px;\n//     }\n//   }\n// }\n//\n// .mdc-foo--mod {\n//   padding-left: 4px;\n//\n//   @include rtl {\n//     padding-left: auto;\n//     padding-right: 4px;\n//   }\n// }\n// ```\n//\n// Note that this mixin works by checking for an ancestor element with `[dir="rtl"]`.\n// As a result, nested `dir` values are not supported:\n//\n// ```html\n// <html dir="rtl">\n//   \x3c!-- ... --\x3e\n//   <div dir="ltr">\n//     <div class="mdc-foo">Styled incorrectly as RTL!</div>\n//   </div>\n// </html>\n// ```\n//\n// In the future, selectors such as the `:dir` pseudo-class (http://mdn.io/css/:dir) will help us mitigate this.\n@mixin rtl($root-selector: null) {\n  @if (variables.$include) {\n    @if ($root-selector) {\n      @at-root {\n        #{$root-selector}[dir=\'rtl\'] &,\n        [dir=\'rtl\'] #{$root-selector} & {\n          @content;\n        }\n      }\n    } @else {\n      [dir=\'rtl\'] &,\n      &[dir=\'rtl\'] {\n        @content;\n      }\n    }\n  }\n}\n\n// Takes a base box-model property name (`margin`, `border`, `padding`, etc.) along with a\n// default direction (`left` or `right`) and value, and emits rules which apply the given value to the\n// specified direction by default and the opposite direction in RTL.\n//\n// For example:\n//\n// ```scss\n// .mdc-foo {\n//   @include rtl-reflexive-box(margin, left, 8px);\n// }\n// ```\n//\n// is equivalent to:\n//\n// ```scss\n// .mdc-foo {\n//   margin-left: 8px;\n//   margin-right: 0;\n//\n//   @include rtl {\n//     margin-left: 0;\n//     margin-right: 8px;\n//   }\n// }\n// ```\n//\n// whereas:\n//\n// ```scss\n// .mdc-foo {\n//   @include rtl-reflexive-box(margin, right, 8px);\n// }\n// ```\n//\n// is equivalent to:\n//\n// ```scss\n// .mdc-foo {\n//   margin-left: 0;\n//   margin-right: 8px;\n//\n//   @include rtl {\n//     margin-left: 8px;\n//     margin-right: 0;\n//   }\n// }\n// ```\n//\n// You can also pass an optional 4th `$root-selector` argument which will be forwarded to `mdc-rtl`,\n// e.g. `@include rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.\n//\n// Note that this function will always zero out the original value in an RTL context.\n// If you\'re trying to flip the values, use `mdc-rtl-reflexive-property()` instead.\n@mixin reflexive-box(\n  $base-property,\n  $default-direction,\n  $value,\n  $root-selector: null\n) {\n  @if (list.index((right, left), $default-direction) == null) {\n    @error "Invalid default direction: \'#{$default-direction}\'. Please specifiy either \'right\' or \'left\'.";\n  }\n\n  $left-value: $value;\n  $right-value: 0;\n\n  @if ($default-direction == right) {\n    $left-value: 0;\n    $right-value: $value;\n  }\n\n  @include reflexive-property(\n    $base-property,\n    $left-value,\n    $right-value,\n    $root-selector\n  );\n}\n\n// Takes a base property and emits rules that assign <base-property>-left to <left-value> and\n// <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.\n// For example:\n//\n// ```scss\n// .mdc-foo {\n//   @include rtl-reflexive-property(margin, auto, 12px);\n// }\n// ```\n//\n// is equivalent to:\n//\n// ```scss\n// .mdc-foo {\n//   margin-left: auto;\n//   margin-right: 12px;\n//\n//   @include rtl {\n//     margin-left: 12px;\n//     margin-right: auto;\n//   }\n// }\n// ```\n//\n// An optional 4th `$root-selector` argument can be given, which will be passed to `mdc-rtl`.\n@mixin reflexive-property(\n  $base-property,\n  $left-value,\n  $right-value,\n  $root-selector: null\n) {\n  $prop-left: #{$base-property}-left;\n  $prop-right: #{$base-property}-right;\n\n  @include reflexive(\n    $prop-left,\n    $left-value,\n    $prop-right,\n    $right-value,\n    $root-selector\n  );\n}\n\n// Takes an argument specifying a horizontal position property (either "left" or "right") as well\n// as a value, and applies that value to the specified position in a LTR context, and flips it in a\n// RTL context. For example:\n//\n// ```scss\n// .mdc-foo {\n//   @include rtl-reflexive-position(left, 0);\n// }\n// ```\n//\n// is equivalent to:\n//\n// ```scss\n// .mdc-foo {\n//   left: 0;\n//   right: initial;\n//\n//   @include rtl {\n//     left: initial;\n//     right: 0;\n//   }\n// }\n// ```\n//\n// An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.\n@mixin reflexive-position($position-property, $value, $root-selector: null) {\n  @if (list.index((right, left), $position-property) == null) {\n    @error "Invalid position #{position-property}. Please specifiy either right or left";\n  }\n\n  // TODO: "initial" is not supported in IE 11. https://caniuse.com/#feat=css-initial-value\n  $left-value: $value;\n  $right-value: initial;\n\n  @if ($position-property == right) {\n    $right-value: $value;\n    $left-value: initial;\n  }\n\n  @include reflexive(left, $left-value, right, $right-value, $root-selector);\n}\n\n// Takes pair of properties with values as arguments and flips it in RTL context.\n// For example:\n//\n// ```scss\n// .mdc-foo {\n//   @include rtl-reflexive(left, 2px, right, 5px);\n// }\n// ```\n//\n// is equivalent to:\n//\n// ```scss\n// .mdc-foo {\n//   left: 2px;\n//   right: 5px;\n//\n//   @include rtl {\n//     right: 2px;\n//     left: 5px;\n//   }\n// }\n// ```\n//\n// An optional fifth `$root-selector` argument may also be given, which is passed to `mdc-rtl`.\n@mixin reflexive(\n  $left-property,\n  $left-value,\n  $right-property,\n  $right-value,\n  $root-selector: null\n) {\n  @include property_($left-property, $left-value);\n  @include property_($right-property, $right-value);\n\n  @include rtl($root-selector) {\n    @include property_($left-property, $right-value);\n    @include property_($right-property, $left-value);\n  }\n}\n\n///\n/// Adds `@noflip` annotation when `$mdc-rtl-include` is true.\n///\n/// @param {String} $property\n/// @param {String} $value\n/// @access private\n///\n@mixin property_($property, $value) {\n  @include theme.property(\n    $property,\n    $value,\n    $gss: (noflip: variables.$include)\n  );\n}\n','//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the "Software"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n// MDC Ripple keyframes are split into their own file so that _mixins.scss can rely on them.\n\n@use "@material/animation/variables";\n@use "./variables" as variables2;\n\n@mixin keyframes_ {\n  @keyframes mdc-ripple-fg-radius-in {\n    from {\n      animation-timing-function: variables.$standard-curve-timing-function;\n      // NOTE: For these keyframes, we do not need custom property fallbacks because they are only\n      // used in conjunction with `.mdc-ripple-upgraded`. Since MDCRippleFoundation checks to ensure\n      // that custom properties are supported within the browser before adding this class, we can\n      // safely use them without a fallback.\n      transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1);\n    }\n\n    to {\n      transform: translate(var(--mdc-ripple-fg-translate-end, 0))\n        scale(var(--mdc-ripple-fg-scale, 1));\n    }\n  }\n\n  @keyframes mdc-ripple-fg-opacity-in {\n    from {\n      animation-timing-function: linear;\n      opacity: 0;\n    }\n\n    to {\n      opacity: var(--mdc-ripple-fg-opacity, 0);\n    }\n  }\n\n  @keyframes mdc-ripple-fg-opacity-out {\n    from {\n      animation-timing-function: linear;\n      opacity: var(--mdc-ripple-fg-opacity, 0);\n    }\n\n    to {\n      opacity: 0;\n    }\n  }\n}\n','//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the "Software"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n$deceleration-curve-timing-function: cubic-bezier(0, 0, 0.2, 1) !default;\n$standard-curve-timing-function: cubic-bezier(0.4, 0, 0.2, 1) !default;\n$acceleration-curve-timing-function: cubic-bezier(0.4, 0, 1, 1) !default;\n$sharp-curve-timing-function: cubic-bezier(0.4, 0, 0.6, 1) !default;\n',"//\n// Copyright 2016 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use \"sass:color\";\n@use \"sass:map\";\n@use \"@material/animation/functions\" as functions2;\n@use \"@material/animation/variables\" as variables2;\n@use \"@material/base/mixins\" as base-mixins;\n@use \"@material/feature-targeting/functions\" as feature-targeting-functions;\n@use \"@material/feature-targeting/mixins\" as feature-targeting-mixins;\n@use \"@material/theme/mixins\" as theme-mixins;\n@use \"./functions\";\n@use \"./keyframes\";\n@use \"./variables\";\n@use \"@material/theme/variables\" as theme-variables;\n\n@mixin core-styles($query: feature-targeting-functions.all()) {\n  // postcss-bem-linter: define ripple-surface\n\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  .mdc-ripple-surface {\n    @include surface($query: $query);\n    @include states($query: $query);\n    @include radius-bounded($query: $query);\n\n    @include feature-targeting-mixins.targets($feat-structure) {\n      position: relative;\n      outline: none;\n      overflow: hidden;\n    }\n\n    &[data-mdc-ripple-is-unbounded] {\n      @include radius-unbounded($query: $query);\n\n      @include feature-targeting-mixins.targets($feat-structure) {\n        overflow: visible;\n      }\n    }\n\n    &--primary {\n      @include states(primary, $query: $query);\n    }\n\n    &--accent {\n      @include states(secondary, $query: $query);\n    }\n  }\n\n  // postcss-bem-linter: end\n}\n\n@mixin common($query: feature-targeting-functions.all()) {\n  $feat-animation: feature-targeting-functions.create-target($query, animation);\n\n  // Ensure that styles needed by any component using MDC Ripple are emitted, but only once.\n  // (Every component using MDC Ripple imports these mixins, but doesn't necessarily import\n  // mdc-ripple.scss.)\n  @include feature-targeting-mixins.targets($feat-animation) {\n    @include base-mixins.emit-once('mdc-ripple/common/animation') {\n      @include keyframes.keyframes_;\n    }\n  }\n}\n\n@mixin surface($query: feature-targeting-functions.all(), $ripple-target: '&') {\n  $feat-animation: feature-targeting-functions.create-target($query, animation);\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    --mdc-ripple-fg-size: 0;\n    --mdc-ripple-left: 0;\n    --mdc-ripple-top: 0;\n    --mdc-ripple-fg-scale: 1;\n    --mdc-ripple-fg-translate-end: 0;\n    --mdc-ripple-fg-translate-start: 0;\n\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n    // !!DO NOT REMOVE!! mdc-ripple-will-change-replacer\n  }\n\n  #{$ripple-target}::before,\n  #{$ripple-target}::after {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      position: absolute;\n      border-radius: 50%;\n      opacity: 0;\n      pointer-events: none;\n      content: '';\n    }\n  }\n\n  #{$ripple-target}::before {\n    @include feature-targeting-mixins.targets($feat-animation) {\n      // Also transition background-color to avoid unnatural color flashes when toggling activated/selected state\n      transition: opacity variables.$states-wash-duration linear,\n        background-color variables.$states-wash-duration linear;\n    }\n\n    @include feature-targeting-mixins.targets($feat-structure) {\n      z-index: 1; // Ensure that the ripple wash for hover/focus states is displayed on top of positioned child elements\n    }\n  }\n\n  // Common styles for upgraded surfaces (some of these depend on custom properties set via JS or other mixins)\n\n  &.mdc-ripple-upgraded {\n    #{$ripple-target}::before {\n      @include feature-targeting-mixins.targets($feat-structure) {\n        transform: scale(var(--mdc-ripple-fg-scale, 1));\n      }\n    }\n\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-structure) {\n        top: 0;\n        /* @noflip */\n        left: 0;\n        transform: scale(0);\n        transform-origin: center center;\n      }\n    }\n  }\n\n  &.mdc-ripple-upgraded--unbounded {\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-structure) {\n        top: var(--mdc-ripple-top, 0);\n        /* @noflip */\n        left: var(--mdc-ripple-left, 0);\n      }\n    }\n  }\n\n  &.mdc-ripple-upgraded--foreground-activation {\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-animation) {\n        animation: mdc-ripple-fg-radius-in variables.$translate-duration\n            forwards,\n          mdc-ripple-fg-opacity-in variables.$fade-in-duration forwards;\n      }\n    }\n  }\n\n  &.mdc-ripple-upgraded--foreground-deactivation {\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-animation) {\n        animation: mdc-ripple-fg-opacity-out variables.$fade-out-duration;\n      }\n\n      @include feature-targeting-mixins.targets($feat-structure) {\n        // Retain transform from mdc-ripple-fg-radius-in activation\n        transform: translate(var(--mdc-ripple-fg-translate-end, 0))\n          scale(var(--mdc-ripple-fg-scale, 1));\n      }\n    }\n  }\n}\n\n@mixin states-base-color(\n  $color,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  #{$ripple-target}::before,\n  #{$ripple-target}::after {\n    @include feature-targeting-mixins.targets($feat-color) {\n      @if color.alpha(theme-variables.prop-value($color)) > 0 {\n        @include theme-mixins.prop(background-color, $color);\n      } @else {\n        // If a color with 0 alpha is specified, don't render the ripple pseudo-elements at all.\n        // This avoids unnecessary transitions and overflow.\n        content: none;\n      }\n    }\n  }\n}\n\n///\n/// Customizes ripple opacities in `hover`, `focus`, or `press` states\n/// @param {map} $opacity-map - map specifying custom opacity of zero or more states\n/// @param {bool} $has-nested-focusable-element - whether the component contains a focusable element in the root\n/// @param {string} $ripple-target - the optional selector for the ripple element\n///\n@mixin states-opacities(\n  $opacity-map: (),\n  $has-nested-focusable-element: false,\n  $ripple-target: '&',\n  $query: feature-targeting-functions.all()\n) {\n  // Ensure sufficient specificity to override base state opacities\n  @if map.has-key($opacity-map, hover) {\n    @include states-hover-opacity(\n      map.get($opacity-map, hover),\n      $ripple-target: $ripple-target,\n      $query: $query\n    );\n  }\n\n  @if map.has-key($opacity-map, focus) {\n    @include states-focus-opacity(\n      map.get($opacity-map, focus),\n      $ripple-target: $ripple-target,\n      $has-nested-focusable-element: $has-nested-focusable-element,\n      $query: $query\n    );\n  }\n\n  @if map.has-key($opacity-map, press) {\n    @include states-press-opacity(\n      map.get($opacity-map, press),\n      $ripple-target: $ripple-target,\n      $query: $query\n    );\n  }\n}\n\n@mixin states-hover-opacity(\n  $opacity,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  // Background wash styles, for both CSS-only and upgraded stateful surfaces\n  &:hover {\n    #{$ripple-target}::before {\n      // Opacity falls under color because the chosen opacity is color-dependent in typical usage\n      @include feature-targeting-mixins.targets($feat-color) {\n        opacity: $opacity;\n      }\n    }\n  }\n}\n\n@mixin states-focus-opacity(\n  $opacity,\n  $has-nested-focusable-element: false,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  // Focus overrides hover by reusing the ::before pseudo-element.\n  // :focus-within generally works on non-MS browsers and matches when a *child* of the element has focus.\n  // It is useful for cases where a component has a focusable element within the root node, e.g. text field,\n  // but undesirable in general in case of nested stateful components.\n  // We use a modifier class for JS-enabled surfaces to support all use cases in all browsers.\n  @if $has-nested-focusable-element {\n    // JS-enabled selectors.\n    &.mdc-ripple-upgraded--background-focused,\n    &.mdc-ripple-upgraded:focus-within,\n    // CSS-only selectors.\n    &:not(.mdc-ripple-upgraded):focus,\n    &:not(.mdc-ripple-upgraded):focus-within {\n      #{$ripple-target}::before {\n        @include states-focus-opacity-properties_(\n          $opacity: $opacity,\n          $query: $query\n        );\n      }\n    }\n  } @else {\n    // JS-enabled selectors.\n    &.mdc-ripple-upgraded--background-focused,\n    // CSS-only selectors.\n    &:not(.mdc-ripple-upgraded):focus {\n      #{$ripple-target}::before {\n        @include states-focus-opacity-properties_(\n          $opacity: $opacity,\n          $query: $query\n        );\n      }\n    }\n  }\n}\n\n@mixin states-focus-opacity-properties_($opacity, $query) {\n  $feat-animation: feature-targeting-functions.create-target($query, animation);\n  // Opacity falls under color because the chosen opacity is color-dependent in typical usage\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  // Note that this duration is only effective on focus, not blur\n  @include feature-targeting-mixins.targets($feat-animation) {\n    transition-duration: 75ms;\n  }\n\n  @include feature-targeting-mixins.targets($feat-color) {\n    opacity: $opacity;\n  }\n}\n\n@mixin states-press-opacity(\n  $opacity,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  $feat-animation: feature-targeting-functions.create-target($query, animation);\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  // Styles for non-upgraded (CSS-only) stateful surfaces\n\n  &:not(.mdc-ripple-upgraded) {\n    // Apply press additively by using the ::after pseudo-element\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-animation) {\n        transition: opacity variables.$fade-out-duration linear;\n      }\n    }\n\n    &:active {\n      #{$ripple-target}::after {\n        @include feature-targeting-mixins.targets($feat-animation) {\n          transition-duration: variables.$fade-in-duration;\n        }\n\n        // Opacity falls under color because the chosen opacity is color-dependent in typical usage\n        @include feature-targeting-mixins.targets($feat-color) {\n          opacity: $opacity;\n        }\n      }\n    }\n  }\n\n  &.mdc-ripple-upgraded {\n    @include feature-targeting-mixins.targets($feat-color) {\n      --mdc-ripple-fg-opacity: #{$opacity};\n    }\n  }\n}\n\n// Simple mixin for base states which automatically selects opacity values based on whether the ink color is\n// light or dark.\n@mixin states(\n  $color: theme-variables.prop-value(on-surface),\n  $has-nested-focusable-element: false,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  @include states-interactions_(\n    $color: $color,\n    $has-nested-focusable-element: $has-nested-focusable-element,\n    $query: $query,\n    $ripple-target: $ripple-target\n  );\n}\n\n// Simple mixin for activated states which automatically selects opacity values based on whether the ink color is\n// light or dark.\n@mixin states-activated(\n  $color,\n  $has-nested-focusable-element: false,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n  $activated-opacity: functions.states-opacity($color, activated);\n\n  &--activated {\n    // Stylelint seems to think that '&' qualifies as a type selector here?\n    // stylelint-disable-next-line selector-max-type\n    #{$ripple-target}::before {\n      // Opacity falls under color because the chosen opacity is color-dependent.\n      @include feature-targeting-mixins.targets($feat-color) {\n        opacity: $activated-opacity;\n      }\n    }\n\n    @include states-interactions_(\n      $color: $color,\n      $has-nested-focusable-element: $has-nested-focusable-element,\n      $opacity-modifier: $activated-opacity,\n      $query: $query,\n      $ripple-target: $ripple-target\n    );\n  }\n}\n\n// Simple mixin for selected states which automatically selects opacity values based on whether the ink color is\n// light or dark.\n@mixin states-selected(\n  $color,\n  $has-nested-focusable-element: false,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n  $selected-opacity: functions.states-opacity($color, selected);\n\n  &--selected {\n    // stylelint-disable-next-line selector-max-type\n    #{$ripple-target}::before {\n      // Opacity falls under color because the chosen opacity is color-dependent.\n      @include feature-targeting-mixins.targets($feat-color) {\n        opacity: $selected-opacity;\n      }\n    }\n\n    @include states-interactions_(\n      $color: $color,\n      $has-nested-focusable-element: $has-nested-focusable-element,\n      $opacity-modifier: $selected-opacity,\n      $query: $query,\n      $ripple-target: $ripple-target\n    );\n  }\n}\n\n@mixin radius-bounded(\n  $radius: 100%,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  $feat-struture: feature-targeting-functions.create-target($query, structure);\n\n  #{$ripple-target}::before,\n  #{$ripple-target}::after {\n    @include feature-targeting-mixins.targets($feat-struture) {\n      top: calc(50% - #{$radius});\n      /* @noflip */\n      left: calc(50% - #{$radius});\n      width: $radius * 2;\n      height: $radius * 2;\n    }\n  }\n\n  &.mdc-ripple-upgraded {\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-struture) {\n        width: var(--mdc-ripple-fg-size, $radius);\n        height: var(--mdc-ripple-fg-size, $radius);\n      }\n    }\n  }\n}\n\n@mixin radius-unbounded(\n  $radius: 100%,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  $feat-struture: feature-targeting-functions.create-target($query, structure);\n\n  #{$ripple-target}::before,\n  #{$ripple-target}::after {\n    @include feature-targeting-mixins.targets($feat-struture) {\n      top: calc(50% - #{$radius / 2});\n      /* @noflip */\n      left: calc(50% - #{$radius / 2});\n      width: $radius;\n      height: $radius;\n    }\n  }\n\n  &.mdc-ripple-upgraded {\n    #{$ripple-target}::before,\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-struture) {\n        top: var(--mdc-ripple-top, calc(50% - #{$radius / 2}));\n        /* @noflip */\n        left: var(--mdc-ripple-left, calc(50% - #{$radius / 2}));\n        width: var(--mdc-ripple-fg-size, $radius);\n        height: var(--mdc-ripple-fg-size, $radius);\n      }\n    }\n\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-struture) {\n        width: var(--mdc-ripple-fg-size, $radius);\n        height: var(--mdc-ripple-fg-size, $radius);\n      }\n    }\n  }\n}\n\n@mixin states-interactions_(\n  $color,\n  $has-nested-focusable-element,\n  $opacity-modifier: 0,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  @include target-selector($ripple-target) {\n    @include states-base-color($color, $query);\n  }\n\n  $opacity-map: (\n    hover: functions.states-opacity($color, hover) + $opacity-modifier,\n    focus: functions.states-opacity($color, focus) + $opacity-modifier,\n    press: functions.states-opacity($color, press) + $opacity-modifier,\n  );\n\n  @include states-opacities(\n    $opacity-map,\n    $has-nested-focusable-element: $has-nested-focusable-element,\n    $ripple-target: $ripple-target,\n    $query: $query\n  );\n}\n\n// Wraps content in the `ripple-target` selector if it exists.\n@mixin target-selector($ripple-target: '&') {\n  @if $ripple-target == '&' {\n    @content;\n  } @else {\n    #{$ripple-target} {\n      @content;\n    }\n  }\n}\n\n// Common styles for a ripple target element.\n// Used for components which have an inner ripple target element.\n@mixin target-common($query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    // Necessary for clicks on other inner elements (e.g. close icon in chip)\n    // to go through.\n    pointer-events: none;\n  }\n}\n",'//\n// Copyright 2016 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the "Software"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n$fade-in-duration: 75ms !default;\n$fade-out-duration: 150ms !default;\n$translate-duration: 225ms !default;\n$states-wash-duration: 15ms !default;\n\n// Notes on states:\n// * focus takes precedence over hover (i.e. if an element is both focused and hovered, only focus value applies)\n// * press state applies to a separate pseudo-element, so it has an additive effect on top of other states\n// * selected/activated are applied additively to hover/focus via calculations at preprocessing time\n\n$dark-ink-opacities: (\n  hover: 0.04,\n  focus: 0.12,\n  press: 0.12,\n  selected: 0.08,\n  activated: 0.12,\n) !default;\n\n$light-ink-opacities: (\n  hover: 0.08,\n  focus: 0.24,\n  press: 0.24,\n  selected: 0.16,\n  activated: 0.24,\n) !default;\n\n// Legacy\n\n$pressed-dark-ink-opacity: 0.16 !default;\n$pressed-light-ink-opacity: 0.32 !default;\n',"html {\n  height: 100%;\n  width: 100%;\n  font-family: $main-font;\n  font-weight: bold;\n  scroll-behavior: smooth;\n}\nbody {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.mdc-tab-bar {\n  position: fixed;\n  top: 0;\n  z-index:1;\n  background: white;\n}\n\narticle {\n  display: flex;\n  font-size: 20px;\n  h2 {\n    font-size: 40px;\n\n  }\n  h3 {\n    font-size: 30px;\n\n  }\n  pre {\n    font-family: $main-font;\n  }\n\n}\n\n\n#content {\n  margin-top: 48px;\n  max-width: 1400px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n","@import './font';\n\n$main-font: 'Open Sans Condensed';\n$tablet-width: 768px;\n$desktop-width: 1500px;\n",".logo-div {\n  background-size: cover;\n  background-position: center;\n  width: 50px;\n  height: 50px;\n  align-self: center;\n  margin: 1%;\n}\n",".hero-image {\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  position: relative;\n  width: 100%;\n  height: 85vh;\n  margin-bottom: 4%;\n}\n\n.hero-text {\n  text-align: center;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: white;\n  background: none;\n  margin-top: 1%;\n  margin-bottom: 1%;\n}\n\n@media only screen and (max-width: 560px) {\n  .hero-text {\n    h1 {\n      font-size: 24px;\n    }\n  }\n}\n","footer {\n  display: flex;\n  width: 100%;\n  background-color: $grey;\n  padding: 0.5% 0%;\n  p {\n    padding-left: 1%;\n  }\n}\n","$red: rgb(164,17,9);\n$green: rgb(218,194,0);\n$blue: rgb(0,174,239);\n$purple: rgb(143,0,102);\n$grey: rgb(102,102,102);\n",".hours-article {\n  display: flex;\n  width: 100%;\n  flex-direction: row;\n  justify-content: space-around;\n  .article-card {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n}\n\n\n@media only screen and (max-width: 560px) {\n.hours-article {\n    flex-direction: column;\n  }\n}\n",'.manifesto-article {\n  flex-direction: column;\n  font-size: 20px;\n  h3 {\n    padding-left: 5%;\n    padding-bottom: 2%;\n  }\n  p {\n    padding-left: 5%;\n    padding-right: 5%;\n    padding-top: 1%;\n  }\n\n  ul {\n    padding: 1% 5% 2% 6%;\n  }\n\n  ul li::before {\n    content: "-";\n    color: $blue;\n    font-weight: bolder;\n    display: inline-block;\n    /* Needed to add space between the bullet and the text */\n    width: 1em;\n  }\n}\n',"@import '../vars/colors.scss';\n\n.contact-article {\n  display: flex;\n  width: 100%;\n  flex-direction: row;\n  justify-content: space-around;\n\n  .article-card {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  svg {\n    width: 30px;\n    height: 30px;\n    margin-top: 2%;\n    margin-left: 1%;\n  }\n}\n\n.contact-form {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  width: 80%;\n  height: 40vh;\n\n  h3 {\n    font-size: 30px;\n  }\n\n  .infoDiv {\n    display: flex;\n    justify-content: space-around;\n    height: 50px;\n    width: 60%;\n  }\n\n  .messageDiv {\n    display: flex;\n    width: 80%;\n    .input-group {\n      width: 50%;\n    }\n  }\n\n  .input-group {\n    position: relative;\n    margin: 40px auto;\n    width: 35%;\n  }\n\n\n  .form-control {\n    position: relative;\n    z-index: 1;\n    width: 100%;\n    height: 35px;\n    font-size: 16px;\n    border: none;\n    border-bottom: 1px solid lighten(black, 85%);\n    background-color: transparent;\n\n    & + label {\n      position: absolute;\n      top: 10px;\n      left: 3px;\n      font-size: 16px;\n      color: lighten(black, 60%);\n      transition: all 0.2s ease-out;\n    }\n\n    &:focus {\n      outline: none;\n      border-width: 2px;\n      border-color: $green;\n      transition: all 0.2s ease-out;\n    }\n\n    &.has-value + label,\n    &:focus + label {\n      top: -15px;\n      color: $green;\n      font-size: 12px;\n    }\n\n    &.has-value:not(:focus) + label {\n      color: lighten(black, 60%);\n    }\n  }\n}\n\n.map-container {\n  width: 100%;\n  height: 40vh;\n  margin: 1% 0;\n}\n.map-display {\n  width: 100%;\n  height: 100%;\n}\n.map-frame {\n  width: 100%;\n  height: 100%;\n  border: 0;\n}\n\n\n\n@media only screen and (max-width: 1065px) {\n  .contact-article {\n    flex-direction: column;\n  }\n}\n@media only screen and (max-width: 560px) {\n  .contact-article {\n    .article-card {\n      flex-direction: column;\n      padding: 3% 0;\n    }\n\n    p {\n      margin-left: 5%;\n      margin-right: 5%;\n    }\n  }\n\n  .contact-form {\n    h3 {\n      margin-top: -25px;\n      margin-bottom: -50px;\n    }\n\n    .infoDiv {\n      flex-direction: column;\n      justify-content: flex-start;\n      height: 20%;\n      padding: 0;\n      margin: 0;\n\n      .input-group {\n        margin: 3%;\n        width: 80%;\n      }\n    }\n\n    .input-group {\n      margin: 1%;\n    }\n\n    .messageDiv {\n      flex-direction: column;\n      align-items: center;\n    }\n  }\n}\nbutton{\n    background-color: $green;\n    color:white;\n    font-size:14px;\n    text-transform:uppercase;\n    font-weight:500;\n    border:1px solid $green;\n    height:36px;\n    padding:0 16px;\n    border-radius:2px;\n    box-shadow:0 1px 3px lighten(black, 60%);\n}\n\ntextarea.form-control{\n  height:120px;\n}\n","@import '../vars/colors.scss';\n\n// Dropdown menu styling-----------------\n/* Reset Select */\nselect {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  -ms-appearance: none;\n  appearance: none;\n  outline: 0;\n  box-shadow: none;\n  border: 0 !important;\n  background-image: none;\n}\n/* Remove IE arrow */\nselect::-ms-expand {\n  display: none;\n}\n/* Custom Select */\n.select {\n  position: relative;\n  top: 60%;\n  left: 550px;\n  display: flex;\n  width: 20em;\n  height: 3em;\n  line-height: 3;\n  background-color: white;\n  overflow: hidden;\n  border-radius: .25em;\n}\nselect {\n  flex: 1;\n  padding: 0 .5em;\n  background-color: white;\n  cursor: pointer;\n}\noption {\n  background-color: white;\n  text-decoration-color: $purple;\n}\n/* Arrow */\n.select::after {\n  content: '\\25BC';\n  position: absolute;\n  top: 0;\n  right: 0;\n  padding: 0 1em;\n  background: white;\n  cursor: pointer;\n  pointer-events: none;\n  -webkit-transition: .25s all ease;\n  -o-transition: .25s all ease;\n  transition: .25s all ease;\n}\n/* Transition */\n.select:hover::after {\n  color: $purple;\n}\n// end of dropdown menu style---------------------------------------\n\n\n// Menus article, holder, and items--------------------------------\n.menus-article {\n  flex-direction: column;\n  width: 100%;\n  h2 {\n    color: $purple;\n  }\n}\n\n\n.menu-holder {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  p {\n    display: flex;\n    width: 70%;\n    justify-content: center;\n  }\n}\nhr {\n  width: 100%;\n  height: 1px;\n  background-color: $purple;\n  border-color: $purple;\n}\n.menu-div {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  padding: 5%;\n}\n.menu-item-div {\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  padding: 1%;\n  p {\n    justify-content: flex-start;\n  }\n}\n.menu-item-title-div {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n}\n.lunch-menu-div {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 1%;\n}\n.lunch-item-holder {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n}\n\n\n\n// Media queries (mostly to center dropdown menu)\n@media only screen and (max-width: 1395px) {\n  .select {\n    left: 38%;\n  }\n}\n@media only screen and (max-width: 1100px) {\n  .select {\n    left: 32%;\n  }\n}\n@media only screen and (max-width: 800px) {\n  .select {\n    left: 26%;\n  }\n}\n@media only screen and (max-width: 630px) {\n  .select {\n    left: 20%;\n  }\n}\n@media only screen and (max-width: 480px) {\n  .select {\n    left: 14%;\n  }\n}\n@media only screen and (max-width: 400px) {\n  .select {\n    left: 5%;\n  }\n}\n"],sourceRoot:""}]),t.default=i},function(e,t,n){"use strict";n.r(t);var a=(e,t)=>{let n=document.createElement("button");n.setAttribute("class","mdc-tab"),n.setAttribute("role","tab"),n.setAttribute("tabindex",t);let a=document.createElement("span");a.setAttribute("class","mdc-tab__content");let i=document.createElement("span");i.setAttribute("class","mdc-tab__text-label"),i.innerHTML=e,a.appendChild(i);let r=document.createElement("span");r.setAttribute("class","mdc-tab-indicator");let o=document.createElement("span");o.setAttribute("class","mdc-tab-indicator__content mdc-tab-indicator__content--underline"),r.appendChild(o);let s=document.createElement("span");return s.setAttribute("class","mdc-tab__ripple"),n.appendChild(a),n.appendChild(r),n.appendChild(s),n};var i=e=>{let t=document.createElement("div");t.setAttribute("class","mdc-tab-bar"),t.setAttribute("role","tablist");let n=document.createElement("div");n.setAttribute("class","mdc-tab-scroller");let i=document.createElement("div");i.setAttribute("class","mdc-tab-scroller__scroll-area");let r=document.createElement("div");r.setAttribute("class","mdc-tab-scroller__scroll-content");let o=a("hours",0),s=a("menus",1),c=a("manifesto",2),l=a("contact",3);r.appendChild(o),r.appendChild(s),r.appendChild(c),r.appendChild(l),i.appendChild(r),n.appendChild(i),t.appendChild(n),e.appendChild(t)};const r=e=>{document.querySelector("footer").style.color=e};var o=n.p+"4ee1a3581afca92767d2313bebc0cd6d.jpg";const s=e=>{let t=document.createElement("article");t.setAttribute("class","article"),e.appendChild(t)},c=(e,t,n)=>{const a=document.createElement("div");a.setAttribute("class","article-card");const i=document.createElement("h3"),r=document.createElement("pre");return i.innerHTML=e,r.innerHTML=t,i.style.color=n,a.appendChild(i),a.appendChild(r),a},l=(e,t)=>{let n=document.querySelector("article"),a=document.createElement("h3");a.innerHTML=" - "+e+" - ",a.style.color=t,n.appendChild(a)},d=["rgb(164,17,9)","rgb(143,0,102)","rgb(0,174,239)","rgb(218,194,0)"],p=e=>{if((e-=1)>=0&&e<=3)return d[e]};var u=e=>{let t=document.createElement("pre");t="                       Tuesday:\n           11:30 a.m. – 2:30 p.m.\n\n             Wed, Thurs, Fri, Sat:\n               11:30 a.m. – LATE\n\nHappy Hour: 2:30 p.m. – 4:30 p.m.";let n=c("- Hours -","                       Tuesday:\n           11:30 a.m. – 2:30 p.m.\n\n             Wed, Thurs, Fri, Sat:\n               11:30 a.m. – LATE\n\nHappy Hour: 2:30 p.m. – 4:30 p.m.",p(1));e.appendChild(n)};var f=e=>{let t=document.createElement("pre");t="       4930 Ross St.\nRed Deer, AB T4N 1X7\n\n            Phone:\n      403-392-3046\n            Email:\neat@tribeflatout.com\n";let n=c("- Address -","       4930 Ross St.\nRed Deer, AB T4N 1X7\n\n            Phone:\n      403-392-3046\n            Email:\neat@tribeflatout.com\n",p(1));e.appendChild(n)},m=n.p+"c22942bdf97c4435e373a1bad78bbf9a.jpg";const A=(e,t)=>{let n=document.querySelector(".menu-holder"),a=document.createElement("h2");a.innerHTML=e,n.appendChild(a);let i=document.createElement("p");i.innerHTML=t,n.appendChild(i)},h=(e,t,n,a=[])=>{let i=document.createElement("div");i.setAttribute("class","menu-item-div");let r=document.createElement("div");r.setAttribute("class","menu-item-title-div");let o=document.createElement("h2");o.innerHTML=e;let s=document.createElement("h3");s.innerHTML=t,r.appendChild(o),r.appendChild(s);let c=document.createElement("p");c.innerHTML=n,i.appendChild(r),i.appendChild(c);for(var l=0;l<a.length;l++){let e=document.createElement("p");e.innerHTML=a[l],i.appendChild(e)}return i};var g=e=>{L(m),A("Brunch","All brunch items come with one of the following: potatas max, 1/2 fresh tomato, rocket fruit salad.");const t=document.createElement("div");t.setAttribute("class","menu-div");let n=h("traditional benny flatbread","18","soft poached eggs, prosciutto, served with lemony house-made hollandaise."),a=h("bacon, eggg, and tomato flatbread","18","soft poached eggs, bacon and tomato served with lemony house-made hollandaise."),i=h("lox & cream cheese flatbread","18","soft poached eggs, bacon and tomato served with lemony house-made hollandaise.");t.appendChild(n),t.appendChild(a),t.appendChild(i),e.appendChild(t)},b=n.p+"b3af42022de0551a97aa916852e9e125.jpg";var y=e=>{L(b),A("Lunch","Yes, we are now open for lunch at 11:30a.m, Tuesday through Sunday");const t=document.createElement("div");t.setAttribute("class","lunch-menu-div");let n=document.createElement("h3");n.innerHTML="starters",t.appendChild(n);const a=document.createElement("div");a.setAttribute("class","lunch-menu-div");let i=document.createElement("h3");i.innerHTML="entrees",a.appendChild(i);const r=document.createElement("div");r.setAttribute("class","lunch-menu-div");let o=document.createElement("h3");o.innerHTML="flat plates",r.appendChild(o);let s=h("rocket salad","9","arugula, with ginger lemon dressing. topped with beet, dill infused pickled onions."),c=h("zuppa","7","chef alex and team knock it out of the park, with tribe's hand-crafted soup. Inspired by flavours from around the world."),l=h("lemon devilled eggs","9","tarragon cream cheese stuffed eggs, with shaved sharp cheese, on a bed of arugula, with ginger lemon dressing."),d=h("tribe salad","13","cantaloupe, cucumber, tomato, goat cheese, nuts, kalamata olives, lime, cilantro, red onion.",["add proscuitto $3"]),p=h("bread","4","freshly baked bread, accopanied with compound butter."),u=h("proscuitto salmon","18","prosciutto-wrapped salmon filet; oven-baked with garlic butter, and topped with warm sambuca tomato sauce."),f=h("banh mi monte cristo","16","gochujang chicken, prosciutto, swiss, carrots, strings, cilantro and candied peanut, strawberry preserve."),m=h("the burger","17","6 oz sous vide Alberta beef patty, rockets, tomato, confit garlic aioli, maitre d'hôtel butter, dill infused pickled onions."),g=h("crab and shrimp mac & cheese","24","panko crusted cheesey cavatappi, with crab and shrimp, and a side of arugula salad. topped with beet-pickled onion, and a slice of house-made buttered bread."),y=h("marrakesh","18","moroccan-spiced chicken, roasted garlic, turmeric yogurt, caramelized onion, goat cheese, green olive, roasted lemon, honey drizzle."),C=h("sprout","14","shreaded brussel sprouts, carmelized onion, goat cheese, drizzle of rich balsamic glaze."),v=h("snappy dresser","18","italian sausage, green pepper, mushroom, onion, mozzarella, tomato basil sauce."),E=h("salt lick","12","caramelized onion, tapenade, capers, mozzarella.",["add proscuitto $3"]),_=document.createElement("div");_.setAttribute("class","lunch-item-holder"),_.appendChild(s),_.appendChild(c),_.appendChild(l),_.appendChild(d),_.appendChild(p),t.appendChild(_);let x=document.createElement("div");x.setAttribute("class","lunch-item-holder"),x.appendChild(u),x.appendChild(f),x.appendChild(m),x.appendChild(g),a.appendChild(x);let T=document.createElement("div");T.setAttribute("class","lunch-item-holder"),T.appendChild(y),T.appendChild(C),T.appendChild(v),T.appendChild(E),r.appendChild(T),e.appendChild(t),e.appendChild(document.createElement("hr")),e.appendChild(a),e.appendChild(document.createElement("hr")),e.appendChild(r)},C=n.p+"1265b44e5aadc91f4ddc121c6a21bfd0.jpg";var v=e=>{L(C),A("Small Plates","Salads and small plates are easy to share. Enjoy one before a meal, or get 3-4 and share them for your meal. We are working hard to make the chef’s board the best collection of charcuterie, cheese, and goodies to nibble on, in the region. Help us propagate that rumour with your social media prowess and natural charm... You’ll be rewarded!");const t=document.createElement("div");t.setAttribute("class","menu-div");let n=h("chef's board","34","a fine collection of meats, cheeses, and other edible delights from the minds of our chefs. Serves 2-4"),a=h("une petite charcuterie","18","a smaller version of the chef’s board. Serves 1-2."),i=h("thumpers feast","18","a vegetarian version of the chef's board. Serves 1-2"),r=h("cast iron poutine","12","potatoes, cheese, bacon in a cast iron fry pan."),o=h("roasted tomatoes","12","roasted tomatoes, with fresh herbs and goat cheese. Served with our own, house-made ciabatta."),s=h("tribe salad","13","cantaloupe, cucumber, tomato, goat cheese, nuts, kalamata olives, lime, cilantro, red onion.",["add proscuitto $3"]),c=h("lemon devilled eggs","9","tarragon cream cheese stuffed eggs, with shaved sharp cheese, on a bed of arugula, with ginger lemon dressing."),l=h("spread and bread","12","the world's best spinach dip or Maximillion's hummus, served with Iranian flatbread, seasoned with Zatar spice."),d=h("eat your rocket, stuffed portabello","14","baked portabello, stuffed with cream cheese and herbs. Topped with Japanese bread crumbs, on a bed of arugula, with lemon ginger dressing... which we strongly encourage you to devour!"),p=h("rocket salad","9","arugula, with ginger lemon dressing. topped with beet, dill infused pickled onions.");t.appendChild(n),t.appendChild(a),t.appendChild(i),t.appendChild(r),t.appendChild(o),t.appendChild(s),t.appendChild(c),t.appendChild(l),t.appendChild(d),t.appendChild(p),e.appendChild(t)},E=n.p+"fdcaad41ccd75745fac099d97a84be0c.jpg";var _=e=>{L(E),A("Big Plates","So let’s talk mains; Not only are these dishes delicious, but they are also hardy. Our mains change every once in a while, but  we always use the finest ingredients we can source, favoring local & regional products wherever possible!");const t=document.createElement("div");t.setAttribute("class","menu-div");let n=h("gochujang chicken","22","korean-style chicken with coconut rice, topped with nori & sesame seed, served with kim chi slaw."),a=h("crab and shrimp mac & cheese","24","panko crusted cheesey cavatappi, with crab and shrimp, and a side of arugula salad. topped with beet-pickled onion, and a slice of house-made buttered bread."),i=h("ouzo mousaka","23","sultana raisin beef ragu, roasted eggplant, onion, tomato, bell pepper, garlic, potato, lemon, scented bechamel."),r=h("mussels","24","one pound of steamed mussels in spicy white wine sauce, served on a bed of wilted spinach with Tribe made rustic bread.");t.appendChild(n),t.appendChild(a),t.appendChild(i),t.appendChild(r),e.appendChild(t)},x=n.p+"e710f0b9d5b2eae9665bc5d65d33178b.jpg";var T=e=>{L(x),A("Flat Plates","The secret is in our flakey, house made crust. Atop it sits a flavorful array of mouthwatering toppings, baked to perfection.");const t=document.createElement("div");t.setAttribute("class","menu-div");let n=h("snappy dresser","18","italian sausage, green pepper, mushroom, onion, mozzarella, tomato basil sauce."),a=h("east coast mac","18","shrimp and crab mac and cheese, topped with even more cheese!"),i=h("sprout","14","shreaded brussel sprouts, carmelized onion, goat cheese, drizzle of rich balsamic glaze."),r=h("fungi and fromage","17","cremini and portobello mushrooms, smoked gouda and asagio."),o=h("rustico","12","mozzarella, arugula, basil, tomato basil sauce."),s=h("seoul serching","18","gochujang chicken, kimchi, mozza."),c=h("free love","18","proscuitto, goat cheese, salty nuts, pickled dill onions and fig jam."),l=h("marrakesh","18","moroccan-spiced chicken, roasted garlic, turmeric yogurt, caramelized onion, goat cheese, green olive, roasted lemon, honey drizzle."),d=h("salt lick","12","caramelized onion, tapenade, capers, mozzarella.",["add proscuitto $3"]),p=h("copenhagen","15","thinly sliced potato, smoked cheddar, proscuitto");t.appendChild(n),t.appendChild(a),t.appendChild(i),t.appendChild(r),t.appendChild(o),t.appendChild(s),t.appendChild(c),t.appendChild(l),t.appendChild(d),t.appendChild(p),e.appendChild(t)},w=n.p+"855f97b790cf5e7f8c30a14e0545fdf1.jpg";var $=e=>{L(w),A("Sweet Plates","At the end of an evening of fabulous story telling and love, we’ve got just the right amount of sweetness to top things off. Try a coffee and one of our house made desserts.");const t=document.createElement("div");t.setAttribute("class","menu-div");let n=h("mashed potato chocolate cake with penuche icing","9","seriously, a rich chocolate cake, with walnuts, and a brown sugar fudge icing."),a=h("cheddar shortbread with spiced apple","9","very traditional Scottish shortbread right off the Canada Corn Starch box with a very Tribe cheddar twist, served with spiced apple compote."),i=h("lemon jar","9","when life gives you lemons, tribe gives you lemon cheesecake... and berries"),r=h("tribe gelato","9","we make our gelato in house. ask about our featured flavours. each is paired with an accoutrement... something perfect."),o=h("ay caramba chocolate pot","9","mexican-spiced, rich, creamy, chocolate, with fire dust to warm your cockles.");t.appendChild(n),t.appendChild(a),t.appendChild(i),t.appendChild(r),t.appendChild(o),e.appendChild(t)},S=n.p+"fee9caf82c469bd3a5c60dbf7282dfda.jpg";var O=e=>{L(S),A("Coffee","Sit back, take a load off, sip on one of the classics.");const t=document.createElement("div");t.setAttribute("class","menu-div");let n=h("americano","3","basically coffee, espresso and water."),a=h("espresso","3","strong coffee, tiny cup."),i=h("latte","5","one long espresso shot, in a tall cup with steamed milk."),r=h("cappuccino","5","one long espresso shot, in a short cup with steamed milk and microfoam."),o=h("tea latte","5","tea, in a tall cup with steamed milk."),s=h("slow coffee","8","pour-over, slow coffe, fit for two."),c=h("caffee mocha","5","latte with chocolate");t.appendChild(n),t.appendChild(a),t.appendChild(i),t.appendChild(r),t.appendChild(o),t.appendChild(s),t.appendChild(c),e.appendChild(t)},I=n.p+"e1cdc652d362ea1675f5fe83e7e225c3.jpg";var R=e=>{L(I),A("Cocktails","Handcrafted cocktails, along with an everchanging local craft beer menu... but you will have to come in to check that out.");const t=document.createElement("div");t.setAttribute("class","menu-div");let n=h("::earth to cherry moon","(2oz)","top shelf bourbon, blackberry liqueur, ginger, lemon juice, bourbon soaked cherries, nutmeg."),a=h("::temporary gentleman","(2oz)","top shelf bourbon, simple syrop, cherry bitters, bourbon soaked cherries, orange twist."),i=h("::something pink","(2oz)","raspberry vodka, saint germain, aperol, lime, dash of pomegranate syrup."),r=h("::diry caesar","(2oz)","dill pickle vodka, walter's caesar concoction, lemon pepper, double pickles."),o=h("::two decade mai tai","(2oz)","amber rum, amaretto, orange liqueur, pineapple, orange and guava juice."),s=h("::hula thunder","(3oz)","almond liqueur, pineapple & coconut rum, blue curacao, cream."),c=h("::perfecto margarita","(2oz)","gold tequila, grand marnier, fresh lime juice, cinnamon syrup, on the rocks."),l=h("::prarie zombie","(3oz)","tequila, dark rum, blue orange liquer, muddled mint, guava juice, cayenne simple syrup, float of pomagranate liqueur."),d=h("::solar flair","(2oz)","aquavit, chartruese espiscopal, cayenne, basil."),p=h("::black raspberry margarita","(2oz)","tequila, chambord, giner syrup, fresh squeezed lime."),u=h("::bamboo float","(0oz)","two parts hydrogen, one part oxygen and bubbles, with a spear of kiln-dried bamboo, citrus wedge. - $1.50");t.appendChild(n),t.appendChild(a),t.appendChild(i),t.appendChild(r),t.appendChild(o),t.appendChild(s),t.appendChild(c),t.appendChild(l),t.appendChild(d),t.appendChild(p),t.appendChild(u),e.appendChild(t)};var N=e=>{let t=document.querySelector(".menus-article");document.querySelector(".menu-holder")&&t.removeChild(t.childNodes[0]),t.insertBefore(e,t.childNodes[0])};var k=e=>{const t=document.createElement("div");switch(t.setAttribute("class","menu-holder"),N(t),e){case"1":g(t);break;case"2":y(t);break;case"3":v(t);break;case"4":_(t);break;case"5":T(t);break;case"6":$(t);break;case"7":O(t);break;case"8":R(t)}};const F=(e,t,n,a)=>{const i=document.createElement("div");i.setAttribute("class","hero-image"),i.style.backgroundImage=`linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url(${t})`,i.style.borderBottom="3px solid "+a;const r=document.createElement("div");r.setAttribute("class","hero-text");const o=document.createElement("h1");o.innerHTML=e,r.appendChild(o),i.appendChild(r),n.appendChild(i)},L=e=>{document.querySelector(".hero-image").style.backgroundImage=`linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url(${e})`};var B=n.p+"467cf66c054826f9fa57d1f7d39bc01b.jpg";var D=e=>{let t=document.createElement("div");t.setAttribute("class","logo-div"),t.style.backgroundImage=`url(${B})`,e.appendChild(t)};var H=e=>{F("We are a contemporary restaurant with a mind to source local, seasonal, ingredients to create food inspired from around the world. Terry, Paul and Brandon are travellers and foodies. We love rich intense flavours, fresh products, and spice, yet… we understand that we live in Red Deer and people here also enjoy comfort food.",o,e,p(1)),s(e);let t=document.querySelector("article");t.setAttribute("class","hours-article"),f(t),u(t),D(e),r(p(1))},U=n.p+"0b36bc33a675dec074679ad6c8a15942.jpg";var q=e=>{F("MENUS",U,e,p(2)),s(e);let t=document.querySelector("article");t.setAttribute("class","menus-article"),(()=>{let e=document.querySelector(".hero-image"),t=document.createElement("div");t.setAttribute("class","select");let n=document.createElement("select");n.setAttribute("name","slct"),n.setAttribute("id","slct");let a=document.createElement("option");a.setAttribute("selected",""),a.setAttribute("disabled",""),a.innerHTML="Choose a menu";let i=document.createElement("option");i.setAttribute("value","1"),i.innerHTML="Brunch";let r=document.createElement("option");r.setAttribute("value","2"),r.innerHTML="Lunch";let o=document.createElement("option");o.setAttribute("value","3"),o.innerHTML="Small Plates";let s=document.createElement("option");s.setAttribute("value","4"),s.innerHTML="Big Plates";let c=document.createElement("option");c.setAttribute("value","5"),c.innerHTML="Flat Plates";let l=document.createElement("option");l.setAttribute("value","6"),l.innerHTML="Sweet Plates";let d=document.createElement("option");d.setAttribute("value","7"),d.innerHTML="Coffee";let p=document.createElement("option");p.setAttribute("value","8"),p.innerHTML="Cocktails",n.appendChild(a),n.appendChild(i),n.appendChild(r),n.appendChild(o),n.appendChild(s),n.appendChild(c),n.appendChild(l),n.appendChild(d),n.appendChild(p);for(var u=1;u<n.children.length;u++)n.children[u].addEventListener("click",e=>{k(e.target.value)});t.appendChild(n),e.appendChild(t)})(),D(t),r(p(2))},M=n.p+"9820168f784f9fca8a623b17bfe4261b.jpg";var W=e=>{let t=document.createElement("p"),n=document.createElement("p"),a=document.createElement("p"),i=document.createElement("p");t.innerHTML="A committed social group, comprising relations and adopted strangers. People connected by a shared interest, such as beer, shoes, knitting, fancy chickens, star trek, yoga, quidditch, cannabis, heirloom vegetables, bugs, bread-making, cats, world-wandering, glass-blowing, curling, canines…… You… are part of our tribe. One thing that’s common among humanity is our love of food, drink, and storytelling. Here at Tribe we imagine all people, regardless of culture, background, or life philosophy, coming together to enjoy craft beer and our internationally inspired menu.",n.innerHTML="Using locally-sourced ingredients whenever we can, our menu has been thoughtfully crafted by chefs that care about your culinary experience. Inspired by our ancestors from around the world, we invite you to enjoy our offerings, while celebrating one another, and our equally diverse and beautiful journeys.",a.innerHTML="We look forward to sharing our worlds with your worlds… in a sexy, sophisticated way. Romance isn’t just for lovers ‐ it’s to be shared with all of humanity!",i.innerHTML="Eat a little. Drink a little. Flirt a little. Tell your most awesome stories.",i.style.alignSelf="center",i.style.alignSelf="center",e.appendChild(t),e.appendChild(n),e.appendChild(a),e.appendChild(i)};var P=e=>{let t=document.createElement("p"),n=document.createElement("ul");const a=["Pretend it’s 1970; Cell phones don’t exist and we take our hats off inside.","Say one thing that turns you on about life.","Notice how sexy your server is, flirt a little.","Dream about a foreign country you’d like to visit.","Conjugate ‘tribe’ into an adverb and adjective, then use it in a clever sentence.","Take a moment to appreciate, embrace your tribe with a toast.","Be uninhibited for a few moments… in a kind way.","Use expressive language. If you must swear, the tribe charge is $20 a word if any one overhears."];t.innerHTML="Don't think of these as house rules, so much as strong suggestions as to how you might make your time here with us a thing of beauty.";for(var i=0;i<a.length;i++){let e=document.createElement("li");e.innerHTML=a[i],n.appendChild(e)}e.appendChild(t),e.appendChild(n)};var z=e=>{F("MANISFESTO",M,e,p(3)),s(e);let t=document.querySelector("article");t.setAttribute("class","manifesto-article"),l("About Us",p(3)),W(t),l("Agreement",p(3)),P(t),D(t),r(p(3))},G=n.p+"c6e94fab33ac9981beffbdca4000d01d.jpg";var j=e=>{let t=document.createElement("p"),n=document.createElement("p"),a=document.createElement("p");t.innerHTML="Tribe welcomes events, parties and celebrations.",n.innerHTML="We are happy to discuss booking the whole facility or part of it for your event.",a.innerHTML="Just give us a call to discuss rates, menus, and any special requirements you have.";let i=c("- Your Event -","",p(4));i.appendChild(t),i.appendChild(n),i.appendChild(a),e.appendChild(i)};n.p;var Y=e=>{let t="+1 403-392-3046",n="eat@tribeflatout.com",a=document.createElement("pre");a=`           To make a reservation by phone, call:\n                          ${t} <a href=tel:${t}><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="black" width="18px" height="18px"><path d="M0 0h24v24H0z" fill="none"/><path d="M20.01 15.38c-1.23 0-2.42-.2-3.53-.56-.35-.12-.74-.03-1.01.24l-1.57 1.97c-2.83-1.35-5.48-3.9-6.89-6.83l1.95-1.66c.27-.28.35-.67.24-1.02-.37-1.11-.56-2.3-.56-3.53 0-.54-.45-.99-.99-.99H4.19C3.65 3 3 3.24 3 3.99 3 13.28 10.73 21 20.01 21c.71 0 .99-.63.99-1.18v-3.45c0-.54-.45-.99-.99-.99z"/></svg></a>\n\n                      Or to reserve by email:\n                      eat@tribeflatout.com<a href=mailto:${n}><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="black" width="18px" height="18px"><path d="M0 0h24v24H0z" fill="none"/><path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/></svg></a>\nOr, just send us a message using the form below:`;let i=c("- Details -",a,p(4));e.appendChild(i)};const K=e=>{const t=document.createElement("div");t.setAttribute("class","input-group");const n=document.createElement("input");n.setAttribute("type","text"),n.setAttribute("name",e),n.setAttribute("class",`form-control ${e}-input`),n.setAttribute("required",!0);const a=document.createElement("label");return a.innerHTML=e,n.addEventListener("focusout",e=>{e.target.textLength>0?e.target.setAttribute("class","form-control has-value"):e.target.setAttribute("class","form-control")}),t.appendChild(n),t.appendChild(a),t};var V=()=>{let e=document.createElement("button");return e.innerHTML="Submit",e.setAttribute("type","submit"),e};var J=e=>{let t=document.createElement("form");t.setAttribute("class","contact-form"),t.setAttribute("action","https://formspree.io/xwkwpevn"),t.setAttribute("method","post");let n=document.createElement("h3");n.innerHTML="- Send Message -",n.style.color=p(4);let a=document.createElement("div");a.setAttribute("class","infoDiv");let i=K("name"),r=K("email");a.appendChild(i),a.appendChild(r);let o=(e=>{const t=document.createElement("div");t.setAttribute("class","input-group");const n=document.createElement("textarea");n.setAttribute("type","text"),n.setAttribute("name",e),n.setAttribute("class","form-control message-input"),n.setAttribute("required",!0);const a=document.createElement("label");return a.innerHTML=e,n.addEventListener("focusout",e=>{e.target.textLength>0?e.target.setAttribute("class","form-control has-value"):e.target.setAttribute("class","form-control")}),t.appendChild(n),t.appendChild(a),t})("message"),s=document.createElement("div");s.setAttribute("class","messageDiv"),s.appendChild(o);let c=V();t.appendChild(n),t.appendChild(a),t.appendChild(s),t.appendChild(c),e.appendChild(t)};var Q=e=>{let t=document.createElement("div");t.setAttribute("class","map-container");let n=document.createElement("div");n.setAttribute("class","map-display");let a=document.createElement("iframe");a.setAttribute("class","map-frame"),a.setAttribute("src","https://www.google.com/maps/embed/v1/search?q=tribe+red+deer&key=AIzaSyBFw0Qbyq9zTFTd-tUY6dZWTgaQzuU17R8"),n.appendChild(a),t.appendChild(n),e.appendChild(t)};var X=e=>{F("CONTACT",G,e,p(4)),s(e);let t=document.querySelector("article");t.setAttribute("class","contact-article"),j(t),Y(t),J(e),Q(e),D(e),r(p(4))},Z=function(e,t){return(Z=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */function ee(e,t){function n(){this.constructor=e}Z(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var te=function(){return(te=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};function ne(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,i,r=n.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)o.push(a.value)}catch(e){i={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(i)throw i.error}}return o}function ae(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(ne(arguments[t]));return e}
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var ie=function(){function e(e){void 0===e&&(e={}),this.adapter=e}return Object.defineProperty(e,"cssClasses",{get:function(){return{}},enumerable:!0,configurable:!0}),Object.defineProperty(e,"strings",{get:function(){return{}},enumerable:!0,configurable:!0}),Object.defineProperty(e,"numbers",{get:function(){return{}},enumerable:!0,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{}},enumerable:!0,configurable:!0}),e.prototype.init=function(){},e.prototype.destroy=function(){},e}(),re=function(){function e(e,t){for(var n=[],a=2;a<arguments.length;a++)n[a-2]=arguments[a];this.root=e,this.initialize.apply(this,ae(n)),this.foundation=void 0===t?this.getDefaultFoundation():t,this.foundation.init(),this.initialSyncWithDOM()}return e.attachTo=function(t){return new e(t,new ie({}))},e.prototype.initialize=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t]},e.prototype.getDefaultFoundation=function(){throw new Error("Subclasses must override getDefaultFoundation to return a properly configured foundation class")},e.prototype.initialSyncWithDOM=function(){},e.prototype.destroy=function(){this.foundation.destroy()},e.prototype.listen=function(e,t,n){this.root.addEventListener(e,t,n)},e.prototype.unlisten=function(e,t,n){this.root.removeEventListener(e,t,n)},e.prototype.emit=function(e,t,n){var a;void 0===n&&(n=!1),"function"==typeof CustomEvent?a=new CustomEvent(e,{bubbles:n,detail:t}):(a=document.createEvent("CustomEvent")).initCustomEvent(e,n,!1,t),this.root.dispatchEvent(a)},e}();
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
function oe(e){return void 0===e&&(e=window),!!function(e){void 0===e&&(e=window);var t=!1;try{var n={get passive(){return t=!0,!1}},a=function(){};e.document.addEventListener("test",a,n),e.document.removeEventListener("test",a,n)}catch(e){t=!1}return t}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */(e)&&{passive:!0}}function se(e,t){return(e.matches||e.webkitMatchesSelector||e.msMatchesSelector).call(e,t)}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var ce,le={ANIMATING:"mdc-tab-scroller--animating",SCROLL_AREA_SCROLL:"mdc-tab-scroller__scroll-area--scroll",SCROLL_TEST:"mdc-tab-scroller__test"},de={AREA_SELECTOR:".mdc-tab-scroller__scroll-area",CONTENT_SELECTOR:".mdc-tab-scroller__scroll-content"},pe=function(e){this.adapter=e},ue=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ee(t,e),t.prototype.getScrollPositionRTL=function(){var e=this.adapter.getScrollAreaScrollLeft(),t=this.calculateScrollEdges_().right;return Math.round(t-e)},t.prototype.scrollToRTL=function(e){var t=this.calculateScrollEdges_(),n=this.adapter.getScrollAreaScrollLeft(),a=this.clampScrollValue_(t.right-e);return{finalScrollPosition:a,scrollDelta:a-n}},t.prototype.incrementScrollRTL=function(e){var t=this.adapter.getScrollAreaScrollLeft(),n=this.clampScrollValue_(t-e);return{finalScrollPosition:n,scrollDelta:n-t}},t.prototype.getAnimatingScrollPosition=function(e){return e},t.prototype.calculateScrollEdges_=function(){return{left:0,right:this.adapter.getScrollContentOffsetWidth()-this.adapter.getScrollAreaOffsetWidth()}},t.prototype.clampScrollValue_=function(e){var t=this.calculateScrollEdges_();return Math.min(Math.max(t.left,e),t.right)},t}(pe),fe=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ee(t,e),t.prototype.getScrollPositionRTL=function(e){var t=this.adapter.getScrollAreaScrollLeft();return Math.round(e-t)},t.prototype.scrollToRTL=function(e){var t=this.adapter.getScrollAreaScrollLeft(),n=this.clampScrollValue_(-e);return{finalScrollPosition:n,scrollDelta:n-t}},t.prototype.incrementScrollRTL=function(e){var t=this.adapter.getScrollAreaScrollLeft(),n=this.clampScrollValue_(t-e);return{finalScrollPosition:n,scrollDelta:n-t}},t.prototype.getAnimatingScrollPosition=function(e,t){return e-t},t.prototype.calculateScrollEdges_=function(){var e=this.adapter.getScrollContentOffsetWidth();return{left:this.adapter.getScrollAreaOffsetWidth()-e,right:0}},t.prototype.clampScrollValue_=function(e){var t=this.calculateScrollEdges_();return Math.max(Math.min(t.right,e),t.left)},t}(pe),me=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ee(t,e),t.prototype.getScrollPositionRTL=function(e){var t=this.adapter.getScrollAreaScrollLeft();return Math.round(t-e)},t.prototype.scrollToRTL=function(e){var t=this.adapter.getScrollAreaScrollLeft(),n=this.clampScrollValue_(e);return{finalScrollPosition:n,scrollDelta:t-n}},t.prototype.incrementScrollRTL=function(e){var t=this.adapter.getScrollAreaScrollLeft(),n=this.clampScrollValue_(t+e);return{finalScrollPosition:n,scrollDelta:t-n}},t.prototype.getAnimatingScrollPosition=function(e,t){return e+t},t.prototype.calculateScrollEdges_=function(){return{left:this.adapter.getScrollContentOffsetWidth()-this.adapter.getScrollAreaOffsetWidth(),right:0}},t.prototype.clampScrollValue_=function(e){var t=this.calculateScrollEdges_();return Math.min(Math.max(t.right,e),t.left)},t}(pe),Ae=function(e){function t(n){var a=e.call(this,te(te({},t.defaultAdapter),n))||this;return a.isAnimating_=!1,a}return ee(t,e),Object.defineProperty(t,"cssClasses",{get:function(){return le},enumerable:!0,configurable:!0}),Object.defineProperty(t,"strings",{get:function(){return de},enumerable:!0,configurable:!0}),Object.defineProperty(t,"defaultAdapter",{get:function(){return{eventTargetMatchesSelector:function(){return!1},addClass:function(){},removeClass:function(){},addScrollAreaClass:function(){},setScrollAreaStyleProperty:function(){},setScrollContentStyleProperty:function(){},getScrollContentStyleValue:function(){return""},setScrollAreaScrollLeft:function(){},getScrollAreaScrollLeft:function(){return 0},getScrollContentOffsetWidth:function(){return 0},getScrollAreaOffsetWidth:function(){return 0},computeScrollAreaClientRect:function(){return{top:0,right:0,bottom:0,left:0,width:0,height:0}},computeScrollContentClientRect:function(){return{top:0,right:0,bottom:0,left:0,width:0,height:0}},computeHorizontalScrollbarHeight:function(){return 0}}},enumerable:!0,configurable:!0}),t.prototype.init=function(){var e=this.adapter.computeHorizontalScrollbarHeight();this.adapter.setScrollAreaStyleProperty("margin-bottom",-e+"px"),this.adapter.addScrollAreaClass(t.cssClasses.SCROLL_AREA_SCROLL)},t.prototype.getScrollPosition=function(){if(this.isRTL_())return this.computeCurrentScrollPositionRTL_();var e=this.calculateCurrentTranslateX_();return this.adapter.getScrollAreaScrollLeft()-e},t.prototype.handleInteraction=function(){this.isAnimating_&&this.stopScrollAnimation_()},t.prototype.handleTransitionEnd=function(e){var n=e.target;this.isAnimating_&&this.adapter.eventTargetMatchesSelector(n,t.strings.CONTENT_SELECTOR)&&(this.isAnimating_=!1,this.adapter.removeClass(t.cssClasses.ANIMATING))},t.prototype.incrementScroll=function(e){0!==e&&this.animate_(this.getIncrementScrollOperation_(e))},t.prototype.incrementScrollImmediate=function(e){if(0!==e){var t=this.getIncrementScrollOperation_(e);0!==t.scrollDelta&&(this.stopScrollAnimation_(),this.adapter.setScrollAreaScrollLeft(t.finalScrollPosition))}},t.prototype.scrollTo=function(e){if(this.isRTL_())return this.scrollToRTL_(e);this.scrollTo_(e)},t.prototype.getRTLScroller=function(){return this.rtlScrollerInstance_||(this.rtlScrollerInstance_=this.rtlScrollerFactory_()),this.rtlScrollerInstance_},t.prototype.calculateCurrentTranslateX_=function(){var e=this.adapter.getScrollContentStyleValue("transform");if("none"===e)return 0;var t=/\((.+?)\)/.exec(e);if(!t)return 0;var n=ne(t[1].split(","),6),a=(n[0],n[1],n[2],n[3],n[4]);n[5];return parseFloat(a)},t.prototype.clampScrollValue_=function(e){var t=this.calculateScrollEdges_();return Math.min(Math.max(t.left,e),t.right)},t.prototype.computeCurrentScrollPositionRTL_=function(){var e=this.calculateCurrentTranslateX_();return this.getRTLScroller().getScrollPositionRTL(e)},t.prototype.calculateScrollEdges_=function(){return{left:0,right:this.adapter.getScrollContentOffsetWidth()-this.adapter.getScrollAreaOffsetWidth()}},t.prototype.scrollTo_=function(e){var t=this.getScrollPosition(),n=this.clampScrollValue_(e),a=n-t;this.animate_({finalScrollPosition:n,scrollDelta:a})},t.prototype.scrollToRTL_=function(e){var t=this.getRTLScroller().scrollToRTL(e);this.animate_(t)},t.prototype.getIncrementScrollOperation_=function(e){if(this.isRTL_())return this.getRTLScroller().incrementScrollRTL(e);var t=this.getScrollPosition(),n=e+t,a=this.clampScrollValue_(n);return{finalScrollPosition:a,scrollDelta:a-t}},t.prototype.animate_=function(e){var n=this;0!==e.scrollDelta&&(this.stopScrollAnimation_(),this.adapter.setScrollAreaScrollLeft(e.finalScrollPosition),this.adapter.setScrollContentStyleProperty("transform","translateX("+e.scrollDelta+"px)"),this.adapter.computeScrollAreaClientRect(),requestAnimationFrame((function(){n.adapter.addClass(t.cssClasses.ANIMATING),n.adapter.setScrollContentStyleProperty("transform","none")})),this.isAnimating_=!0)},t.prototype.stopScrollAnimation_=function(){this.isAnimating_=!1;var e=this.getAnimatingScrollPosition_();this.adapter.removeClass(t.cssClasses.ANIMATING),this.adapter.setScrollContentStyleProperty("transform","translateX(0px)"),this.adapter.setScrollAreaScrollLeft(e)},t.prototype.getAnimatingScrollPosition_=function(){var e=this.calculateCurrentTranslateX_(),t=this.adapter.getScrollAreaScrollLeft();return this.isRTL_()?this.getRTLScroller().getAnimatingScrollPosition(t,e):t-e},t.prototype.rtlScrollerFactory_=function(){var e=this.adapter.getScrollAreaScrollLeft();this.adapter.setScrollAreaScrollLeft(e-1);var t=this.adapter.getScrollAreaScrollLeft();if(t<0)return this.adapter.setScrollAreaScrollLeft(e),new fe(this.adapter);var n=this.adapter.computeScrollAreaClientRect(),a=this.adapter.computeScrollContentClientRect(),i=Math.round(a.right-n.right);return this.adapter.setScrollAreaScrollLeft(e),i===t?new me(this.adapter):new ue(this.adapter)},t.prototype.isRTL_=function(){return"rtl"===this.adapter.getScrollContentStyleValue("direction")},t}(ie);
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var he,ge=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ee(t,e),t.attachTo=function(e){return new t(e)},t.prototype.initialize=function(){this.area_=this.root.querySelector(Ae.strings.AREA_SELECTOR),this.content_=this.root.querySelector(Ae.strings.CONTENT_SELECTOR)},t.prototype.initialSyncWithDOM=function(){var e=this;this.handleInteraction_=function(){return e.foundation.handleInteraction()},this.handleTransitionEnd_=function(t){return e.foundation.handleTransitionEnd(t)},this.area_.addEventListener("wheel",this.handleInteraction_,oe()),this.area_.addEventListener("touchstart",this.handleInteraction_,oe()),this.area_.addEventListener("pointerdown",this.handleInteraction_,oe()),this.area_.addEventListener("mousedown",this.handleInteraction_,oe()),this.area_.addEventListener("keydown",this.handleInteraction_,oe()),this.content_.addEventListener("transitionend",this.handleTransitionEnd_)},t.prototype.destroy=function(){e.prototype.destroy.call(this),this.area_.removeEventListener("wheel",this.handleInteraction_,oe()),this.area_.removeEventListener("touchstart",this.handleInteraction_,oe()),this.area_.removeEventListener("pointerdown",this.handleInteraction_,oe()),this.area_.removeEventListener("mousedown",this.handleInteraction_,oe()),this.area_.removeEventListener("keydown",this.handleInteraction_,oe()),this.content_.removeEventListener("transitionend",this.handleTransitionEnd_)},t.prototype.getDefaultFoundation=function(){var e=this;return new Ae({eventTargetMatchesSelector:function(e,t){return se(e,t)},addClass:function(t){return e.root.classList.add(t)},removeClass:function(t){return e.root.classList.remove(t)},addScrollAreaClass:function(t){return e.area_.classList.add(t)},setScrollAreaStyleProperty:function(t,n){return e.area_.style.setProperty(t,n)},setScrollContentStyleProperty:function(t,n){return e.content_.style.setProperty(t,n)},getScrollContentStyleValue:function(t){return window.getComputedStyle(e.content_).getPropertyValue(t)},setScrollAreaScrollLeft:function(t){return e.area_.scrollLeft=t},getScrollAreaScrollLeft:function(){return e.area_.scrollLeft},getScrollContentOffsetWidth:function(){return e.content_.offsetWidth},getScrollAreaOffsetWidth:function(){return e.area_.offsetWidth},computeScrollAreaClientRect:function(){return e.area_.getBoundingClientRect()},computeScrollContentClientRect:function(){return e.content_.getBoundingClientRect()},computeHorizontalScrollbarHeight:function(){return function(e,t){if(void 0===t&&(t=!0),t&&void 0!==ce)return ce;var n=e.createElement("div");n.classList.add(le.SCROLL_TEST),e.body.appendChild(n);var a=n.offsetHeight-n.clientHeight;return e.body.removeChild(n),t&&(ce=a),a}(document)}})},t.prototype.getScrollPosition=function(){return this.foundation.getScrollPosition()},t.prototype.getScrollContentWidth=function(){return this.content_.offsetWidth},t.prototype.incrementScroll=function(e){this.foundation.incrementScroll(e)},t.prototype.scrollTo=function(e){this.foundation.scrollTo(e)},t}(re),be={BG_FOCUSED:"mdc-ripple-upgraded--background-focused",FG_ACTIVATION:"mdc-ripple-upgraded--foreground-activation",FG_DEACTIVATION:"mdc-ripple-upgraded--foreground-deactivation",ROOT:"mdc-ripple-upgraded",UNBOUNDED:"mdc-ripple-upgraded--unbounded"},ye={VAR_FG_SCALE:"--mdc-ripple-fg-scale",VAR_FG_SIZE:"--mdc-ripple-fg-size",VAR_FG_TRANSLATE_END:"--mdc-ripple-fg-translate-end",VAR_FG_TRANSLATE_START:"--mdc-ripple-fg-translate-start",VAR_LEFT:"--mdc-ripple-left",VAR_TOP:"--mdc-ripple-top"},Ce={DEACTIVATION_TIMEOUT_MS:225,FG_DEACTIVATION_MS:150,INITIAL_ORIGIN_SCALE:.6,PADDING:10,TAP_DELAY_MS:300};
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var ve=["touchstart","pointerdown","mousedown","keydown"],Ee=["touchend","pointerup","mouseup","contextmenu"],_e=[],xe=function(e){function t(n){var a=e.call(this,te(te({},t.defaultAdapter),n))||this;return a.activationAnimationHasEnded_=!1,a.activationTimer_=0,a.fgDeactivationRemovalTimer_=0,a.fgScale_="0",a.frame_={width:0,height:0},a.initialSize_=0,a.layoutFrame_=0,a.maxRadius_=0,a.unboundedCoords_={left:0,top:0},a.activationState_=a.defaultActivationState_(),a.activationTimerCallback_=function(){a.activationAnimationHasEnded_=!0,a.runDeactivationUXLogicIfReady_()},a.activateHandler_=function(e){return a.activate_(e)},a.deactivateHandler_=function(){return a.deactivate_()},a.focusHandler_=function(){return a.handleFocus()},a.blurHandler_=function(){return a.handleBlur()},a.resizeHandler_=function(){return a.layout()},a}return ee(t,e),Object.defineProperty(t,"cssClasses",{get:function(){return be},enumerable:!0,configurable:!0}),Object.defineProperty(t,"strings",{get:function(){return ye},enumerable:!0,configurable:!0}),Object.defineProperty(t,"numbers",{get:function(){return Ce},enumerable:!0,configurable:!0}),Object.defineProperty(t,"defaultAdapter",{get:function(){return{addClass:function(){},browserSupportsCssVars:function(){return!0},computeBoundingRect:function(){return{top:0,right:0,bottom:0,left:0,width:0,height:0}},containsEventTarget:function(){return!0},deregisterDocumentInteractionHandler:function(){},deregisterInteractionHandler:function(){},deregisterResizeHandler:function(){},getWindowPageOffset:function(){return{x:0,y:0}},isSurfaceActive:function(){return!0},isSurfaceDisabled:function(){return!0},isUnbounded:function(){return!0},registerDocumentInteractionHandler:function(){},registerInteractionHandler:function(){},registerResizeHandler:function(){},removeClass:function(){},updateCssVariable:function(){}}},enumerable:!0,configurable:!0}),t.prototype.init=function(){var e=this,n=this.supportsPressRipple_();if(this.registerRootHandlers_(n),n){var a=t.cssClasses,i=a.ROOT,r=a.UNBOUNDED;requestAnimationFrame((function(){e.adapter.addClass(i),e.adapter.isUnbounded()&&(e.adapter.addClass(r),e.layoutInternal_())}))}},t.prototype.destroy=function(){var e=this;if(this.supportsPressRipple_()){this.activationTimer_&&(clearTimeout(this.activationTimer_),this.activationTimer_=0,this.adapter.removeClass(t.cssClasses.FG_ACTIVATION)),this.fgDeactivationRemovalTimer_&&(clearTimeout(this.fgDeactivationRemovalTimer_),this.fgDeactivationRemovalTimer_=0,this.adapter.removeClass(t.cssClasses.FG_DEACTIVATION));var n=t.cssClasses,a=n.ROOT,i=n.UNBOUNDED;requestAnimationFrame((function(){e.adapter.removeClass(a),e.adapter.removeClass(i),e.removeCssVars_()}))}this.deregisterRootHandlers_(),this.deregisterDeactivationHandlers_()},t.prototype.activate=function(e){this.activate_(e)},t.prototype.deactivate=function(){this.deactivate_()},t.prototype.layout=function(){var e=this;this.layoutFrame_&&cancelAnimationFrame(this.layoutFrame_),this.layoutFrame_=requestAnimationFrame((function(){e.layoutInternal_(),e.layoutFrame_=0}))},t.prototype.setUnbounded=function(e){var n=t.cssClasses.UNBOUNDED;e?this.adapter.addClass(n):this.adapter.removeClass(n)},t.prototype.handleFocus=function(){var e=this;requestAnimationFrame((function(){return e.adapter.addClass(t.cssClasses.BG_FOCUSED)}))},t.prototype.handleBlur=function(){var e=this;requestAnimationFrame((function(){return e.adapter.removeClass(t.cssClasses.BG_FOCUSED)}))},t.prototype.supportsPressRipple_=function(){return this.adapter.browserSupportsCssVars()},t.prototype.defaultActivationState_=function(){return{activationEvent:void 0,hasDeactivationUXRun:!1,isActivated:!1,isProgrammatic:!1,wasActivatedByPointer:!1,wasElementMadeActive:!1}},t.prototype.registerRootHandlers_=function(e){var t=this;e&&(ve.forEach((function(e){t.adapter.registerInteractionHandler(e,t.activateHandler_)})),this.adapter.isUnbounded()&&this.adapter.registerResizeHandler(this.resizeHandler_)),this.adapter.registerInteractionHandler("focus",this.focusHandler_),this.adapter.registerInteractionHandler("blur",this.blurHandler_)},t.prototype.registerDeactivationHandlers_=function(e){var t=this;"keydown"===e.type?this.adapter.registerInteractionHandler("keyup",this.deactivateHandler_):Ee.forEach((function(e){t.adapter.registerDocumentInteractionHandler(e,t.deactivateHandler_)}))},t.prototype.deregisterRootHandlers_=function(){var e=this;ve.forEach((function(t){e.adapter.deregisterInteractionHandler(t,e.activateHandler_)})),this.adapter.deregisterInteractionHandler("focus",this.focusHandler_),this.adapter.deregisterInteractionHandler("blur",this.blurHandler_),this.adapter.isUnbounded()&&this.adapter.deregisterResizeHandler(this.resizeHandler_)},t.prototype.deregisterDeactivationHandlers_=function(){var e=this;this.adapter.deregisterInteractionHandler("keyup",this.deactivateHandler_),Ee.forEach((function(t){e.adapter.deregisterDocumentInteractionHandler(t,e.deactivateHandler_)}))},t.prototype.removeCssVars_=function(){var e=this,n=t.strings;Object.keys(n).forEach((function(t){0===t.indexOf("VAR_")&&e.adapter.updateCssVariable(n[t],null)}))},t.prototype.activate_=function(e){var t=this;if(!this.adapter.isSurfaceDisabled()){var n=this.activationState_;if(!n.isActivated){var a=this.previousActivationEvent_;if(!(a&&void 0!==e&&a.type!==e.type))n.isActivated=!0,n.isProgrammatic=void 0===e,n.activationEvent=e,n.wasActivatedByPointer=!n.isProgrammatic&&(void 0!==e&&("mousedown"===e.type||"touchstart"===e.type||"pointerdown"===e.type)),void 0!==e&&_e.length>0&&_e.some((function(e){return t.adapter.containsEventTarget(e)}))?this.resetActivationState_():(void 0!==e&&(_e.push(e.target),this.registerDeactivationHandlers_(e)),n.wasElementMadeActive=this.checkElementMadeActive_(e),n.wasElementMadeActive&&this.animateActivation_(),requestAnimationFrame((function(){_e=[],n.wasElementMadeActive||void 0===e||" "!==e.key&&32!==e.keyCode||(n.wasElementMadeActive=t.checkElementMadeActive_(e),n.wasElementMadeActive&&t.animateActivation_()),n.wasElementMadeActive||(t.activationState_=t.defaultActivationState_())})))}}},t.prototype.checkElementMadeActive_=function(e){return void 0===e||"keydown"!==e.type||this.adapter.isSurfaceActive()},t.prototype.animateActivation_=function(){var e=this,n=t.strings,a=n.VAR_FG_TRANSLATE_START,i=n.VAR_FG_TRANSLATE_END,r=t.cssClasses,o=r.FG_DEACTIVATION,s=r.FG_ACTIVATION,c=t.numbers.DEACTIVATION_TIMEOUT_MS;this.layoutInternal_();var l="",d="";if(!this.adapter.isUnbounded()){var p=this.getFgTranslationCoordinates_(),u=p.startPoint,f=p.endPoint;l=u.x+"px, "+u.y+"px",d=f.x+"px, "+f.y+"px"}this.adapter.updateCssVariable(a,l),this.adapter.updateCssVariable(i,d),clearTimeout(this.activationTimer_),clearTimeout(this.fgDeactivationRemovalTimer_),this.rmBoundedActivationClasses_(),this.adapter.removeClass(o),this.adapter.computeBoundingRect(),this.adapter.addClass(s),this.activationTimer_=setTimeout((function(){return e.activationTimerCallback_()}),c)},t.prototype.getFgTranslationCoordinates_=function(){var e,t=this.activationState_,n=t.activationEvent;return{startPoint:e={x:(e=t.wasActivatedByPointer?function(e,t,n){if(!e)return{x:0,y:0};var a,i,r=t.x,o=t.y,s=r+n.left,c=o+n.top;if("touchstart"===e.type){var l=e;a=l.changedTouches[0].pageX-s,i=l.changedTouches[0].pageY-c}else{var d=e;a=d.pageX-s,i=d.pageY-c}return{x:a,y:i}}(n,this.adapter.getWindowPageOffset(),this.adapter.computeBoundingRect()):{x:this.frame_.width/2,y:this.frame_.height/2}).x-this.initialSize_/2,y:e.y-this.initialSize_/2},endPoint:{x:this.frame_.width/2-this.initialSize_/2,y:this.frame_.height/2-this.initialSize_/2}}},t.prototype.runDeactivationUXLogicIfReady_=function(){var e=this,n=t.cssClasses.FG_DEACTIVATION,a=this.activationState_,i=a.hasDeactivationUXRun,r=a.isActivated;(i||!r)&&this.activationAnimationHasEnded_&&(this.rmBoundedActivationClasses_(),this.adapter.addClass(n),this.fgDeactivationRemovalTimer_=setTimeout((function(){e.adapter.removeClass(n)}),Ce.FG_DEACTIVATION_MS))},t.prototype.rmBoundedActivationClasses_=function(){var e=t.cssClasses.FG_ACTIVATION;this.adapter.removeClass(e),this.activationAnimationHasEnded_=!1,this.adapter.computeBoundingRect()},t.prototype.resetActivationState_=function(){var e=this;this.previousActivationEvent_=this.activationState_.activationEvent,this.activationState_=this.defaultActivationState_(),setTimeout((function(){return e.previousActivationEvent_=void 0}),t.numbers.TAP_DELAY_MS)},t.prototype.deactivate_=function(){var e=this,t=this.activationState_;if(t.isActivated){var n=te({},t);t.isProgrammatic?(requestAnimationFrame((function(){return e.animateDeactivation_(n)})),this.resetActivationState_()):(this.deregisterDeactivationHandlers_(),requestAnimationFrame((function(){e.activationState_.hasDeactivationUXRun=!0,e.animateDeactivation_(n),e.resetActivationState_()})))}},t.prototype.animateDeactivation_=function(e){var t=e.wasActivatedByPointer,n=e.wasElementMadeActive;(t||n)&&this.runDeactivationUXLogicIfReady_()},t.prototype.layoutInternal_=function(){var e=this;this.frame_=this.adapter.computeBoundingRect();var n=Math.max(this.frame_.height,this.frame_.width);this.maxRadius_=this.adapter.isUnbounded()?n:Math.sqrt(Math.pow(e.frame_.width,2)+Math.pow(e.frame_.height,2))+t.numbers.PADDING;var a=Math.floor(n*t.numbers.INITIAL_ORIGIN_SCALE);this.adapter.isUnbounded()&&a%2!=0?this.initialSize_=a-1:this.initialSize_=a,this.fgScale_=""+this.maxRadius_/this.initialSize_,this.updateLayoutCssVars_()},t.prototype.updateLayoutCssVars_=function(){var e=t.strings,n=e.VAR_FG_SIZE,a=e.VAR_LEFT,i=e.VAR_TOP,r=e.VAR_FG_SCALE;this.adapter.updateCssVariable(n,this.initialSize_+"px"),this.adapter.updateCssVariable(r,this.fgScale_),this.adapter.isUnbounded()&&(this.unboundedCoords_={left:Math.round(this.frame_.width/2-this.initialSize_/2),top:Math.round(this.frame_.height/2-this.initialSize_/2)},this.adapter.updateCssVariable(a,this.unboundedCoords_.left+"px"),this.adapter.updateCssVariable(i,this.unboundedCoords_.top+"px"))},t}(ie),Te=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.disabled=!1,t}return ee(t,e),t.attachTo=function(e,n){void 0===n&&(n={isUnbounded:void 0});var a=new t(e);return void 0!==n.isUnbounded&&(a.unbounded=n.isUnbounded),a},t.createAdapter=function(e){return{addClass:function(t){return e.root.classList.add(t)},browserSupportsCssVars:function(){return function(e,t){void 0===t&&(t=!1);var n,a=e.CSS;if("boolean"==typeof he&&!t)return he;if(!(a&&"function"==typeof a.supports))return!1;var i=a.supports("--css-vars","yes"),r=a.supports("(--css-vars: yes)")&&a.supports("color","#00000000");return n=i||r,t||(he=n),n}(window)},computeBoundingRect:function(){return e.root.getBoundingClientRect()},containsEventTarget:function(t){return e.root.contains(t)},deregisterDocumentInteractionHandler:function(e,t){return document.documentElement.removeEventListener(e,t,oe())},deregisterInteractionHandler:function(t,n){return e.root.removeEventListener(t,n,oe())},deregisterResizeHandler:function(e){return window.removeEventListener("resize",e)},getWindowPageOffset:function(){return{x:window.pageXOffset,y:window.pageYOffset}},isSurfaceActive:function(){return se(e.root,":active")},isSurfaceDisabled:function(){return Boolean(e.disabled)},isUnbounded:function(){return Boolean(e.unbounded)},registerDocumentInteractionHandler:function(e,t){return document.documentElement.addEventListener(e,t,oe())},registerInteractionHandler:function(t,n){return e.root.addEventListener(t,n,oe())},registerResizeHandler:function(e){return window.addEventListener("resize",e)},removeClass:function(t){return e.root.classList.remove(t)},updateCssVariable:function(t,n){return e.root.style.setProperty(t,n)}}},Object.defineProperty(t.prototype,"unbounded",{get:function(){return Boolean(this.unbounded_)},set:function(e){this.unbounded_=Boolean(e),this.setUnbounded_()},enumerable:!0,configurable:!0}),t.prototype.activate=function(){this.foundation.activate()},t.prototype.deactivate=function(){this.foundation.deactivate()},t.prototype.layout=function(){this.foundation.layout()},t.prototype.getDefaultFoundation=function(){return new xe(t.createAdapter(this))},t.prototype.initialSyncWithDOM=function(){var e=this.root;this.unbounded="mdcRippleIsUnbounded"in e.dataset},t.prototype.setUnbounded_=function(){this.foundation.setUnbounded(Boolean(this.unbounded_))},t}(re),we={ACTIVE:"mdc-tab-indicator--active",FADE:"mdc-tab-indicator--fade",NO_TRANSITION:"mdc-tab-indicator--no-transition"},$e={CONTENT_SELECTOR:".mdc-tab-indicator__content"},Se=function(e){function t(n){return e.call(this,te(te({},t.defaultAdapter),n))||this}return ee(t,e),Object.defineProperty(t,"cssClasses",{get:function(){return we},enumerable:!0,configurable:!0}),Object.defineProperty(t,"strings",{get:function(){return $e},enumerable:!0,configurable:!0}),Object.defineProperty(t,"defaultAdapter",{get:function(){return{addClass:function(){},removeClass:function(){},computeContentClientRect:function(){return{top:0,right:0,bottom:0,left:0,width:0,height:0}},setContentStyleProperty:function(){}}},enumerable:!0,configurable:!0}),t.prototype.computeContentClientRect=function(){return this.adapter.computeContentClientRect()},t}(ie),Oe=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ee(t,e),t.prototype.activate=function(){this.adapter.addClass(Se.cssClasses.ACTIVE)},t.prototype.deactivate=function(){this.adapter.removeClass(Se.cssClasses.ACTIVE)},t}(Se),Ie=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ee(t,e),t.prototype.activate=function(e){if(e){var t=this.computeContentClientRect(),n=e.width/t.width,a=e.left-t.left;this.adapter.addClass(Se.cssClasses.NO_TRANSITION),this.adapter.setContentStyleProperty("transform","translateX("+a+"px) scaleX("+n+")"),this.computeContentClientRect(),this.adapter.removeClass(Se.cssClasses.NO_TRANSITION),this.adapter.addClass(Se.cssClasses.ACTIVE),this.adapter.setContentStyleProperty("transform","")}else this.adapter.addClass(Se.cssClasses.ACTIVE)},t.prototype.deactivate=function(){this.adapter.removeClass(Se.cssClasses.ACTIVE)},t}(Se),Re=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ee(t,e),t.attachTo=function(e){return new t(e)},t.prototype.initialize=function(){this.content_=this.root.querySelector(Se.strings.CONTENT_SELECTOR)},t.prototype.computeContentClientRect=function(){return this.foundation.computeContentClientRect()},t.prototype.getDefaultFoundation=function(){var e=this,t={addClass:function(t){return e.root.classList.add(t)},removeClass:function(t){return e.root.classList.remove(t)},computeContentClientRect:function(){return e.content_.getBoundingClientRect()},setContentStyleProperty:function(t,n){return e.content_.style.setProperty(t,n)}};return this.root.classList.contains(Se.cssClasses.FADE)?new Oe(t):new Ie(t)},t.prototype.activate=function(e){this.foundation.activate(e)},t.prototype.deactivate=function(){this.foundation.deactivate()},t}(re),Ne={ACTIVE:"mdc-tab--active"},ke={ARIA_SELECTED:"aria-selected",CONTENT_SELECTOR:".mdc-tab__content",INTERACTED_EVENT:"MDCTab:interacted",RIPPLE_SELECTOR:".mdc-tab__ripple",TABINDEX:"tabIndex",TAB_INDICATOR_SELECTOR:".mdc-tab-indicator"},Fe=function(e){function t(n){var a=e.call(this,te(te({},t.defaultAdapter),n))||this;return a.focusOnActivate_=!0,a}return ee(t,e),Object.defineProperty(t,"cssClasses",{get:function(){return Ne},enumerable:!0,configurable:!0}),Object.defineProperty(t,"strings",{get:function(){return ke},enumerable:!0,configurable:!0}),Object.defineProperty(t,"defaultAdapter",{get:function(){return{addClass:function(){},removeClass:function(){},hasClass:function(){return!1},setAttr:function(){},activateIndicator:function(){},deactivateIndicator:function(){},notifyInteracted:function(){},getOffsetLeft:function(){return 0},getOffsetWidth:function(){return 0},getContentOffsetLeft:function(){return 0},getContentOffsetWidth:function(){return 0},focus:function(){}}},enumerable:!0,configurable:!0}),t.prototype.handleClick=function(){this.adapter.notifyInteracted()},t.prototype.isActive=function(){return this.adapter.hasClass(Ne.ACTIVE)},t.prototype.setFocusOnActivate=function(e){this.focusOnActivate_=e},t.prototype.activate=function(e){this.adapter.addClass(Ne.ACTIVE),this.adapter.setAttr(ke.ARIA_SELECTED,"true"),this.adapter.setAttr(ke.TABINDEX,"0"),this.adapter.activateIndicator(e),this.focusOnActivate_&&this.adapter.focus()},t.prototype.deactivate=function(){this.isActive()&&(this.adapter.removeClass(Ne.ACTIVE),this.adapter.setAttr(ke.ARIA_SELECTED,"false"),this.adapter.setAttr(ke.TABINDEX,"-1"),this.adapter.deactivateIndicator())},t.prototype.computeDimensions=function(){var e=this.adapter.getOffsetWidth(),t=this.adapter.getOffsetLeft(),n=this.adapter.getContentOffsetWidth(),a=this.adapter.getContentOffsetLeft();return{contentLeft:t+a,contentRight:t+a+n,rootLeft:t,rootRight:t+e}},t}(ie),Le=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ee(t,e),t.attachTo=function(e){return new t(e)},t.prototype.initialize=function(e,t){void 0===e&&(e=function(e,t){return new Te(e,t)}),void 0===t&&(t=function(e){return new Re(e)}),this.id=this.root.id;var n=this.root.querySelector(Fe.strings.RIPPLE_SELECTOR),a=te(te({},Te.createAdapter(this)),{addClass:function(e){return n.classList.add(e)},removeClass:function(e){return n.classList.remove(e)},updateCssVariable:function(e,t){return n.style.setProperty(e,t)}}),i=new xe(a);this.ripple_=e(this.root,i);var r=this.root.querySelector(Fe.strings.TAB_INDICATOR_SELECTOR);this.tabIndicator_=t(r),this.content_=this.root.querySelector(Fe.strings.CONTENT_SELECTOR)},t.prototype.initialSyncWithDOM=function(){var e=this;this.handleClick_=function(){return e.foundation.handleClick()},this.listen("click",this.handleClick_)},t.prototype.destroy=function(){this.unlisten("click",this.handleClick_),this.ripple_.destroy(),e.prototype.destroy.call(this)},t.prototype.getDefaultFoundation=function(){var e=this;return new Fe({setAttr:function(t,n){return e.root.setAttribute(t,n)},addClass:function(t){return e.root.classList.add(t)},removeClass:function(t){return e.root.classList.remove(t)},hasClass:function(t){return e.root.classList.contains(t)},activateIndicator:function(t){return e.tabIndicator_.activate(t)},deactivateIndicator:function(){return e.tabIndicator_.deactivate()},notifyInteracted:function(){return e.emit(Fe.strings.INTERACTED_EVENT,{tabId:e.id},!0)},getOffsetLeft:function(){return e.root.offsetLeft},getOffsetWidth:function(){return e.root.offsetWidth},getContentOffsetLeft:function(){return e.content_.offsetLeft},getContentOffsetWidth:function(){return e.content_.offsetWidth},focus:function(){return e.root.focus()}})},Object.defineProperty(t.prototype,"active",{get:function(){return this.foundation.isActive()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"focusOnActivate",{set:function(e){this.foundation.setFocusOnActivate(e)},enumerable:!0,configurable:!0}),t.prototype.activate=function(e){this.foundation.activate(e)},t.prototype.deactivate=function(){this.foundation.deactivate()},t.prototype.computeIndicatorClientRect=function(){return this.tabIndicator_.computeContentClientRect()},t.prototype.computeDimensions=function(){return this.foundation.computeDimensions()},t.prototype.focus=function(){this.root.focus()},t}(re),Be={ARROW_LEFT_KEY:"ArrowLeft",ARROW_RIGHT_KEY:"ArrowRight",END_KEY:"End",ENTER_KEY:"Enter",HOME_KEY:"Home",SPACE_KEY:"Space",TAB_ACTIVATED_EVENT:"MDCTabBar:activated",TAB_SCROLLER_SELECTOR:".mdc-tab-scroller",TAB_SELECTOR:".mdc-tab"},De={ARROW_LEFT_KEYCODE:37,ARROW_RIGHT_KEYCODE:39,END_KEYCODE:35,ENTER_KEYCODE:13,EXTRA_SCROLL_AMOUNT:20,HOME_KEYCODE:36,SPACE_KEYCODE:32},He=new Set;He.add(Be.ARROW_LEFT_KEY),He.add(Be.ARROW_RIGHT_KEY),He.add(Be.END_KEY),He.add(Be.HOME_KEY),He.add(Be.ENTER_KEY),He.add(Be.SPACE_KEY);var Ue=new Map;Ue.set(De.ARROW_LEFT_KEYCODE,Be.ARROW_LEFT_KEY),Ue.set(De.ARROW_RIGHT_KEYCODE,Be.ARROW_RIGHT_KEY),Ue.set(De.END_KEYCODE,Be.END_KEY),Ue.set(De.HOME_KEYCODE,Be.HOME_KEY),Ue.set(De.ENTER_KEYCODE,Be.ENTER_KEY),Ue.set(De.SPACE_KEYCODE,Be.SPACE_KEY);var qe=function(e){function t(n){var a=e.call(this,te(te({},t.defaultAdapter),n))||this;return a.useAutomaticActivation_=!1,a}return ee(t,e),Object.defineProperty(t,"strings",{get:function(){return Be},enumerable:!0,configurable:!0}),Object.defineProperty(t,"numbers",{get:function(){return De},enumerable:!0,configurable:!0}),Object.defineProperty(t,"defaultAdapter",{get:function(){return{scrollTo:function(){},incrementScroll:function(){},getScrollPosition:function(){return 0},getScrollContentWidth:function(){return 0},getOffsetWidth:function(){return 0},isRTL:function(){return!1},setActiveTab:function(){},activateTabAtIndex:function(){},deactivateTabAtIndex:function(){},focusTabAtIndex:function(){},getTabIndicatorClientRectAtIndex:function(){return{top:0,right:0,bottom:0,left:0,width:0,height:0}},getTabDimensionsAtIndex:function(){return{rootLeft:0,rootRight:0,contentLeft:0,contentRight:0}},getPreviousActiveTabIndex:function(){return-1},getFocusedTabIndex:function(){return-1},getIndexOfTabById:function(){return-1},getTabListLength:function(){return 0},notifyTabActivated:function(){}}},enumerable:!0,configurable:!0}),t.prototype.setUseAutomaticActivation=function(e){this.useAutomaticActivation_=e},t.prototype.activateTab=function(e){var t,n=this.adapter.getPreviousActiveTabIndex();this.indexIsInRange_(e)&&e!==n&&(-1!==n&&(this.adapter.deactivateTabAtIndex(n),t=this.adapter.getTabIndicatorClientRectAtIndex(n)),this.adapter.activateTabAtIndex(e,t),this.scrollIntoView(e),this.adapter.notifyTabActivated(e))},t.prototype.handleKeyDown=function(e){var t=this.getKeyFromEvent_(e);if(void 0!==t)if(this.isActivationKey_(t)||e.preventDefault(),this.useAutomaticActivation_){if(this.isActivationKey_(t))return;var n=this.determineTargetFromKey_(this.adapter.getPreviousActiveTabIndex(),t);this.adapter.setActiveTab(n),this.scrollIntoView(n)}else{var a=this.adapter.getFocusedTabIndex();if(this.isActivationKey_(t))this.adapter.setActiveTab(a);else{n=this.determineTargetFromKey_(a,t);this.adapter.focusTabAtIndex(n),this.scrollIntoView(n)}}},t.prototype.handleTabInteraction=function(e){this.adapter.setActiveTab(this.adapter.getIndexOfTabById(e.detail.tabId))},t.prototype.scrollIntoView=function(e){if(this.indexIsInRange_(e))return 0===e?this.adapter.scrollTo(0):e===this.adapter.getTabListLength()-1?this.adapter.scrollTo(this.adapter.getScrollContentWidth()):this.isRTL_()?this.scrollIntoViewRTL_(e):void this.scrollIntoView_(e)},t.prototype.determineTargetFromKey_=function(e,t){var n=this.isRTL_(),a=this.adapter.getTabListLength()-1,i=e;return t===Be.END_KEY?i=a:t===Be.ARROW_LEFT_KEY&&!n||t===Be.ARROW_RIGHT_KEY&&n?i-=1:t===Be.ARROW_RIGHT_KEY&&!n||t===Be.ARROW_LEFT_KEY&&n?i+=1:i=0,i<0?i=a:i>a&&(i=0),i},t.prototype.calculateScrollIncrement_=function(e,t,n,a){var i=this.adapter.getTabDimensionsAtIndex(t),r=i.contentLeft-n-a,o=i.contentRight-n-De.EXTRA_SCROLL_AMOUNT,s=r+De.EXTRA_SCROLL_AMOUNT;return t<e?Math.min(o,0):Math.max(s,0)},t.prototype.calculateScrollIncrementRTL_=function(e,t,n,a,i){var r=this.adapter.getTabDimensionsAtIndex(t),o=i-r.contentLeft-n,s=i-r.contentRight-n-a+De.EXTRA_SCROLL_AMOUNT,c=o-De.EXTRA_SCROLL_AMOUNT;return t>e?Math.max(s,0):Math.min(c,0)},t.prototype.findAdjacentTabIndexClosestToEdge_=function(e,t,n,a){var i=t.rootLeft-n,r=t.rootRight-n-a,o=i+r;return i<0||o<0?e-1:r>0||o>0?e+1:-1},t.prototype.findAdjacentTabIndexClosestToEdgeRTL_=function(e,t,n,a,i){var r=i-t.rootLeft-a-n,o=i-t.rootRight-n,s=r+o;return r>0||s>0?e+1:o<0||s<0?e-1:-1},t.prototype.getKeyFromEvent_=function(e){return He.has(e.key)?e.key:Ue.get(e.keyCode)},t.prototype.isActivationKey_=function(e){return e===Be.SPACE_KEY||e===Be.ENTER_KEY},t.prototype.indexIsInRange_=function(e){return e>=0&&e<this.adapter.getTabListLength()},t.prototype.isRTL_=function(){return this.adapter.isRTL()},t.prototype.scrollIntoView_=function(e){var t=this.adapter.getScrollPosition(),n=this.adapter.getOffsetWidth(),a=this.adapter.getTabDimensionsAtIndex(e),i=this.findAdjacentTabIndexClosestToEdge_(e,a,t,n);if(this.indexIsInRange_(i)){var r=this.calculateScrollIncrement_(e,i,t,n);this.adapter.incrementScroll(r)}},t.prototype.scrollIntoViewRTL_=function(e){var t=this.adapter.getScrollPosition(),n=this.adapter.getOffsetWidth(),a=this.adapter.getTabDimensionsAtIndex(e),i=this.adapter.getScrollContentWidth(),r=this.findAdjacentTabIndexClosestToEdgeRTL_(e,a,t,n,i);if(this.indexIsInRange_(r)){var o=this.calculateScrollIncrementRTL_(e,r,t,n,i);this.adapter.incrementScroll(o)}},t}(ie),Me=qe.strings,We=0,Pe=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ee(t,e),t.attachTo=function(e){return new t(e)},Object.defineProperty(t.prototype,"focusOnActivate",{set:function(e){this.tabList_.forEach((function(t){return t.focusOnActivate=e}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"useAutomaticActivation",{set:function(e){this.foundation.setUseAutomaticActivation(e)},enumerable:!0,configurable:!0}),t.prototype.initialize=function(e,t){void 0===e&&(e=function(e){return new Le(e)}),void 0===t&&(t=function(e){return new ge(e)}),this.tabList_=this.instantiateTabs_(e),this.tabScroller_=this.instantiateTabScroller_(t)},t.prototype.initialSyncWithDOM=function(){var e=this;this.handleTabInteraction_=function(t){return e.foundation.handleTabInteraction(t)},this.handleKeyDown_=function(t){return e.foundation.handleKeyDown(t)},this.listen(Fe.strings.INTERACTED_EVENT,this.handleTabInteraction_),this.listen("keydown",this.handleKeyDown_);for(var t=0;t<this.tabList_.length;t++)if(this.tabList_[t].active){this.scrollIntoView(t);break}},t.prototype.destroy=function(){e.prototype.destroy.call(this),this.unlisten(Fe.strings.INTERACTED_EVENT,this.handleTabInteraction_),this.unlisten("keydown",this.handleKeyDown_),this.tabList_.forEach((function(e){return e.destroy()})),this.tabScroller_&&this.tabScroller_.destroy()},t.prototype.getDefaultFoundation=function(){var e=this;return new qe({scrollTo:function(t){return e.tabScroller_.scrollTo(t)},incrementScroll:function(t){return e.tabScroller_.incrementScroll(t)},getScrollPosition:function(){return e.tabScroller_.getScrollPosition()},getScrollContentWidth:function(){return e.tabScroller_.getScrollContentWidth()},getOffsetWidth:function(){return e.root.offsetWidth},isRTL:function(){return"rtl"===window.getComputedStyle(e.root).getPropertyValue("direction")},setActiveTab:function(t){return e.foundation.activateTab(t)},activateTabAtIndex:function(t,n){return e.tabList_[t].activate(n)},deactivateTabAtIndex:function(t){return e.tabList_[t].deactivate()},focusTabAtIndex:function(t){return e.tabList_[t].focus()},getTabIndicatorClientRectAtIndex:function(t){return e.tabList_[t].computeIndicatorClientRect()},getTabDimensionsAtIndex:function(t){return e.tabList_[t].computeDimensions()},getPreviousActiveTabIndex:function(){for(var t=0;t<e.tabList_.length;t++)if(e.tabList_[t].active)return t;return-1},getFocusedTabIndex:function(){var t=e.getTabElements_(),n=document.activeElement;return t.indexOf(n)},getIndexOfTabById:function(t){for(var n=0;n<e.tabList_.length;n++)if(e.tabList_[n].id===t)return n;return-1},getTabListLength:function(){return e.tabList_.length},notifyTabActivated:function(t){return e.emit(Me.TAB_ACTIVATED_EVENT,{index:t},!0)}})},t.prototype.activateTab=function(e){this.foundation.activateTab(e)},t.prototype.scrollIntoView=function(e){this.foundation.scrollIntoView(e)},t.prototype.getTabElements_=function(){return[].slice.call(this.root.querySelectorAll(Me.TAB_SELECTOR))},t.prototype.instantiateTabs_=function(e){return this.getTabElements_().map((function(t){return t.id=t.id||"mdc-tab-"+ ++We,e(t)}))},t.prototype.instantiateTabScroller_=function(e){var t=this.root.querySelector(Me.TAB_SCROLLER_SELECTOR);return t?e(t):null},t}(re);var ze=e=>{let t=new Pe(document.querySelector(".mdc-tab-bar")).tabList_[e].content_.firstElementChild.innerText.toLowerCase();window.history.pushState("","","?"+t)};var Ge=e=>{const t=document.querySelector("#content");t&&e.removeChild(t);const n=document.createElement("main");n.setAttribute("id","content");let a=document.querySelector("footer");return e.insertBefore(n,a),n};var je=e=>{const t=document.querySelector("body");let n=Ge(t);switch(window.scrollTo(0,0),e){case 0:H(n),ze(e);break;case 1:q(n),ze(e);break;case 2:z(n),ze(e);break;case 3:X(n),ze(e)}};var Ye=(e=0)=>{const t=document.querySelector("body");i(t);const n=document.createElement("main");n.setAttribute("id","content"),t.appendChild(n),(e=>{let t=document.createElement("footer");t.setAttribute("class","footer");let n=document.createElement("p");n.innerHTML="© Tribe 2018. All rights reserved",t.appendChild(n),e.appendChild(t)})(t),t.addEventListener("MDCTabBar:activated",e=>{je(e.detail.index)});new Pe(document.querySelector(".mdc-tab-bar")).activateTab(e)};n(3),n(5);switch(window.location.search){case"?hours":Ye(0);break;case"?menus":Ye(1);break;case"?manifesto":Ye(2);break;case"?contact":Ye(3);break;default:document.onload=Ye(0)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,