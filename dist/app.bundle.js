!function(e){var t={};function n(a){if(t[a])return t[a].exports;var i=t[a]={i:a,l:!1,exports:{}};return e[a].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(a,i,function(t){return e[t]}.bind(null,i));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=7)}([function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",a=e[3];if(!a)return n;if(t&&"function"==typeof btoa){var i=(o=a,s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(c," */")),r=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[n].concat(r).concat([i]).join("\n")}var o,s,c;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,a){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(a)for(var r=0;r<this.length;r++){var o=this[r][0];null!=o&&(i[o]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);a&&i[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},function(e,t,n){"use strict";var a,i=function(){return void 0===a&&(a=Boolean(window&&document&&document.all&&!window.atob)),a},r=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),o=[];function s(e){for(var t=-1,n=0;n<o.length;n++)if(o[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},a=[],i=0;i<e.length;i++){var r=e[i],c=t.base?r[0]+t.base:r[0],l=n[c]||0,d="".concat(c," ").concat(l);n[c]=l+1;var p=s(d),u={css:r[1],media:r[2],sourceMap:r[3]};-1!==p?(o[p].references++,o[p].updater(u)):o.push({identifier:d,updater:h(u,t),references:1}),a.push(d)}return a}function l(e){var t=document.createElement("style"),a=e.attributes||{};if(void 0===a.nonce){var i=n.nc;i&&(a.nonce=i)}if(Object.keys(a).forEach((function(e){t.setAttribute(e,a[e])})),"function"==typeof e.insert)e.insert(t);else{var o=r(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var d,p=(d=[],function(e,t){return d[e]=t,d.filter(Boolean).join("\n")});function u(e,t,n,a){var i=n?"":a.media?"@media ".concat(a.media," {").concat(a.css,"}"):a.css;if(e.styleSheet)e.styleSheet.cssText=p(t,i);else{var r=document.createTextNode(i),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(r,o[t]):e.appendChild(r)}}function f(e,t,n){var a=n.css,i=n.media,r=n.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),r&&btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleSheet)e.styleSheet.cssText=a;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(a))}}var m=null,A=0;function h(e,t){var n,a,i;if(t.singleton){var r=A++;n=m||(m=l(t)),a=u.bind(null,n,r,!1),i=u.bind(null,n,r,!0)}else n=l(t),a=f.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return a(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;a(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=i());var n=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var a=0;a<n.length;a++){var i=s(n[a]);o[i].references--}for(var r=c(e,t),l=0;l<n.length;l++){var d=s(n[l]);0===o[d].references&&(o[d].updater(),o.splice(d,1))}n=r}}}},,function(e,t,n){var a=n(1),i=n(4);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var r={insert:"head",singleton:!1};a(i,r);e.exports=i.locals||{}},function(e,t,n){"use strict";n.r(t);var a=n(0),i=n.n(a)()(!0);i.push([e.i,"html,body,header,nav,h1,a,ul,li,strong,main,button,i,section,img,div,h2,h3,h4,h5,p,form,fieldset,label,input,textarea,span,article,footer,time,small,aside{margin:0;padding:0;border:0;outline:0;font-family:inherit;color:inherit;text-align:inherit;text-decoration:inherit;vertical-align:inherit;box-sizing:inherit;background:inherit}ul{list-style:none}img{display:block;width:100%;height:auto}input[type=password],input[type=email],input[type=text],input[type=submit],textarea,button{-webkit-appearance:none;-moz-appearance:none;appearance:none}button,input[type=submit]{cursor:pointer}*:focus{outline:none}","",{version:3,sources:["webpack://src/style/reset.scss"],names:[],mappings:"AACA,2JAKE,QAAA,CACA,SAAA,CACA,QAAA,CACA,SAAA,CACA,mBAAA,CACA,aAAA,CACA,kBAAA,CACA,uBAAA,CACA,sBAAA,CACA,kBAAA,CACA,kBAAA,CAGF,GACE,eAAA,CAGF,IACE,aAAA,CACA,UAAA,CACA,WAAA,CAGF,2FAMC,uBAAA,CACA,oBAAA,CACA,eAAA,CAGD,0BAEE,cAAA,CAGF,QACI,YAAA",sourcesContent:['/* STANDARD CSS RESET BELOW */\nhtml, body, header, nav, h1, a,\nul, li, strong, main, button, i,\nsection, img, div, h2, h3, h4, h5, p, form,\nfieldset, label, input, textarea,\nspan, article, footer, time, small, aside {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  font-family: inherit;\n  color: inherit;\n  text-align: inherit;\n  text-decoration: inherit;\n  vertical-align: inherit;\n  box-sizing: inherit;\n  background: inherit;\n}\n\nul {\n  list-style: none;\n}\n\nimg {\n  display: block;\n  width: 100%;\n  height: auto;\n}\n\ninput[type="password"],\ninput[type="email"],\ninput[type="text"],\ninput[type="submit"],\ntextarea,\nbutton {\n -webkit-appearance: none;\n -moz-appearance: none;\n appearance: none;\n}\n\nbutton,\ninput[type="submit"] {\n  cursor: pointer;\n}\n\n*:focus {\n    outline: none;\n}\n'],sourceRoot:""}]),t.default=i},function(e,t,n){var a=n(1),i=n(6);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var r={insert:"head",singleton:!1};a(i,r);e.exports=i.locals||{}},function(e,t,n){"use strict";n.r(t);var a=n(0),i=n.n(a)()(!0);i.push([e.i,'@font-face{font-family:"Open Sans Condensed";font-style:normal;font-weight:300;font-display:swap;src:local("Open Sans Condensed Light"),local("OpenSansCondensed-Light"),url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDujMR6WR.woff2) format("woff2");unicode-range:U+0460-052F,U+1C80-1C88,U+20B4,U+2DE0-2DFF,U+A640-A69F,U+FE2E-FE2F}@font-face{font-family:"Open Sans Condensed";font-style:normal;font-weight:300;font-display:swap;src:local("Open Sans Condensed Light"),local("OpenSansCondensed-Light"),url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDuHMR6WR.woff2) format("woff2");unicode-range:U+0400-045F,U+0490-0491,U+04B0-04B1,U+2116}@font-face{font-family:"Open Sans Condensed";font-style:normal;font-weight:300;font-display:swap;src:local("Open Sans Condensed Light"),local("OpenSansCondensed-Light"),url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDunMR6WR.woff2) format("woff2");unicode-range:U+1F00-1FFF}@font-face{font-family:"Open Sans Condensed";font-style:normal;font-weight:300;font-display:swap;src:local("Open Sans Condensed Light"),local("OpenSansCondensed-Light"),url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDubMR6WR.woff2) format("woff2");unicode-range:U+0370-03FF}@font-face{font-family:"Open Sans Condensed";font-style:normal;font-weight:300;font-display:swap;src:local("Open Sans Condensed Light"),local("OpenSansCondensed-Light"),url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDurMR6WR.woff2) format("woff2");unicode-range:U+0102-0103,U+0110-0111,U+0128-0129,U+0168-0169,U+01A0-01A1,U+01AF-01B0,U+1EA0-1EF9,U+20AB}@font-face{font-family:"Open Sans Condensed";font-style:normal;font-weight:300;font-display:swap;src:local("Open Sans Condensed Light"),local("OpenSansCondensed-Light"),url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDuvMR6WR.woff2) format("woff2");unicode-range:U+0100-024F,U+0259,U+1E00-1EFF,U+2020,U+20A0-20AB,U+20AD-20CF,U+2113,U+2C60-2C7F,U+A720-A7FF}@font-face{font-family:"Open Sans Condensed";font-style:normal;font-weight:300;font-display:swap;src:local("Open Sans Condensed Light"),local("OpenSansCondensed-Light"),url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDuXMRw.woff2) format("woff2");unicode-range:U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+2000-206F,U+2074,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD}.mdc-tab-bar{width:100%}.mdc-tab{height:48px}.mdc-tab--stacked{height:72px}.mdc-tab-scroller{overflow-y:hidden}.mdc-tab-scroller.mdc-tab-scroller--animating .mdc-tab-scroller__scroll-content{transition:250ms transform cubic-bezier(0.4, 0, 0.2, 1)}.mdc-tab-scroller__test{position:absolute;top:-9999px;width:100px;height:100px;overflow-x:scroll}.mdc-tab-scroller__scroll-area{-webkit-overflow-scrolling:touch;display:flex;overflow-x:hidden}.mdc-tab-scroller__scroll-area::-webkit-scrollbar,.mdc-tab-scroller__test::-webkit-scrollbar{display:none}.mdc-tab-scroller__scroll-area--scroll{overflow-x:scroll}.mdc-tab-scroller__scroll-content{position:relative;display:flex;flex:1 0 auto;transform:none;will-change:transform}.mdc-tab-scroller--align-start .mdc-tab-scroller__scroll-content{justify-content:flex-start}.mdc-tab-scroller--align-end .mdc-tab-scroller__scroll-content{justify-content:flex-end}.mdc-tab-scroller--align-center .mdc-tab-scroller__scroll-content{justify-content:center}.mdc-tab-scroller--animating .mdc-tab-scroller__scroll-area{-webkit-overflow-scrolling:auto}.mdc-tab-indicator{display:flex;position:absolute;top:0;left:0;justify-content:center;width:100%;height:100%;pointer-events:none;z-index:1}.mdc-tab-indicator .mdc-tab-indicator__content--underline{border-color:#6200ee;border-color:var(--mdc-theme-primary, #6200ee)}.mdc-tab-indicator .mdc-tab-indicator__content--icon{color:#018786;color:var(--mdc-theme-secondary, #018786)}.mdc-tab-indicator .mdc-tab-indicator__content--underline{border-top-width:2px}.mdc-tab-indicator .mdc-tab-indicator__content--icon{height:34px;font-size:34px}.mdc-tab-indicator__content{transform-origin:left;opacity:0}.mdc-tab-indicator__content--underline{align-self:flex-end;box-sizing:border-box;width:100%;border-top-style:solid}.mdc-tab-indicator__content--icon{align-self:center;margin:0 auto}.mdc-tab-indicator--active .mdc-tab-indicator__content{opacity:1}.mdc-tab-indicator .mdc-tab-indicator__content{transition:250ms transform cubic-bezier(0.4, 0, 0.2, 1)}.mdc-tab-indicator--no-transition .mdc-tab-indicator__content{transition:none}.mdc-tab-indicator--fade .mdc-tab-indicator__content{transition:150ms opacity linear}.mdc-tab-indicator--active.mdc-tab-indicator--fade .mdc-tab-indicator__content{transition-delay:100ms}.mdc-tab{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-button-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:0.875rem;font-size:var(--mdc-typography-button-font-size, 0.875rem);line-height:2.25rem;line-height:var(--mdc-typography-button-line-height, 2.25rem);font-weight:500;font-weight:var(--mdc-typography-button-font-weight, 500);letter-spacing:0.0892857143em;letter-spacing:var(--mdc-typography-button-letter-spacing, 0.0892857143em);text-decoration:none;-webkit-text-decoration:var(--mdc-typography-button-text-decoration, none);text-decoration:var(--mdc-typography-button-text-decoration, none);text-transform:uppercase;text-transform:var(--mdc-typography-button-text-transform, uppercase);padding-right:24px;padding-left:24px;position:relative;display:flex;flex:1 0 auto;justify-content:center;box-sizing:border-box;margin:0;padding-top:0;padding-bottom:0;border:none;outline:none;background:none;text-align:center;white-space:nowrap;cursor:pointer;-webkit-appearance:none;z-index:1}.mdc-tab .mdc-tab__text-label{color:rgba(0,0,0,.6)}.mdc-tab .mdc-tab__icon{color:rgba(0,0,0,.54);fill:currentColor}.mdc-tab::-moz-focus-inner{padding:0;border:0}.mdc-tab--min-width{flex:0 1 auto}.mdc-tab__content{position:relative;display:flex;align-items:center;justify-content:center;height:inherit;pointer-events:none}.mdc-tab__text-label{transition:150ms color linear;display:inline-block;line-height:1;z-index:2}.mdc-tab__icon{transition:150ms color linear;width:24px;height:24px;font-size:24px;z-index:2}.mdc-tab--stacked .mdc-tab__content{flex-direction:column;align-items:center;justify-content:center}.mdc-tab--stacked .mdc-tab__text-label{padding-top:6px;padding-bottom:4px}.mdc-tab--active .mdc-tab__text-label{color:#6200ee;color:var(--mdc-theme-primary, #6200ee)}.mdc-tab--active .mdc-tab__icon{color:#6200ee;color:var(--mdc-theme-primary, #6200ee);fill:currentColor}.mdc-tab--active .mdc-tab__text-label,.mdc-tab--active .mdc-tab__icon{transition-delay:100ms}.mdc-tab:not(.mdc-tab--stacked) .mdc-tab__icon+.mdc-tab__text-label{padding-left:8px;padding-right:0}[dir=rtl] .mdc-tab:not(.mdc-tab--stacked) .mdc-tab__icon+.mdc-tab__text-label,.mdc-tab:not(.mdc-tab--stacked) .mdc-tab__icon+.mdc-tab__text-label[dir=rtl]{padding-left:0;padding-right:8px}@-webkit-keyframes mdc-ripple-fg-radius-in{from{-webkit-animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transform:translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1)}to{transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}}@keyframes mdc-ripple-fg-radius-in{from{-webkit-animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transform:translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1)}to{transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}}@-webkit-keyframes mdc-ripple-fg-opacity-in{from{-webkit-animation-timing-function:linear;animation-timing-function:linear;opacity:0}to{opacity:var(--mdc-ripple-fg-opacity, 0)}}@keyframes mdc-ripple-fg-opacity-in{from{-webkit-animation-timing-function:linear;animation-timing-function:linear;opacity:0}to{opacity:var(--mdc-ripple-fg-opacity, 0)}}@-webkit-keyframes mdc-ripple-fg-opacity-out{from{-webkit-animation-timing-function:linear;animation-timing-function:linear;opacity:var(--mdc-ripple-fg-opacity, 0)}to{opacity:0}}@keyframes mdc-ripple-fg-opacity-out{from{-webkit-animation-timing-function:linear;animation-timing-function:linear;opacity:var(--mdc-ripple-fg-opacity, 0)}to{opacity:0}}.mdc-tab__ripple{--mdc-ripple-fg-size: 0;--mdc-ripple-left: 0;--mdc-ripple-top: 0;--mdc-ripple-fg-scale: 1;--mdc-ripple-fg-translate-end: 0;--mdc-ripple-fg-translate-start: 0;-webkit-tap-highlight-color:rgba(0,0,0,0);position:absolute;top:0;left:0;width:100%;height:100%;overflow:hidden}.mdc-tab__ripple::before,.mdc-tab__ripple::after{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:""}.mdc-tab__ripple::before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1}.mdc-tab__ripple.mdc-ripple-upgraded::before{transform:scale(var(--mdc-ripple-fg-scale, 1))}.mdc-tab__ripple.mdc-ripple-upgraded::after{top:0;left:0;transform:scale(0);transform-origin:center center}.mdc-tab__ripple.mdc-ripple-upgraded--unbounded::after{top:var(--mdc-ripple-top, 0);left:var(--mdc-ripple-left, 0)}.mdc-tab__ripple.mdc-ripple-upgraded--foreground-activation::after{-webkit-animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards;animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-tab__ripple.mdc-ripple-upgraded--foreground-deactivation::after{-webkit-animation:mdc-ripple-fg-opacity-out 150ms;animation:mdc-ripple-fg-opacity-out 150ms;transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}.mdc-tab__ripple::before,.mdc-tab__ripple::after{top:calc(50% - 100%);left:calc(50% - 100%);width:200%;height:200%}.mdc-tab__ripple.mdc-ripple-upgraded::after{width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-tab__ripple::before,.mdc-tab__ripple::after{background-color:#6200ee;background-color:var(--mdc-theme-primary, #6200ee)}.mdc-tab__ripple:hover::before{opacity:.04}.mdc-tab__ripple.mdc-ripple-upgraded--background-focused::before,.mdc-tab__ripple:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.12}.mdc-tab__ripple:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-tab__ripple:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.12}.mdc-tab__ripple.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.12}html{height:100%;width:100%;font-family:"Open Sans Condensed";font-weight:bold;scroll-behavior:smooth}body{width:100%;height:100%;display:flex;flex-direction:column;align-items:center}.mdc-tab-bar{position:fixed;top:0;z-index:1;background:#fff}article{display:flex;font-size:20px}article h2{font-size:40px}article h3{font-size:30px}article pre{font-family:"Open Sans Condensed"}#content{margin-top:48px;max-width:1400px;width:100%;display:flex;flex-direction:column;align-items:center;justify-content:center}.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__text-label{color:#a41109}.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple::before,.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple::after{background-color:#a41109}.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple:hover::before{opacity:.04}.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded--background-focused::before,.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.12}.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.12}.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.12}.mdc-tab[id=mdc-tab-1] .mdc-tab-indicator .mdc-tab-indicator__content--underline{border-color:#a41109}.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__text-label{color:#8f0066}.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple::before,.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple::after{background-color:#8f0066}.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple:hover::before{opacity:.04}.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded--background-focused::before,.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.12}.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.12}.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.12}.mdc-tab[id=mdc-tab-2] .mdc-tab-indicator .mdc-tab-indicator__content--underline{border-color:#8f0066}.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__text-label{color:#00aeef}.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple::before,.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple::after{background-color:#00aeef}.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple:hover::before{opacity:.08}.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded--background-focused::before,.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.24}.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.24}.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.24}.mdc-tab[id=mdc-tab-3] .mdc-tab-indicator .mdc-tab-indicator__content--underline{border-color:#00aeef}.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__text-label{color:#dac200}.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple::before,.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple::after{background-color:#dac200}.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple:hover::before{opacity:.08}.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded--background-focused::before,.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.24}.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.24}.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.24}.mdc-tab[id=mdc-tab-4] .mdc-tab-indicator .mdc-tab-indicator__content--underline{border-color:#dac200}.logo-div{background-size:cover;background-position:center;width:50px;height:50px;align-self:center;margin:1%}.hero-image{background-size:cover;background-position:center;background-repeat:no-repeat;position:relative;width:100%;height:85vh;margin-bottom:4%}.hero-text{text-align:center;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);color:#fff;background:none;margin-top:1%;margin-bottom:1%}@media only screen and (max-width: 560px){.hero-text h1{font-size:24px}}footer{display:flex;width:100%;background-color:#666;padding:.5% 0%}footer p{padding-left:1%}.hours-article{display:flex;width:100%;flex-direction:row;justify-content:space-around}.hours-article .article-card{display:flex;flex-direction:column;align-items:center}@media only screen and (max-width: 560px){.hours-article{flex-direction:column}}.manifesto-article{flex-direction:column;font-size:20px}.manifesto-article h3{padding-left:5%;padding-bottom:2%}.manifesto-article p{padding-left:5%;padding-right:5%;padding-top:1%}.manifesto-article ul{padding:1% 5% 2% 6%}.manifesto-article ul li::before{content:"-";color:#00aeef;font-weight:bolder;display:inline-block;width:1em}.contact-article{display:flex;width:100%;flex-direction:row;justify-content:space-around}.contact-article .article-card{display:flex;flex-direction:column;align-items:center}.contact-article svg{width:30px;height:30px;margin-top:2%;margin-left:1%}.contact-form{display:flex;flex-direction:column;justify-content:space-around;align-items:center;width:80%;height:40vh}.contact-form h3{font-size:30px}.contact-form .infoDiv{display:flex;justify-content:space-around;height:50px;width:60%}.contact-form .messageDiv{display:flex;width:80%}.contact-form .messageDiv .input-group{width:50%}.contact-form .input-group{position:relative;margin:40px auto;width:35%}.contact-form .form-control{position:relative;z-index:1;width:100%;height:35px;font-size:16px;border:none;border-bottom:1px solid #d9d9d9;background-color:transparent}.contact-form .form-control+label{position:absolute;top:10px;left:3px;font-size:16px;color:#999;transition:all .2s ease-out}.contact-form .form-control:focus{outline:none;border-width:2px;border-color:#dac200;transition:all .2s ease-out}.contact-form .form-control.has-value+label,.contact-form .form-control:focus+label{top:-15px;color:#dac200;font-size:12px}.contact-form .form-control.has-value:not(:focus)+label{color:#999}.map-container{width:100%;height:40vh;margin:1% 0}.map-display{width:100%;height:100%}.map-frame{width:100%;height:100%;border:0}@media only screen and (max-width: 1065px){.contact-article{flex-direction:column}}@media only screen and (max-width: 560px){.contact-article .article-card{flex-direction:column;padding:3% 0}.contact-article p{margin-left:5%;margin-right:5%}.contact-form h3{margin-top:-25px;margin-bottom:-50px}.contact-form .infoDiv{flex-direction:column;justify-content:flex-start;height:20%;padding:0;margin:0}.contact-form .infoDiv .input-group{margin:3%;width:80%}.contact-form .input-group{margin:1%}.contact-form .messageDiv{flex-direction:column;align-items:center}}button{background-color:#dac200;color:#fff;font-size:14px;text-transform:uppercase;font-weight:500;border:1px solid #dac200;height:36px;padding:0 16px;border-radius:2px;box-shadow:0 1px 3px #999}textarea.form-control{height:120px}select{-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:0;box-shadow:none;border:0 !important;background-image:none}select::-ms-expand{display:none}.select{position:relative;top:60%;left:550px;display:flex;width:20em;height:3em;line-height:3;background-color:#fff;overflow:hidden;border-radius:.25em}select{flex:1;padding:0 .5em;background-color:#fff;cursor:pointer}option{background-color:#fff;-webkit-text-decoration-color:#8f0066;text-decoration-color:#8f0066}.select::after{content:"▼";position:absolute;top:0;right:0;padding:0 1em;background:#fff;cursor:pointer;pointer-events:none;transition:.25s all ease}.select:hover::after{color:#8f0066}.menus-article{flex-direction:column;width:100%}.menus-article h2{color:#8f0066}.menu-holder{display:flex;flex-direction:column;align-items:center;width:100%}.menu-holder p{display:flex;width:70%;justify-content:center}hr{width:100%;height:1px;background-color:#8f0066;border-color:#8f0066}.menu-div{display:flex;flex-direction:row;flex-wrap:wrap;justify-content:space-between;padding:5%}.menu-item-div{display:flex;flex-direction:column;width:300px;padding:1%}.menu-item-div p{justify-content:flex-start}.menu-item-title-div{display:flex;flex-direction:row;justify-content:space-between}.lunch-menu-div{display:flex;flex-direction:column;align-items:center;padding:1%}.lunch-item-holder{display:flex;flex-wrap:wrap;justify-content:space-between}@media only screen and (max-width: 1395px){.select{left:38%}}@media only screen and (max-width: 1100px){.select{left:32%}}@media only screen and (max-width: 800px){.select{left:26%}}@media only screen and (max-width: 630px){.select{left:20%}}@media only screen and (max-width: 480px){.select{left:14%}}@media only screen and (max-width: 400px){.select{left:5%}}',"",{version:3,sources:["webpack://src/style/style.scss","webpack://src/style/vars/font.scss","webpack://node_modules/@material/tab-bar/_mixins.scss","webpack://node_modules/@material/tab-scroller/_mixins.scss","webpack://node_modules/@material/tab/_mixins.scss","webpack://node_modules/@material/tab-indicator/_mixins.scss","webpack://node_modules/@material/theme/_mixins.scss","webpack://node_modules/@material/typography/_mixins.scss","webpack://node_modules/@material/theme/_custom-properties.scss","webpack://node_modules/@material/tab/_variables.scss","webpack://node_modules/@material/rtl/_mixins.scss","webpack://node_modules/@material/ripple/_keyframes.scss","webpack://node_modules/@material/animation/_variables.scss","webpack://node_modules/@material/ripple/_mixins.scss","webpack://node_modules/@material/ripple/_variables.scss","webpack://src/style/base.scss","webpack://src/style/vars/vars.scss","webpack://src/style/components/logo.scss","webpack://src/style/components/hero.scss","webpack://src/style/components/footer.scss","webpack://src/style/vars/colors.scss","webpack://src/style/pages/hours.scss","webpack://src/style/pages/manifesto.scss","webpack://src/style/pages/contact.scss","webpack://src/style/pages/menus.scss"],names:[],mappings:"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",sourcesContent:['@font-face{font-family:"Open Sans Condensed";font-style:normal;font-weight:300;font-display:swap;src:local("Open Sans Condensed Light"),local("OpenSansCondensed-Light"),url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDujMR6WR.woff2) format("woff2");unicode-range:U+0460-052F,U+1C80-1C88,U+20B4,U+2DE0-2DFF,U+A640-A69F,U+FE2E-FE2F}@font-face{font-family:"Open Sans Condensed";font-style:normal;font-weight:300;font-display:swap;src:local("Open Sans Condensed Light"),local("OpenSansCondensed-Light"),url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDuHMR6WR.woff2) format("woff2");unicode-range:U+0400-045F,U+0490-0491,U+04B0-04B1,U+2116}@font-face{font-family:"Open Sans Condensed";font-style:normal;font-weight:300;font-display:swap;src:local("Open Sans Condensed Light"),local("OpenSansCondensed-Light"),url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDunMR6WR.woff2) format("woff2");unicode-range:U+1F00-1FFF}@font-face{font-family:"Open Sans Condensed";font-style:normal;font-weight:300;font-display:swap;src:local("Open Sans Condensed Light"),local("OpenSansCondensed-Light"),url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDubMR6WR.woff2) format("woff2");unicode-range:U+0370-03FF}@font-face{font-family:"Open Sans Condensed";font-style:normal;font-weight:300;font-display:swap;src:local("Open Sans Condensed Light"),local("OpenSansCondensed-Light"),url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDurMR6WR.woff2) format("woff2");unicode-range:U+0102-0103,U+0110-0111,U+0128-0129,U+0168-0169,U+01A0-01A1,U+01AF-01B0,U+1EA0-1EF9,U+20AB}@font-face{font-family:"Open Sans Condensed";font-style:normal;font-weight:300;font-display:swap;src:local("Open Sans Condensed Light"),local("OpenSansCondensed-Light"),url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDuvMR6WR.woff2) format("woff2");unicode-range:U+0100-024F,U+0259,U+1E00-1EFF,U+2020,U+20A0-20AB,U+20AD-20CF,U+2113,U+2C60-2C7F,U+A720-A7FF}@font-face{font-family:"Open Sans Condensed";font-style:normal;font-weight:300;font-display:swap;src:local("Open Sans Condensed Light"),local("OpenSansCondensed-Light"),url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDuXMRw.woff2) format("woff2");unicode-range:U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+2000-206F,U+2074,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD}.mdc-tab-bar{width:100%}.mdc-tab{height:48px}.mdc-tab--stacked{height:72px}.mdc-tab-scroller{overflow-y:hidden}.mdc-tab-scroller.mdc-tab-scroller--animating .mdc-tab-scroller__scroll-content{transition:250ms transform cubic-bezier(0.4, 0, 0.2, 1)}.mdc-tab-scroller__test{position:absolute;top:-9999px;width:100px;height:100px;overflow-x:scroll}.mdc-tab-scroller__scroll-area{-webkit-overflow-scrolling:touch;display:flex;overflow-x:hidden}.mdc-tab-scroller__scroll-area::-webkit-scrollbar,.mdc-tab-scroller__test::-webkit-scrollbar{display:none}.mdc-tab-scroller__scroll-area--scroll{overflow-x:scroll}.mdc-tab-scroller__scroll-content{position:relative;display:flex;flex:1 0 auto;transform:none;will-change:transform}.mdc-tab-scroller--align-start .mdc-tab-scroller__scroll-content{justify-content:flex-start}.mdc-tab-scroller--align-end .mdc-tab-scroller__scroll-content{justify-content:flex-end}.mdc-tab-scroller--align-center .mdc-tab-scroller__scroll-content{justify-content:center}.mdc-tab-scroller--animating .mdc-tab-scroller__scroll-area{-webkit-overflow-scrolling:auto}.mdc-tab-indicator{display:flex;position:absolute;top:0;left:0;justify-content:center;width:100%;height:100%;pointer-events:none;z-index:1}.mdc-tab-indicator .mdc-tab-indicator__content--underline{border-color:#6200ee;border-color:var(--mdc-theme-primary, #6200ee)}.mdc-tab-indicator .mdc-tab-indicator__content--icon{color:#018786;color:var(--mdc-theme-secondary, #018786)}.mdc-tab-indicator .mdc-tab-indicator__content--underline{border-top-width:2px}.mdc-tab-indicator .mdc-tab-indicator__content--icon{height:34px;font-size:34px}.mdc-tab-indicator__content{transform-origin:left;opacity:0}.mdc-tab-indicator__content--underline{align-self:flex-end;box-sizing:border-box;width:100%;border-top-style:solid}.mdc-tab-indicator__content--icon{align-self:center;margin:0 auto}.mdc-tab-indicator--active .mdc-tab-indicator__content{opacity:1}.mdc-tab-indicator .mdc-tab-indicator__content{transition:250ms transform cubic-bezier(0.4, 0, 0.2, 1)}.mdc-tab-indicator--no-transition .mdc-tab-indicator__content{transition:none}.mdc-tab-indicator--fade .mdc-tab-indicator__content{transition:150ms opacity linear}.mdc-tab-indicator--active.mdc-tab-indicator--fade .mdc-tab-indicator__content{transition-delay:100ms}.mdc-tab{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-button-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:0.875rem;font-size:var(--mdc-typography-button-font-size, 0.875rem);line-height:2.25rem;line-height:var(--mdc-typography-button-line-height, 2.25rem);font-weight:500;font-weight:var(--mdc-typography-button-font-weight, 500);letter-spacing:0.0892857143em;letter-spacing:var(--mdc-typography-button-letter-spacing, 0.0892857143em);text-decoration:none;text-decoration:var(--mdc-typography-button-text-decoration, none);text-transform:uppercase;text-transform:var(--mdc-typography-button-text-transform, uppercase);padding-right:24px;padding-left:24px;position:relative;display:flex;flex:1 0 auto;justify-content:center;box-sizing:border-box;margin:0;padding-top:0;padding-bottom:0;border:none;outline:none;background:none;text-align:center;white-space:nowrap;cursor:pointer;-webkit-appearance:none;z-index:1}.mdc-tab .mdc-tab__text-label{color:rgba(0,0,0,.6)}.mdc-tab .mdc-tab__icon{color:rgba(0,0,0,.54);fill:currentColor}.mdc-tab::-moz-focus-inner{padding:0;border:0}.mdc-tab--min-width{flex:0 1 auto}.mdc-tab__content{position:relative;display:flex;align-items:center;justify-content:center;height:inherit;pointer-events:none}.mdc-tab__text-label{transition:150ms color linear;display:inline-block;line-height:1;z-index:2}.mdc-tab__icon{transition:150ms color linear;width:24px;height:24px;font-size:24px;z-index:2}.mdc-tab--stacked .mdc-tab__content{flex-direction:column;align-items:center;justify-content:center}.mdc-tab--stacked .mdc-tab__text-label{padding-top:6px;padding-bottom:4px}.mdc-tab--active .mdc-tab__text-label{color:#6200ee;color:var(--mdc-theme-primary, #6200ee)}.mdc-tab--active .mdc-tab__icon{color:#6200ee;color:var(--mdc-theme-primary, #6200ee);fill:currentColor}.mdc-tab--active .mdc-tab__text-label,.mdc-tab--active .mdc-tab__icon{transition-delay:100ms}.mdc-tab:not(.mdc-tab--stacked) .mdc-tab__icon+.mdc-tab__text-label{padding-left:8px;padding-right:0}[dir=rtl] .mdc-tab:not(.mdc-tab--stacked) .mdc-tab__icon+.mdc-tab__text-label,.mdc-tab:not(.mdc-tab--stacked) .mdc-tab__icon+.mdc-tab__text-label[dir=rtl]{padding-left:0;padding-right:8px}@keyframes mdc-ripple-fg-radius-in{from{animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transform:translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1)}to{transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}}@keyframes mdc-ripple-fg-opacity-in{from{animation-timing-function:linear;opacity:0}to{opacity:var(--mdc-ripple-fg-opacity, 0)}}@keyframes mdc-ripple-fg-opacity-out{from{animation-timing-function:linear;opacity:var(--mdc-ripple-fg-opacity, 0)}to{opacity:0}}.mdc-tab__ripple{--mdc-ripple-fg-size: 0;--mdc-ripple-left: 0;--mdc-ripple-top: 0;--mdc-ripple-fg-scale: 1;--mdc-ripple-fg-translate-end: 0;--mdc-ripple-fg-translate-start: 0;-webkit-tap-highlight-color:rgba(0,0,0,0);position:absolute;top:0;left:0;width:100%;height:100%;overflow:hidden}.mdc-tab__ripple::before,.mdc-tab__ripple::after{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:""}.mdc-tab__ripple::before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1}.mdc-tab__ripple.mdc-ripple-upgraded::before{transform:scale(var(--mdc-ripple-fg-scale, 1))}.mdc-tab__ripple.mdc-ripple-upgraded::after{top:0;left:0;transform:scale(0);transform-origin:center center}.mdc-tab__ripple.mdc-ripple-upgraded--unbounded::after{top:var(--mdc-ripple-top, 0);left:var(--mdc-ripple-left, 0)}.mdc-tab__ripple.mdc-ripple-upgraded--foreground-activation::after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-tab__ripple.mdc-ripple-upgraded--foreground-deactivation::after{animation:mdc-ripple-fg-opacity-out 150ms;transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}.mdc-tab__ripple::before,.mdc-tab__ripple::after{top:calc(50% - 100%);left:calc(50% - 100%);width:200%;height:200%}.mdc-tab__ripple.mdc-ripple-upgraded::after{width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-tab__ripple::before,.mdc-tab__ripple::after{background-color:#6200ee;background-color:var(--mdc-theme-primary, #6200ee)}.mdc-tab__ripple:hover::before{opacity:.04}.mdc-tab__ripple.mdc-ripple-upgraded--background-focused::before,.mdc-tab__ripple:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.12}.mdc-tab__ripple:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-tab__ripple:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.12}.mdc-tab__ripple.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.12}html{height:100%;width:100%;font-family:"Open Sans Condensed";font-weight:bold;scroll-behavior:smooth}body{width:100%;height:100%;display:flex;flex-direction:column;align-items:center}.mdc-tab-bar{position:fixed;top:0;z-index:1;background:#fff}article{display:flex;font-size:20px}article h2{font-size:40px}article h3{font-size:30px}article pre{font-family:"Open Sans Condensed"}#content{margin-top:48px;max-width:1400px;width:100%;display:flex;flex-direction:column;align-items:center;justify-content:center}.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__text-label{color:#a41109}.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple::before,.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple::after{background-color:#a41109}.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple:hover::before{opacity:.04}.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded--background-focused::before,.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.12}.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.12}.mdc-tab[id=mdc-tab-1].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.12}.mdc-tab[id=mdc-tab-1] .mdc-tab-indicator .mdc-tab-indicator__content--underline{border-color:#a41109}.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__text-label{color:#8f0066}.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple::before,.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple::after{background-color:#8f0066}.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple:hover::before{opacity:.04}.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded--background-focused::before,.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.12}.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.12}.mdc-tab[id=mdc-tab-2].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.12}.mdc-tab[id=mdc-tab-2] .mdc-tab-indicator .mdc-tab-indicator__content--underline{border-color:#8f0066}.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__text-label{color:#00aeef}.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple::before,.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple::after{background-color:#00aeef}.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple:hover::before{opacity:.08}.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded--background-focused::before,.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.24}.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.24}.mdc-tab[id=mdc-tab-3].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.24}.mdc-tab[id=mdc-tab-3] .mdc-tab-indicator .mdc-tab-indicator__content--underline{border-color:#00aeef}.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__text-label{color:#dac200}.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple::before,.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple::after{background-color:#dac200}.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple:hover::before{opacity:.08}.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded--background-focused::before,.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.24}.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.24}.mdc-tab[id=mdc-tab-4].mdc-tab--active .mdc-tab__ripple.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.24}.mdc-tab[id=mdc-tab-4] .mdc-tab-indicator .mdc-tab-indicator__content--underline{border-color:#dac200}.logo-div{background-size:cover;background-position:center;width:50px;height:50px;align-self:center;margin:1%}.hero-image{background-size:cover;background-position:center;background-repeat:no-repeat;position:relative;width:100%;height:85vh;margin-bottom:4%}.hero-text{text-align:center;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);color:#fff;background:none;margin-top:1%;margin-bottom:1%}@media only screen and (max-width: 560px){.hero-text h1{font-size:24px}}footer{display:flex;width:100%;background-color:#666;padding:.5% 0%}footer p{padding-left:1%}.hours-article{display:flex;width:100%;flex-direction:row;justify-content:space-around}.hours-article .article-card{display:flex;flex-direction:column;align-items:center}@media only screen and (max-width: 560px){.hours-article{flex-direction:column}}.manifesto-article{flex-direction:column;font-size:20px}.manifesto-article h3{padding-left:5%;padding-bottom:2%}.manifesto-article p{padding-left:5%;padding-right:5%;padding-top:1%}.manifesto-article ul{padding:1% 5% 2% 6%}.manifesto-article ul li::before{content:"-";color:#00aeef;font-weight:bolder;display:inline-block;width:1em}.contact-article{display:flex;width:100%;flex-direction:row;justify-content:space-around}.contact-article .article-card{display:flex;flex-direction:column;align-items:center}.contact-article svg{width:30px;height:30px;margin-top:2%;margin-left:1%}.contact-form{display:flex;flex-direction:column;justify-content:space-around;align-items:center;width:80%;height:40vh}.contact-form h3{font-size:30px}.contact-form .infoDiv{display:flex;justify-content:space-around;height:50px;width:60%}.contact-form .messageDiv{display:flex;width:80%}.contact-form .messageDiv .input-group{width:50%}.contact-form .input-group{position:relative;margin:40px auto;width:35%}.contact-form .form-control{position:relative;z-index:1;width:100%;height:35px;font-size:16px;border:none;border-bottom:1px solid #d9d9d9;background-color:transparent}.contact-form .form-control+label{position:absolute;top:10px;left:3px;font-size:16px;color:#999;transition:all .2s ease-out}.contact-form .form-control:focus{outline:none;border-width:2px;border-color:#dac200;transition:all .2s ease-out}.contact-form .form-control.has-value+label,.contact-form .form-control:focus+label{top:-15px;color:#dac200;font-size:12px}.contact-form .form-control.has-value:not(:focus)+label{color:#999}.map-container{width:100%;height:40vh;margin:1% 0}.map-display{width:100%;height:100%}.map-frame{width:100%;height:100%;border:0}@media only screen and (max-width: 1065px){.contact-article{flex-direction:column}}@media only screen and (max-width: 560px){.contact-article .article-card{flex-direction:column;padding:3% 0}.contact-article p{margin-left:5%;margin-right:5%}.contact-form h3{margin-top:-25px;margin-bottom:-50px}.contact-form .infoDiv{flex-direction:column;justify-content:flex-start;height:20%;padding:0;margin:0}.contact-form .infoDiv .input-group{margin:3%;width:80%}.contact-form .input-group{margin:1%}.contact-form .messageDiv{flex-direction:column;align-items:center}}button{background-color:#dac200;color:#fff;font-size:14px;text-transform:uppercase;font-weight:500;border:1px solid #dac200;height:36px;padding:0 16px;border-radius:2px;box-shadow:0 1px 3px #999}textarea.form-control{height:120px}select{-webkit-appearance:none;-moz-appearance:none;-ms-appearance:none;appearance:none;outline:0;box-shadow:none;border:0 !important;background-image:none}select::-ms-expand{display:none}.select{position:relative;top:60%;left:550px;display:flex;width:20em;height:3em;line-height:3;background-color:#fff;overflow:hidden;border-radius:.25em}select{flex:1;padding:0 .5em;background-color:#fff;cursor:pointer}option{background-color:#fff;text-decoration-color:#8f0066}.select::after{content:"▼";position:absolute;top:0;right:0;padding:0 1em;background:#fff;cursor:pointer;pointer-events:none;-webkit-transition:.25s all ease;-o-transition:.25s all ease;transition:.25s all ease}.select:hover::after{color:#8f0066}.menus-article{flex-direction:column;width:100%}.menus-article h2{color:#8f0066}.menu-holder{display:flex;flex-direction:column;align-items:center;width:100%}.menu-holder p{display:flex;width:70%;justify-content:center}hr{width:100%;height:1px;background-color:#8f0066;border-color:#8f0066}.menu-div{display:flex;flex-direction:row;flex-wrap:wrap;justify-content:space-between;padding:5%}.menu-item-div{display:flex;flex-direction:column;width:300px;padding:1%}.menu-item-div p{justify-content:flex-start}.menu-item-title-div{display:flex;flex-direction:row;justify-content:space-between}.lunch-menu-div{display:flex;flex-direction:column;align-items:center;padding:1%}.lunch-item-holder{display:flex;flex-wrap:wrap;justify-content:space-between}@media only screen and (max-width: 1395px){.select{left:38%}}@media only screen and (max-width: 1100px){.select{left:32%}}@media only screen and (max-width: 800px){.select{left:26%}}@media only screen and (max-width: 630px){.select{left:20%}}@media only screen and (max-width: 480px){.select{left:14%}}@media only screen and (max-width: 400px){.select{left:5%}}',"/* cyrillic-ext */\n@font-face {\n  font-family: 'Open Sans Condensed';\n  font-style: normal;\n  font-weight: 300;\n  font-display: swap;\n  src: local('Open Sans Condensed Light'), local('OpenSansCondensed-Light'), url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDujMR6WR.woff2) format('woff2');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* cyrillic */\n@font-face {\n  font-family: 'Open Sans Condensed';\n  font-style: normal;\n  font-weight: 300;\n  font-display: swap;\n  src: local('Open Sans Condensed Light'), local('OpenSansCondensed-Light'), url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDuHMR6WR.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* greek-ext */\n@font-face {\n  font-family: 'Open Sans Condensed';\n  font-style: normal;\n  font-weight: 300;\n  font-display: swap;\n  src: local('Open Sans Condensed Light'), local('OpenSansCondensed-Light'), url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDunMR6WR.woff2) format('woff2');\n  unicode-range: U+1F00-1FFF;\n}\n/* greek */\n@font-face {\n  font-family: 'Open Sans Condensed';\n  font-style: normal;\n  font-weight: 300;\n  font-display: swap;\n  src: local('Open Sans Condensed Light'), local('OpenSansCondensed-Light'), url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDubMR6WR.woff2) format('woff2');\n  unicode-range: U+0370-03FF;\n}\n/* vietnamese */\n@font-face {\n  font-family: 'Open Sans Condensed';\n  font-style: normal;\n  font-weight: 300;\n  font-display: swap;\n  src: local('Open Sans Condensed Light'), local('OpenSansCondensed-Light'), url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDurMR6WR.woff2) format('woff2');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* latin-ext */\n@font-face {\n  font-family: 'Open Sans Condensed';\n  font-style: normal;\n  font-weight: 300;\n  font-display: swap;\n  src: local('Open Sans Condensed Light'), local('OpenSansCondensed-Light'), url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDuvMR6WR.woff2) format('woff2');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* latin */\n@font-face {\n  font-family: 'Open Sans Condensed';\n  font-style: normal;\n  font-weight: 300;\n  font-display: swap;\n  src: local('Open Sans Condensed Light'), local('OpenSansCondensed-Light'), url(https://fonts.gstatic.com/s/opensanscondensed/v15/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhDuXMRw.woff2) format('woff2');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n",'//\n// Copyright 2018 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the "Software"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use "@material/animation/variables" as animation-variables;\n@use "@material/density/functions" as density-functions;\n@use "@material/feature-targeting/functions" as feature-targeting-functions;\n@use "@material/feature-targeting/mixins" as feature-targeting-mixins;\n@use "@material/tab-scroller/mixins" as tab-scroller-mixins;\n@use "@material/tab/mixins" as tab-mixins;\n@use "./variables";\n\n@mixin core-styles($query: feature-targeting-functions.all()) {\n  // postcss-bem-linter: define tab-bar\n  .mdc-tab-bar {\n    @include width(100%, $query);\n  }\n\n  @include density(variables.$density-scale, $query: $query);\n  @include stacked-density(variables.$stacked-density-scale, $query: $query);\n  // postcss-bem-linter: end\n}\n\n@mixin width($width, $query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    width: $width;\n  }\n}\n\n///\n/// Sets density scale to default tab bar variant. Use `mdc-tab-bar-stacked-density()` mixin for stacked tab bar\n/// variant.\n///\n/// @param {Number} $density-scale Density scale value. Supported density scales `-4`, `-3`, `-2`, `-1` and `0`.\n///\n@mixin density($density-scale, $query: feature-targeting-functions.all()) {\n  $height: density-functions.prop-value(\n    $density-config: variables.$density-config,\n    $density-scale: $density-scale,\n    $property-name: height,\n  );\n\n  .mdc-tab {\n    @include tab-mixins.height($height, $query: $query);\n  }\n}\n\n///\n/// Sets density scale to stacked tab bar variant.\n///\n/// @param {Number} $density-scale Density scale value. Supported density scales `-4`, `-3`, `-2`, `-1` and `0`.\n///\n@mixin stacked-density(\n  $density-scale,\n  $query: feature-targeting-functions.all()\n) {\n  $height: density-functions.prop-value(\n    $density-config: variables.$stacked-density-config,\n    $density-scale: $density-scale,\n    $property-name: height,\n  );\n\n  .mdc-tab--stacked {\n    @include tab-mixins.height($height, $query: $query);\n  }\n}\n\n///\n/// Sets the CSS transition for the tab scrolling animation. This mixin is a proxy to `mdc-tab-scroller-transition`\n/// mixin.\n///\n/// @param {Number | String} $duration-ms - Duration (in ms) of the animation.\n/// @param {String} $timing-function - Optionally overrides the default animation timing function.\n///\n@mixin tab-scroller-transition(\n  $duration-ms,\n  $timing-function: animation-variables.$standard-curve-timing-function,\n  $query: feature-targeting-functions.all()\n) {\n  .mdc-tab-scroller {\n    @include tab-scroller-mixins.transition(\n      $duration-ms,\n      $timing-function: $timing-function,\n      $query: $query\n    );\n  }\n}\n','//\n// Copyright 2018 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the "Software"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use "@material/animation/variables" as animation-variables;\n@use "@material/tab/mixins" as tab-mixins;\n@use "@material/feature-targeting/functions";\n@use "@material/feature-targeting/mixins" as feature-targeting-mixins;\n@use "./variables";\n\n///\n/// Sets the CSS transition for the tab scrolling animation.\n///\n/// @param {Number | String} $duration-ms - Duration (in ms) of the animation.\n/// @param {String} $timing-function - Optionally overrides the default animation timing function.\n///\n@mixin transition(\n  $duration-ms,\n  $timing-function: animation-variables.$standard-curve-timing-function,\n  $query: functions.all()\n) {\n  $feat-animation: functions.create-target($query, animation);\n\n  &.mdc-tab-scroller--animating .mdc-tab-scroller__scroll-content {\n    @include feature-targeting-mixins.targets($feat-animation) {\n      transition: $duration-ms transform $timing-function;\n    }\n  }\n}\n\n@mixin core-styles($query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n  $feat-animation: functions.create-target($query, animation);\n\n  // postcss-bem-linter: define tab-scroller\n  .mdc-tab-scroller {\n    @include transition(\n      $duration-ms: variables.$transition-duration,\n      $query: $query\n    );\n\n    @include feature-targeting-mixins.targets($feat-structure) {\n      overflow-y: hidden;\n    }\n  }\n\n  // Selector for test element used to feature-detect horizontal scrollbar height\n  .mdc-tab-scroller__test {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      position: absolute;\n      top: -9999px;\n      width: 100px;\n      height: 100px;\n      overflow-x: scroll;\n    }\n  }\n\n  .mdc-tab-scroller__scroll-area {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      -webkit-overflow-scrolling: touch;\n      display: flex;\n      overflow-x: hidden;\n    }\n  }\n\n  .mdc-tab-scroller__scroll-area,\n  .mdc-tab-scroller__test {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      &::-webkit-scrollbar {\n        display: none;\n      }\n    }\n  }\n\n  // This modifier class will be added in JS after computing the OS scrollbar size in order to hide the scrollbar.\n  .mdc-tab-scroller__scroll-area--scroll {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      overflow-x: scroll;\n    }\n  }\n\n  .mdc-tab-scroller__scroll-content {\n    @include scroll-content_($query);\n  }\n\n  .mdc-tab-scroller--align-start .mdc-tab-scroller__scroll-content {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      justify-content: flex-start;\n    }\n  }\n\n  .mdc-tab-scroller--align-end .mdc-tab-scroller__scroll-content {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      justify-content: flex-end;\n    }\n  }\n\n  .mdc-tab-scroller--align-center .mdc-tab-scroller__scroll-content {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      justify-content: center;\n    }\n  }\n\n  .mdc-tab-scroller--animating {\n    .mdc-tab-scroller__scroll-area {\n      @include feature-targeting-mixins.targets($feat-animation) {\n        -webkit-overflow-scrolling: auto;\n      }\n    }\n  }\n\n  // postcss-bem-linter: end\n}\n\n//\n// Private\n//\n\n@mixin scroll-content_($query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n  $feat-animation: functions.create-target($query, animation);\n\n  @include tab-mixins.parent-positioning($query);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    display: flex;\n    flex: 1 0 auto;\n    transform: none;\n  }\n\n  @include feature-targeting-mixins.targets($feat-animation) {\n    will-change: transform;\n  }\n}\n','//\n// Copyright 2018 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the "Software"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use "@material/feature-targeting/functions";\n@use "@material/feature-targeting/mixins" as feature-targeting-mixins;\n@use "@material/ripple/mixins" as ripple-mixins;\n@use "@material/theme/mixins" as theme-mixins;\n@use "@material/typography/mixins" as typography-mixins;\n@use "@material/rtl/mixins" as rtl-mixins;\n@use "@material/tab-indicator/mixins" as tab-indicator-mixins;\n@use "./variables";\n\n// Public mixins\n\n@mixin core-styles($query: functions.all()) {\n  @include without-ripple($query);\n  @include ripple($query);\n}\n\n// This API is intended for use by frameworks that may want to separate the ripple-related styles\n// from the other tah styles. It is recommended that most users use `mdc-tab-core-styles` instead.\n@mixin without-ripple($query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n  $feat-animation: functions.create-target($query, animation);\n\n  // postcss-bem-linter: define tab\n\n  .mdc-tab {\n    @include base_($query);\n  }\n\n  .mdc-tab--min-width {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      flex: 0 1 auto;\n    }\n  }\n\n  .mdc-tab__content {\n    @include content_($query);\n  }\n\n  .mdc-tab__text-label {\n    @include feature-targeting-mixins.targets($feat-animation) {\n      transition: 150ms color linear;\n    }\n\n    @include feature-targeting-mixins.targets($feat-structure) {\n      display: inline-block;\n      // Setting line-height here overrides the line-height from the typography\n      // mixin above. The line-height needs to be overridden so that the spacing\n      // between the text label and the icon as well as the text label and the\n      // bottom of the tab remain the same.\n      line-height: 1;\n      z-index: 2;\n    }\n  }\n\n  .mdc-tab__icon {\n    @include feature-targeting-mixins.targets($feat-animation) {\n      transition: 150ms color linear;\n    }\n\n    @include feature-targeting-mixins.targets($feat-structure) {\n      width: variables.$icon-size;\n      height: variables.$icon-size;\n      font-size: variables.$icon-size;\n      z-index: 2;\n    }\n  }\n\n  .mdc-tab--stacked {\n    @include stacked_($query);\n  }\n\n  .mdc-tab--active {\n    @include active_($query);\n  }\n\n  .mdc-tab:not(.mdc-tab--stacked) .mdc-tab__icon + .mdc-tab__text-label {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      @include rtl-mixins.reflexive-box(padding, left, 8px);\n    }\n  }\n\n  // postcss-bem-linter: end\n}\n\n// This API is intended for use by frameworks that may want to separate the ripple-related styles\n// from the other tah styles. It is recommended that most users use `mdc-tab-core-styles` instead.\n@mixin ripple($query: functions.all()) {\n  @include ripple-mixins.common($query); // COPYBARA_COMMENT_THIS_LINE\n\n  .mdc-tab__ripple {\n    @include ripple_($query);\n  }\n}\n\n@mixin horizontal-padding($padding, $query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    padding-right: $padding;\n    padding-left: $padding;\n  }\n}\n\n@mixin text-label-color($color, $query: functions.all()) {\n  $feat-color: functions.create-target($query, color);\n\n  .mdc-tab__text-label {\n    @include feature-targeting-mixins.targets($feat-color) {\n      @include theme-mixins.prop(color, $color);\n    }\n  }\n}\n\n@mixin icon-color($color, $query: functions.all()) {\n  $feat-color: functions.create-target($query, color);\n\n  .mdc-tab__icon {\n    @include feature-targeting-mixins.targets($feat-color) {\n      @include theme-mixins.prop(color, $color);\n\n      fill: currentColor;\n    }\n  }\n}\n\n@mixin states-color($color, $query: functions.all()) {\n  .mdc-tab__ripple {\n    @include ripple-mixins.states($color, $query: $query);\n  }\n}\n\n@mixin ink-color($color, $query: functions.all()) {\n  @include icon-color($color, $query);\n  @include states-color($color, $query);\n  @include text-label-color($color, $query);\n}\n\n@mixin active-text-label-color($color, $query: functions.all()) {\n  &.mdc-tab--active {\n    @include text-label-color($color, $query);\n  }\n}\n\n@mixin active-icon-color($color, $query: functions.all()) {\n  &.mdc-tab--active {\n    @include icon-color($color, $query);\n  }\n}\n\n@mixin active-states-color($color, $query: functions.all()) {\n  &.mdc-tab--active {\n    @include states-color($color, $query);\n  }\n}\n\n@mixin parent-positioning($query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    position: relative;\n  }\n}\n\n@mixin fixed-width($width, $query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    flex: 0 1 $width;\n  }\n}\n\n///\n/// Sets tab height\n///\n/// @param {Number} $height Height value in `px`.\n///\n@mixin height($height, $query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    height: $height;\n  }\n}\n\n///\n/// Sets tab text transform\n///\n/// @param {String} $transform The text-transform property to apply.\n///\n@mixin text-transform($transform, $query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    text-transform: $transform;\n  }\n}\n\n//\n// Private\n//\n\n@mixin base_($query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n\n  @include typography-mixins.typography(button, $query);\n  @include text-label-color(variables.$text-label-color-default, $query);\n  @include icon-color(variables.$icon-color-default, $query);\n  @include horizontal-padding(variables.$horizontal-padding, $query);\n  @include tab-indicator-mixins.surface($query);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    display: flex;\n    flex: 1 0 auto;\n    justify-content: center;\n    box-sizing: border-box;\n    // Explicitly setting margin to 0 is to override safari default margin for button elements.\n    margin: 0;\n    padding-top: 0;\n    padding-bottom: 0;\n    border: none;\n    outline: none;\n    background: none;\n    text-align: center;\n    white-space: nowrap;\n    cursor: pointer;\n    -webkit-appearance: none;\n    z-index: 1;\n\n    // Firefox still draws a dotted border around focused buttons unless specifically overridden.\n    &::-moz-focus-inner {\n      padding: 0;\n      border: 0;\n    }\n  }\n}\n\n@mixin ripple_($query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n\n  @include ripple-mixins.surface($query);\n  @include ripple-mixins.radius-bounded($query: $query);\n  @include ripple-mixins.states($color: primary, $query: $query);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n  }\n}\n\n@mixin content_($query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n\n  @include tab-indicator-mixins.surface($query);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: inherit;\n    pointer-events: none;\n  }\n}\n\n@mixin stacked_($query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    .mdc-tab__content {\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n    }\n\n    .mdc-tab__text-label {\n      padding-top: 6px;\n      padding-bottom: 4px;\n    }\n  }\n}\n\n@mixin active_($query: functions.all()) {\n  $feat-animation: functions.create-target($query, animation);\n\n  @include text-label-color(variables.$text-label-color-active, $query);\n  @include icon-color(variables.$icon-color-active, $query);\n\n  .mdc-tab__text-label,\n  .mdc-tab__icon {\n    @include feature-targeting-mixins.targets($feat-animation) {\n      transition-delay: 100ms;\n    }\n  }\n}\n','//\n// Copyright 2018 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the "Software"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use "@material/animation/variables";\n@use "@material/theme/mixins" as theme-mixins;\n@use "@material/feature-targeting/functions";\n@use "@material/feature-targeting/mixins" as feature-targeting-mixins;\n\n@mixin core-styles($query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n  $feat-animation: functions.create-target($query, animation);\n\n  // postcss-bem-linter: define tab-indicator\n\n  .mdc-tab-indicator {\n    @include base_($query);\n  }\n\n  .mdc-tab-indicator__content {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      transform-origin: left;\n      opacity: 0;\n    }\n  }\n\n  .mdc-tab-indicator__content--underline {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      align-self: flex-end;\n      box-sizing: border-box;\n      width: 100%;\n      border-top-style: solid;\n    }\n  }\n\n  .mdc-tab-indicator__content--icon {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      align-self: center;\n      margin: 0 auto;\n    }\n  }\n\n  .mdc-tab-indicator--active .mdc-tab-indicator__content {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      opacity: 1;\n    }\n  }\n\n  // Slide by default\n  .mdc-tab-indicator .mdc-tab-indicator__content {\n    @include feature-targeting-mixins.targets($feat-animation) {\n      transition: 250ms transform variables.$standard-curve-timing-function;\n    }\n  }\n\n  // --no-transition is applied in cases where styles need to be applied immediately to set up a transition\n  .mdc-tab-indicator--no-transition .mdc-tab-indicator__content {\n    @include feature-targeting-mixins.targets($feat-animation) {\n      transition: none;\n    }\n  }\n\n  .mdc-tab-indicator--fade .mdc-tab-indicator__content {\n    @include feature-targeting-mixins.targets($feat-animation) {\n      transition: 150ms opacity linear;\n    }\n  }\n\n  // postcss-bem-linter: ignore\n  .mdc-tab-indicator--active.mdc-tab-indicator--fade\n    .mdc-tab-indicator__content {\n    @include feature-targeting-mixins.targets($feat-animation) {\n      transition-delay: 100ms;\n    }\n  }\n\n  // postcss-bem-linter: end\n}\n\n@mixin surface($query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    position: relative;\n  }\n}\n\n@mixin underline-color($color, $query: functions.all()) {\n  $feat-color: functions.create-target($query, color);\n\n  .mdc-tab-indicator__content--underline {\n    @include feature-targeting-mixins.targets($feat-color) {\n      @include theme-mixins.prop(border-color, $color);\n    }\n  }\n}\n\n@mixin underline-height($height, $query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n\n  .mdc-tab-indicator__content--underline {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      border-top-width: $height;\n    }\n  }\n}\n\n@mixin underline-top-corner-radius($radius, $query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n\n  .mdc-tab-indicator__content--underline {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      border-top-left-radius: $radius;\n      border-top-right-radius: $radius;\n    }\n  }\n}\n\n@mixin icon-color($color, $query: functions.all()) {\n  $feat-color: functions.create-target($query, color);\n\n  .mdc-tab-indicator__content--icon {\n    @include feature-targeting-mixins.targets($feat-color) {\n      @include theme-mixins.prop(color, $color);\n    }\n  }\n}\n\n@mixin icon-height($height, $query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n\n  .mdc-tab-indicator__content--icon {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      height: $height;\n      font-size: $height;\n    }\n  }\n}\n\n//\n// Private\n//\n\n@mixin base_($query) {\n  $feat-structure: functions.create-target($query, structure);\n\n  @include underline-color(primary, $query);\n  @include icon-color(secondary, $query);\n  @include underline-height(2px, $query);\n  @include icon-height(34px, $query);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    display: flex;\n    position: absolute;\n    top: 0;\n    left: 0;\n    justify-content: center;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    z-index: 1;\n  }\n}\n','//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the "Software"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use "sass:map";\n@use "@material/feature-targeting/functions" as feature-targeting-functions;\n@use "@material/feature-targeting/mixins";\n@use "./custom-properties";\n@use "./gss";\n@use "./variables";\n\n@mixin core-styles($query: feature-targeting-functions.all()) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  :root {\n    @include mixins.targets($feat-color) {\n      @each $style in map.keys(variables.$property-values) {\n        --mdc-theme-#{$style}: #{map.get(variables.$property-values, $style)};\n      }\n    }\n  }\n\n  @each $style in map.keys(variables.$property-values) {\n    @if $style != \'background\' and $style != \'surface\' {\n      .mdc-theme--#{$style} {\n        @include mixins.targets($feat-color) {\n          @include prop(color, $style, true);\n        }\n      }\n    } @else {\n      .mdc-theme--#{$style} {\n        @include mixins.targets($feat-color) {\n          @include prop(background-color, $style);\n        }\n      }\n    }\n  }\n\n  // CSS rules for using primary and secondary (plus light/dark variants) as background colors.\n  @each $style in (\'primary\', \'secondary\') {\n    .mdc-theme--#{$style}-bg {\n      @include mixins.targets($feat-color) {\n        @include prop(background-color, $style, true);\n      }\n    }\n  }\n}\n\n/// Applies a dynamic value to the specified property. This mixin should be used\n/// in theme style mixins when setting properties.\n///\n/// The value may be any of the following:\n/// - a standard CSS value\n/// - a custom property Map, e.g. (varname: --mdc-foo, fallback: blue)\n/// - a Material theme key String, e.g. "primary", "on-primary"\n///\n/// @param {String} $property - the name of the CSS property.\n/// @param {String | Number | Color | List | Map} $value - the property\'s value.\n/// @param {Map} $gss - optional Map of GSS annotations to set.\n/// @param {Bool} $important - set to true to add an `!important` rule. Defaults\n///     to false.\n@mixin property($property, $value, $gss: (), $important: false) {\n  $important-rule: if($important, \'!important\', \'\');\n\n  @if custom-properties.is-custom-prop($value) {\n    // $value is a custom property Map\n    @include custom-properties.apply(\n      $property,\n      $value,\n      $gss: $gss,\n      $important: $important\n    );\n  } @else if map.has-key(variables.$property-values, $value) {\n    // $value is a theme property String\n    $fallback: map.get(variables.$property-values, $value);\n    $custom-prop: custom-properties.create(--mdc-theme-#{$style}, $fallback);\n    @include custom-properties.apply(\n      $property,\n      $custom-prop,\n      $gss: $gss,\n      $important: $important\n    );\n  } @else {\n    // $value is a standard CSS value\n    @include gss.annotate($gss);\n    #{$property}: $value #{$important-rule};\n  }\n}\n\n// Applies the correct theme color style to the specified property.\n// $property is typically color or background-color, but can be any CSS property that accepts color values.\n// $style should be one of the map keys in $mdc-theme-property-values (_variables.scss), or a color value.\n// @deprecated use the `property()` mixin instead\n@mixin prop($property, $style, $important: false) {\n  $important-rule: if($important, \'!important\', \'\');\n\n  @if custom-properties.is-custom-prop($style) {\n    @include custom-properties.apply($property, $style, $important: $important);\n  } @else if variables.is-valid-theme-prop-value_($style) {\n    #{$property}: $style #{$important-rule};\n  } @else {\n    @if not map.has-key(variables.$property-values, $style) {\n      @error "Invalid style: \'#{$style}\'. Choose one of: #{map.keys(variables.$property-values)}";\n    }\n    $value: map.get(variables.$property-values, $style);\n\n    #{$property}: $value #{$important-rule};\n    /* @alternate */\n    #{$property}: var(--mdc-theme-#{$style}, $value) #{$important-rule};\n  }\n}\n','//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the "Software"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use "sass:list";\n@use "sass:map";\n@use "sass:string";\n@use "@material/feature-targeting/functions" as feature-targeting-functions;\n@use "@material/feature-targeting/mixins" as feature-targeting-mixins;\n@use "@material/theme/mixins" as theme-mixins;\n@use "./variables";\n\n@mixin core-styles($query: feature-targeting-functions.all()) {\n  .mdc-typography {\n    @include base($query: $query);\n  }\n\n  @each $style in map.keys(variables.$styles) {\n    .mdc-typography--#{$style} {\n      @include typography($style, $query: $query);\n    }\n  }\n}\n\n@mixin base($query: feature-targeting-functions.all()) {\n  $feat-typography: feature-targeting-functions.create-target(\n    $query,\n    typography\n  );\n\n  @include smooth-font($query: $query);\n  @include feature-targeting-mixins.targets($feat-typography) {\n    @include theme-mixins.prop(\n      font-family,\n      (\n        varname: --mdc-typography-font-family,\n        fallback: map.get(variables.$base, \'font-family\'),\n      )\n    );\n  }\n}\n\n@mixin typography(\n  $style,\n  $query: feature-targeting-functions.all(),\n  $exclude-props: ()\n) {\n  $feat-typography: feature-targeting-functions.create-target(\n    $query,\n    typography\n  );\n  $style-props: map.get(variables.$styles, $style);\n\n  @if not map.has-key(variables.$styles, $style) {\n    @error "Invalid style specified! #{$style} doesn\'t exist. Choose one of #{map.keys(variables.$styles)}";\n  }\n\n  @include smooth-font($query: $query);\n  @include feature-targeting-mixins.targets($feat-typography) {\n    @each $key, $value in $style-props {\n      @if list.index($exclude-props, $key) == null {\n        $fallback: $value;\n        @if $key == \'font-family\' {\n          // Each style has its own font-family custom property, but should\n          // fallback to a generic font-family property. This allows\n          // customizing the font-family for all styles or only specific ones.\n          $fallback: (\n            varname: --mdc-typography-font-family,\n            fallback: $fallback,\n          );\n        }\n\n        @include theme-mixins.prop(\n          $key,\n          (\n            varname: --mdc-typography-#{$style}-#{$key},\n            fallback: $fallback,\n          )\n        );\n      }\n    }\n  }\n}\n\n/// Applies antialiasing via font-smoothing to text.\n@mixin smooth-font($query: feature-targeting-functions.all()) {\n  $feat-typography: feature-targeting-functions.create-target(\n    $query,\n    typography\n  );\n\n  @include feature-targeting-mixins.targets($feat-typography) {\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-font-smoothing: antialiased;\n  }\n}\n\n// Element must be `display: block` or `display: inline-block` for this to work.\n@mixin overflow-ellipsis($query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n  }\n}\n\n/// Sets a container\'s baseline that text content will align to.\n///\n/// If the `$display` is set to a flexbox display, only `$top` baseline may be\n/// set. A separate element must be added as a child of the container with a\n/// `$bottom` baseline.\n///\n/// @param {Number} $top - the distance from the top of the container to the\n///     text\'s baseline.\n/// @param {Number} $bottom - the distance from the text\'s baseline to the\n///     bottom of the container.\n/// @param {String} $display - the display type of the container. May be `flex`,\n///     `inline-flex`, `block`, or `inline-block`.\n@mixin baseline(\n  $top: 0,\n  $bottom: 0,\n  $display: block,\n  $query: feature-targeting-functions.all()\n) {\n  $validDisplayTypes: (flex, inline-flex, block, inline-block);\n\n  @if list.index($validDisplayTypes, $display) == null {\n    @error "mdc-typography: invalid display specified! #{$display} must be one of #{$validDisplayTypes}";\n  }\n\n  $isFlexbox: $display == \'flex\' or $display == \'inline-flex\';\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    display: $display;\n\n    @if $isFlexbox {\n      align-items: baseline;\n    }\n  }\n\n  @if $top > 0 {\n    @include baseline-top($top, $query: $query);\n  }\n\n  @if $bottom > 0 {\n    @if $isFlexbox {\n      @error "mdc-typography: invalid baseline with display type. #{$display} cannot specifiy $bottom. Add a separate child element with its own $bottom.";\n    }\n\n    @include baseline-bottom($bottom, $query: $query);\n  }\n}\n\n/// Sets the baseline of flow text content.\n///\n/// Separate `$top` and `$bottom` baselines may be specified. You should ensure\n/// that the `$top` baseline matches the previous text content\'s $bottom\n/// baseline to ensure text is positioned appropriately.\n///\n/// See go/css-baseline for reference on how this mixin works.\n///\n/// This is intended for text flow content only (e.g. `<h1>`, `<p>`, `<span>`,\n/// or `<div>` with only text content). Use `baseline()` to set the baseline of\n/// containers that are flexbox or have non-flow content children.\n///\n/// @param {Number} $top - the distance from the top of the container to the\n///     text\'s baseline.\n/// @param {Number} $bottom - the distance from the text\'s baseline to the\n///     bottom of the container.\n/// @param {Boolean} $lineHeight - the line-height to use for the text. This\n///     is the distance between baselines of multiple lines of text.\n/// @param {String} $display - the display type of the container. May be `block`\n///     or `inline-block`.\n@mixin text-baseline(\n  $top: 0,\n  $bottom: 0,\n  $display: block,\n  $lineHeight: normal,\n  $query: feature-targeting-functions.all()\n) {\n  $validDisplayTypes: (block, inline-block);\n\n  @if list.index($validDisplayTypes, $display) == null {\n    @error "mdc-typography: invalid display specified! #{$display} must be one of #{$validDisplayTypes}";\n  }\n\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include baseline(\n    $display: $display,\n    $top: $top,\n    $bottom: $bottom,\n    $query: $query\n  );\n  @include feature-targeting-mixins.targets($feat-structure) {\n    @if $top > 0 {\n      margin-top: 0;\n      /* @alternate */\n      line-height: #{$lineHeight};\n    }\n\n    @if $bottom > 0 {\n      margin-bottom: -1 * $bottom;\n    }\n  }\n}\n\n/// Creates a baseline strut from the top of a container. This mixin is for\n/// advanced users, prefer `baseline()`.\n///\n/// @param {Number} $distance - The distance from the top of the container to\n///     the text\'s baseline.\n@mixin baseline-top($distance, $query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  &::before {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      @include baseline-strut_($distance);\n\n      vertical-align: 0;\n    }\n  }\n}\n\n/// Creates a baseline strut from the baseline to the bottom of a container.\n/// This mixin is for advanced users, prefer `baseline()`.\n///\n/// @param {Number} $distance - The distance from the text\'s baseline to the\n///     bottom of the container.\n@mixin baseline-bottom($distance, $query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  &::after {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      @include baseline-strut_($distance);\n\n      vertical-align: -1 * $distance;\n    }\n  }\n}\n\n/// Adds an invisible, zero-width prefix to a container\'s text.\n/// This ensures that the baseline is always where the text would be, instead\n/// of defaulting to the container bottom when text is empty. Do not use this\n/// mixin if the `baseline` mixin is already applied.\n@mixin zero-width-prefix($query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  &::before {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      content: \'\\200b\';\n    }\n  }\n}\n\n@mixin baseline-strut_($distance) {\n  display: inline-block;\n  width: 0;\n  height: $distance;\n  content: \'\';\n}\n',"//\n// Copyright 2020 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n@use \"sass:map\";\n@use \"sass:meta\";\n@use \"./gss\";\n\n/// When true, add an additional property/value declaration before a custom\n/// property's `var()` to support IE. Configure\n/// `@material/theme/custom-properties` with this variable set to false to\n/// disable IE fallback values for custom properties.\n$ie-fallback: true !default;\n\n/// Returns true if the parameter is a custom property Map.\n///\n/// @param {*} $value - the value to test.\n/// @return true if the value is a custom property Map, or false if not.\n@function is-custom-prop($value) {\n  @return meta.type-of($value) == 'map' and map.has-key($value, 'varname');\n}\n\n/// Returns true if $prop1's varname and fallback values are deeply equal to\n/// $prop2's varname and fallback values.\n///\n/// @param {Map} $prop1 - the first value to test.\n/// @param {Map} $prop2 - the second value to test.\n/// @return true if both properties are deeply equal\n@function are-equal($prop1, $prop2) {\n  @return create-var($prop1) == create-var($prop2);\n}\n\n/// Creates a custom property Map.\n///\n/// @param {String} $varname - the custom property name.\n/// @param {String | Number | Map} - the fallback value (may be another custom\n///     property Map). May be null.\n/// @return a custom property Map.\n@function create($varname, $fallback: null) {\n  @return (varname: $varname, fallback: $fallback);\n}\n\n/// Returns the custom property variable name of a custom property Map.\n///\n/// @param {Map} $custom-prop - a custom property Map.\n/// @return the custom property variable name defined by the Map.\n@function get-varname($custom-prop) {\n  @return map.get($custom-prop, 'varname');\n}\n\n/// Returns the fallback value of a custom property Map. May be null if the\n/// custom property does not have a fallback.\n///\n/// @param {Map} $custom-prop - a custom property Map.\n/// @param {Bool} $shallow - if true, return the first fallback value, which\n///     may be another custom property Map. Defaults to false, which will return\n///     the deep final fallback value.\n/// @return the fallback value of a custom property Map. May be null.\n@function get-fallback($custom-prop, $shallow: false) {\n  $fallback: map.get($custom-prop, 'fallback');\n  @if is-custom-prop($fallback) and not $shallow {\n    @return get-fallback($fallback);\n  }\n\n  @return $fallback;\n}\n\n/// Creates a new custom property Map and returns it with the specified new\n/// fallback value.\n///\n/// @param {Map} $custom-prop - the custom property Map to copy.\n/// @param {String | Number | Map} $new-fallback - the new fallback value of the\n///     custom property Map. May be null.\n/// @param {Bool} $shallow - if true, set the first fallback value. Defaults to\n///     false, which will set the deep final fallback value.\n/// @return a new custom property Map with the new fallback value.\n@function set-fallback($custom-prop, $new-fallback, $shallow: false) {\n  $varname: get-varname($custom-prop);\n  $first-fallback: get-fallback($custom-prop, $shallow: true);\n\n  @if is-custom-prop($first-fallback) and not $shallow {\n    // The first fallback is a custom property and $shallow is false. Deeply\n    // set the fallback value of the custom property and get the new custom\n    // property Map returned.\n    $new-fallback: set-fallback($first-fallback, $new-fallback);\n  }\n\n  @return create($varname, $new-fallback);\n}\n\n/// Creates and returns a `var()` function declaration represented by the\n/// provided custom property Map.\n///\n/// @param {Map} $custom-prop - a custom property Map.\n/// @return a `var()` function declaration using the custom property Map's\n///     varname and fallback value.\n@function create-var($custom-prop) {\n  $varname: get-varname($custom-prop);\n  $fallback: get-fallback($custom-prop, $shallow: true);\n\n  @if is-custom-prop($fallback) {\n    @return var($varname, create-var($fallback));\n  } @else if $fallback != null {\n    @return var($varname, $fallback);\n  } @else {\n    @return var($varname);\n  }\n}\n\n/// Applies a custom property value to the specified property.\n///\n/// @param {String} $property - the name of the CSS property.\n/// @param {Map} $custom-prop - a custom property Map for the property's value.\n/// @param {Map} $gss - optional Map of GSS annotations to set.\n/// @param {Bool} $important - set to true to add an `!important` rule. Defaults\n///     to false.\n@mixin apply($property, $custom-prop, $gss: (), $important: false) {\n  @if not is-custom-prop($custom-prop) {\n    @error \"mdc-theme: Invalid custom property: #{$custom-prop}. Must be a Map with 'varname' and 'fallback'.\";\n  }\n\n  $important-rule: if($important, '!important', '');\n\n  $fallback: get-fallback($custom-prop);\n  @if $ie-fallback and $fallback != null {\n    @include gss.annotate($gss);\n    #{$property}: #{$fallback} #{$important-rule};\n\n    // add @alternate to annotations\n    $gss: map.merge(\n      $gss,\n      (\n        alternate: true,\n      )\n    );\n  }\n\n  @include gss.annotate($gss);\n  #{$property}: create-var($custom-prop) #{$important-rule};\n}\n",'//\n// Copyright 2018 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the "Software"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use "@material/theme/variables"; // for mdc-theme-prop-value()\n\n$icon-size: 24px !default;\n$height: 48px !default;\n$stacked-height: 72px !default;\n$horizontal-padding: 24px !default;\n$text-label-opacity: 0.6 !default;\n$icon-opacity: 0.54 !default;\n$text-label-color-default: rgba(\n  variables.prop-value(on-surface),\n  $text-label-opacity\n) !default;\n$icon-color-default: rgba(\n  variables.prop-value(on-surface),\n  $icon-opacity\n) !default;\n$text-label-color-active: primary !default;\n$icon-color-active: primary !default;\n','//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the "Software"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use "sass:list";\n@use "@material/theme/mixins" as theme;\n@use "./variables";\n\n// Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.\n//\n// Usage Example:\n//\n// ```scss\n// .mdc-foo {\n//   position: absolute;\n//   left: 0;\n//\n//   @include rtl {\n//     left: auto;\n//     right: 0;\n//   }\n//\n//   &__bar {\n//     margin-left: 4px;\n//     @include rtl(".mdc-foo") {\n//       margin-left: auto;\n//       margin-right: 4px;\n//     }\n//   }\n// }\n//\n// .mdc-foo--mod {\n//   padding-left: 4px;\n//\n//   @include rtl {\n//     padding-left: auto;\n//     padding-right: 4px;\n//   }\n// }\n// ```\n//\n// Note that this mixin works by checking for an ancestor element with `[dir="rtl"]`.\n// As a result, nested `dir` values are not supported:\n//\n// ```html\n// <html dir="rtl">\n//   \x3c!-- ... --\x3e\n//   <div dir="ltr">\n//     <div class="mdc-foo">Styled incorrectly as RTL!</div>\n//   </div>\n// </html>\n// ```\n//\n// In the future, selectors such as the `:dir` pseudo-class (http://mdn.io/css/:dir) will help us mitigate this.\n@mixin rtl($root-selector: null) {\n  @if (variables.$include) {\n    @if ($root-selector) {\n      @at-root {\n        #{$root-selector}[dir=\'rtl\'] &,\n        [dir=\'rtl\'] #{$root-selector} & {\n          @content;\n        }\n      }\n    } @else {\n      [dir=\'rtl\'] &,\n      &[dir=\'rtl\'] {\n        @content;\n      }\n    }\n  }\n}\n\n// Takes a base box-model property name (`margin`, `border`, `padding`, etc.) along with a\n// default direction (`left` or `right`) and value, and emits rules which apply the given value to the\n// specified direction by default and the opposite direction in RTL.\n//\n// For example:\n//\n// ```scss\n// .mdc-foo {\n//   @include rtl-reflexive-box(margin, left, 8px);\n// }\n// ```\n//\n// is equivalent to:\n//\n// ```scss\n// .mdc-foo {\n//   margin-left: 8px;\n//   margin-right: 0;\n//\n//   @include rtl {\n//     margin-left: 0;\n//     margin-right: 8px;\n//   }\n// }\n// ```\n//\n// whereas:\n//\n// ```scss\n// .mdc-foo {\n//   @include rtl-reflexive-box(margin, right, 8px);\n// }\n// ```\n//\n// is equivalent to:\n//\n// ```scss\n// .mdc-foo {\n//   margin-left: 0;\n//   margin-right: 8px;\n//\n//   @include rtl {\n//     margin-left: 8px;\n//     margin-right: 0;\n//   }\n// }\n// ```\n//\n// You can also pass an optional 4th `$root-selector` argument which will be forwarded to `mdc-rtl`,\n// e.g. `@include rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.\n//\n// Note that this function will always zero out the original value in an RTL context.\n// If you\'re trying to flip the values, use `mdc-rtl-reflexive-property()` instead.\n@mixin reflexive-box(\n  $base-property,\n  $default-direction,\n  $value,\n  $root-selector: null\n) {\n  @if (list.index((right, left), $default-direction) == null) {\n    @error "Invalid default direction: \'#{$default-direction}\'. Please specifiy either \'right\' or \'left\'.";\n  }\n\n  $left-value: $value;\n  $right-value: 0;\n\n  @if ($default-direction == right) {\n    $left-value: 0;\n    $right-value: $value;\n  }\n\n  @include reflexive-property(\n    $base-property,\n    $left-value,\n    $right-value,\n    $root-selector\n  );\n}\n\n// Takes a base property and emits rules that assign <base-property>-left to <left-value> and\n// <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.\n// For example:\n//\n// ```scss\n// .mdc-foo {\n//   @include rtl-reflexive-property(margin, auto, 12px);\n// }\n// ```\n//\n// is equivalent to:\n//\n// ```scss\n// .mdc-foo {\n//   margin-left: auto;\n//   margin-right: 12px;\n//\n//   @include rtl {\n//     margin-left: 12px;\n//     margin-right: auto;\n//   }\n// }\n// ```\n//\n// An optional 4th `$root-selector` argument can be given, which will be passed to `mdc-rtl`.\n@mixin reflexive-property(\n  $base-property,\n  $left-value,\n  $right-value,\n  $root-selector: null\n) {\n  $prop-left: #{$base-property}-left;\n  $prop-right: #{$base-property}-right;\n\n  @include reflexive(\n    $prop-left,\n    $left-value,\n    $prop-right,\n    $right-value,\n    $root-selector\n  );\n}\n\n// Takes an argument specifying a horizontal position property (either "left" or "right") as well\n// as a value, and applies that value to the specified position in a LTR context, and flips it in a\n// RTL context. For example:\n//\n// ```scss\n// .mdc-foo {\n//   @include rtl-reflexive-position(left, 0);\n// }\n// ```\n//\n// is equivalent to:\n//\n// ```scss\n// .mdc-foo {\n//   left: 0;\n//   right: initial;\n//\n//   @include rtl {\n//     left: initial;\n//     right: 0;\n//   }\n// }\n// ```\n//\n// An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.\n@mixin reflexive-position($position-property, $value, $root-selector: null) {\n  @if (list.index((right, left), $position-property) == null) {\n    @error "Invalid position #{position-property}. Please specifiy either right or left";\n  }\n\n  // TODO: "initial" is not supported in IE 11. https://caniuse.com/#feat=css-initial-value\n  $left-value: $value;\n  $right-value: initial;\n\n  @if ($position-property == right) {\n    $right-value: $value;\n    $left-value: initial;\n  }\n\n  @include reflexive(left, $left-value, right, $right-value, $root-selector);\n}\n\n// Takes pair of properties with values as arguments and flips it in RTL context.\n// For example:\n//\n// ```scss\n// .mdc-foo {\n//   @include rtl-reflexive(left, 2px, right, 5px);\n// }\n// ```\n//\n// is equivalent to:\n//\n// ```scss\n// .mdc-foo {\n//   left: 2px;\n//   right: 5px;\n//\n//   @include rtl {\n//     right: 2px;\n//     left: 5px;\n//   }\n// }\n// ```\n//\n// An optional fifth `$root-selector` argument may also be given, which is passed to `mdc-rtl`.\n@mixin reflexive(\n  $left-property,\n  $left-value,\n  $right-property,\n  $right-value,\n  $root-selector: null\n) {\n  @include property_($left-property, $left-value);\n  @include property_($right-property, $right-value);\n\n  @include rtl($root-selector) {\n    @include property_($left-property, $right-value);\n    @include property_($right-property, $left-value);\n  }\n}\n\n///\n/// Adds `@noflip` annotation when `$mdc-rtl-include` is true.\n///\n/// @param {String} $property\n/// @param {String} $value\n/// @access private\n///\n@mixin property_($property, $value) {\n  @include theme.property(\n    $property,\n    $value,\n    $gss: (noflip: variables.$include)\n  );\n}\n','//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the "Software"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n// MDC Ripple keyframes are split into their own file so that _mixins.scss can rely on them.\n\n@use "@material/animation/variables";\n@use "./variables" as variables2;\n\n@mixin keyframes_ {\n  @keyframes mdc-ripple-fg-radius-in {\n    from {\n      animation-timing-function: variables.$standard-curve-timing-function;\n      // NOTE: For these keyframes, we do not need custom property fallbacks because they are only\n      // used in conjunction with `.mdc-ripple-upgraded`. Since MDCRippleFoundation checks to ensure\n      // that custom properties are supported within the browser before adding this class, we can\n      // safely use them without a fallback.\n      transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1);\n    }\n\n    to {\n      transform: translate(var(--mdc-ripple-fg-translate-end, 0))\n        scale(var(--mdc-ripple-fg-scale, 1));\n    }\n  }\n\n  @keyframes mdc-ripple-fg-opacity-in {\n    from {\n      animation-timing-function: linear;\n      opacity: 0;\n    }\n\n    to {\n      opacity: var(--mdc-ripple-fg-opacity, 0);\n    }\n  }\n\n  @keyframes mdc-ripple-fg-opacity-out {\n    from {\n      animation-timing-function: linear;\n      opacity: var(--mdc-ripple-fg-opacity, 0);\n    }\n\n    to {\n      opacity: 0;\n    }\n  }\n}\n','//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the "Software"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n$deceleration-curve-timing-function: cubic-bezier(0, 0, 0.2, 1) !default;\n$standard-curve-timing-function: cubic-bezier(0.4, 0, 0.2, 1) !default;\n$acceleration-curve-timing-function: cubic-bezier(0.4, 0, 1, 1) !default;\n$sharp-curve-timing-function: cubic-bezier(0.4, 0, 0.6, 1) !default;\n',"//\n// Copyright 2016 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use \"sass:color\";\n@use \"sass:map\";\n@use \"@material/animation/functions\" as functions2;\n@use \"@material/animation/variables\" as variables2;\n@use \"@material/base/mixins\" as base-mixins;\n@use \"@material/feature-targeting/functions\" as feature-targeting-functions;\n@use \"@material/feature-targeting/mixins\" as feature-targeting-mixins;\n@use \"@material/theme/mixins\" as theme-mixins;\n@use \"./functions\";\n@use \"./keyframes\";\n@use \"./variables\";\n@use \"@material/theme/variables\" as theme-variables;\n\n@mixin core-styles($query: feature-targeting-functions.all()) {\n  // postcss-bem-linter: define ripple-surface\n\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  .mdc-ripple-surface {\n    @include surface($query: $query);\n    @include states($query: $query);\n    @include radius-bounded($query: $query);\n\n    @include feature-targeting-mixins.targets($feat-structure) {\n      position: relative;\n      outline: none;\n      overflow: hidden;\n    }\n\n    &[data-mdc-ripple-is-unbounded] {\n      @include radius-unbounded($query: $query);\n\n      @include feature-targeting-mixins.targets($feat-structure) {\n        overflow: visible;\n      }\n    }\n\n    &--primary {\n      @include states(primary, $query: $query);\n    }\n\n    &--accent {\n      @include states(secondary, $query: $query);\n    }\n  }\n\n  // postcss-bem-linter: end\n}\n\n@mixin common($query: feature-targeting-functions.all()) {\n  $feat-animation: feature-targeting-functions.create-target($query, animation);\n\n  // Ensure that styles needed by any component using MDC Ripple are emitted, but only once.\n  // (Every component using MDC Ripple imports these mixins, but doesn't necessarily import\n  // mdc-ripple.scss.)\n  @include feature-targeting-mixins.targets($feat-animation) {\n    @include base-mixins.emit-once('mdc-ripple/common/animation') {\n      @include keyframes.keyframes_;\n    }\n  }\n}\n\n@mixin surface($query: feature-targeting-functions.all(), $ripple-target: '&') {\n  $feat-animation: feature-targeting-functions.create-target($query, animation);\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    --mdc-ripple-fg-size: 0;\n    --mdc-ripple-left: 0;\n    --mdc-ripple-top: 0;\n    --mdc-ripple-fg-scale: 1;\n    --mdc-ripple-fg-translate-end: 0;\n    --mdc-ripple-fg-translate-start: 0;\n\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n    // !!DO NOT REMOVE!! mdc-ripple-will-change-replacer\n  }\n\n  #{$ripple-target}::before,\n  #{$ripple-target}::after {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      position: absolute;\n      border-radius: 50%;\n      opacity: 0;\n      pointer-events: none;\n      content: '';\n    }\n  }\n\n  #{$ripple-target}::before {\n    @include feature-targeting-mixins.targets($feat-animation) {\n      // Also transition background-color to avoid unnatural color flashes when toggling activated/selected state\n      transition: opacity variables.$states-wash-duration linear,\n        background-color variables.$states-wash-duration linear;\n    }\n\n    @include feature-targeting-mixins.targets($feat-structure) {\n      z-index: 1; // Ensure that the ripple wash for hover/focus states is displayed on top of positioned child elements\n    }\n  }\n\n  // Common styles for upgraded surfaces (some of these depend on custom properties set via JS or other mixins)\n\n  &.mdc-ripple-upgraded {\n    #{$ripple-target}::before {\n      @include feature-targeting-mixins.targets($feat-structure) {\n        transform: scale(var(--mdc-ripple-fg-scale, 1));\n      }\n    }\n\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-structure) {\n        top: 0;\n        /* @noflip */\n        left: 0;\n        transform: scale(0);\n        transform-origin: center center;\n      }\n    }\n  }\n\n  &.mdc-ripple-upgraded--unbounded {\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-structure) {\n        top: var(--mdc-ripple-top, 0);\n        /* @noflip */\n        left: var(--mdc-ripple-left, 0);\n      }\n    }\n  }\n\n  &.mdc-ripple-upgraded--foreground-activation {\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-animation) {\n        animation: mdc-ripple-fg-radius-in variables.$translate-duration\n            forwards,\n          mdc-ripple-fg-opacity-in variables.$fade-in-duration forwards;\n      }\n    }\n  }\n\n  &.mdc-ripple-upgraded--foreground-deactivation {\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-animation) {\n        animation: mdc-ripple-fg-opacity-out variables.$fade-out-duration;\n      }\n\n      @include feature-targeting-mixins.targets($feat-structure) {\n        // Retain transform from mdc-ripple-fg-radius-in activation\n        transform: translate(var(--mdc-ripple-fg-translate-end, 0))\n          scale(var(--mdc-ripple-fg-scale, 1));\n      }\n    }\n  }\n}\n\n@mixin states-base-color(\n  $color,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  #{$ripple-target}::before,\n  #{$ripple-target}::after {\n    @include feature-targeting-mixins.targets($feat-color) {\n      @if color.alpha(theme-variables.prop-value($color)) > 0 {\n        @include theme-mixins.prop(background-color, $color);\n      } @else {\n        // If a color with 0 alpha is specified, don't render the ripple pseudo-elements at all.\n        // This avoids unnecessary transitions and overflow.\n        content: none;\n      }\n    }\n  }\n}\n\n///\n/// Customizes ripple opacities in `hover`, `focus`, or `press` states\n/// @param {map} $opacity-map - map specifying custom opacity of zero or more states\n/// @param {bool} $has-nested-focusable-element - whether the component contains a focusable element in the root\n/// @param {string} $ripple-target - the optional selector for the ripple element\n///\n@mixin states-opacities(\n  $opacity-map: (),\n  $has-nested-focusable-element: false,\n  $ripple-target: '&',\n  $query: feature-targeting-functions.all()\n) {\n  // Ensure sufficient specificity to override base state opacities\n  @if map.has-key($opacity-map, hover) {\n    @include states-hover-opacity(\n      map.get($opacity-map, hover),\n      $ripple-target: $ripple-target,\n      $query: $query\n    );\n  }\n\n  @if map.has-key($opacity-map, focus) {\n    @include states-focus-opacity(\n      map.get($opacity-map, focus),\n      $ripple-target: $ripple-target,\n      $has-nested-focusable-element: $has-nested-focusable-element,\n      $query: $query\n    );\n  }\n\n  @if map.has-key($opacity-map, press) {\n    @include states-press-opacity(\n      map.get($opacity-map, press),\n      $ripple-target: $ripple-target,\n      $query: $query\n    );\n  }\n}\n\n@mixin states-hover-opacity(\n  $opacity,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  // Background wash styles, for both CSS-only and upgraded stateful surfaces\n  &:hover {\n    #{$ripple-target}::before {\n      // Opacity falls under color because the chosen opacity is color-dependent in typical usage\n      @include feature-targeting-mixins.targets($feat-color) {\n        opacity: $opacity;\n      }\n    }\n  }\n}\n\n@mixin states-focus-opacity(\n  $opacity,\n  $has-nested-focusable-element: false,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  // Focus overrides hover by reusing the ::before pseudo-element.\n  // :focus-within generally works on non-MS browsers and matches when a *child* of the element has focus.\n  // It is useful for cases where a component has a focusable element within the root node, e.g. text field,\n  // but undesirable in general in case of nested stateful components.\n  // We use a modifier class for JS-enabled surfaces to support all use cases in all browsers.\n  @if $has-nested-focusable-element {\n    // JS-enabled selectors.\n    &.mdc-ripple-upgraded--background-focused,\n    &.mdc-ripple-upgraded:focus-within,\n    // CSS-only selectors.\n    &:not(.mdc-ripple-upgraded):focus,\n    &:not(.mdc-ripple-upgraded):focus-within {\n      #{$ripple-target}::before {\n        @include states-focus-opacity-properties_(\n          $opacity: $opacity,\n          $query: $query\n        );\n      }\n    }\n  } @else {\n    // JS-enabled selectors.\n    &.mdc-ripple-upgraded--background-focused,\n    // CSS-only selectors.\n    &:not(.mdc-ripple-upgraded):focus {\n      #{$ripple-target}::before {\n        @include states-focus-opacity-properties_(\n          $opacity: $opacity,\n          $query: $query\n        );\n      }\n    }\n  }\n}\n\n@mixin states-focus-opacity-properties_($opacity, $query) {\n  $feat-animation: feature-targeting-functions.create-target($query, animation);\n  // Opacity falls under color because the chosen opacity is color-dependent in typical usage\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  // Note that this duration is only effective on focus, not blur\n  @include feature-targeting-mixins.targets($feat-animation) {\n    transition-duration: 75ms;\n  }\n\n  @include feature-targeting-mixins.targets($feat-color) {\n    opacity: $opacity;\n  }\n}\n\n@mixin states-press-opacity(\n  $opacity,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  $feat-animation: feature-targeting-functions.create-target($query, animation);\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  // Styles for non-upgraded (CSS-only) stateful surfaces\n\n  &:not(.mdc-ripple-upgraded) {\n    // Apply press additively by using the ::after pseudo-element\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-animation) {\n        transition: opacity variables.$fade-out-duration linear;\n      }\n    }\n\n    &:active {\n      #{$ripple-target}::after {\n        @include feature-targeting-mixins.targets($feat-animation) {\n          transition-duration: variables.$fade-in-duration;\n        }\n\n        // Opacity falls under color because the chosen opacity is color-dependent in typical usage\n        @include feature-targeting-mixins.targets($feat-color) {\n          opacity: $opacity;\n        }\n      }\n    }\n  }\n\n  &.mdc-ripple-upgraded {\n    @include feature-targeting-mixins.targets($feat-color) {\n      --mdc-ripple-fg-opacity: #{$opacity};\n    }\n  }\n}\n\n// Simple mixin for base states which automatically selects opacity values based on whether the ink color is\n// light or dark.\n@mixin states(\n  $color: theme-variables.prop-value(on-surface),\n  $has-nested-focusable-element: false,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  @include states-interactions_(\n    $color: $color,\n    $has-nested-focusable-element: $has-nested-focusable-element,\n    $query: $query,\n    $ripple-target: $ripple-target\n  );\n}\n\n// Simple mixin for activated states which automatically selects opacity values based on whether the ink color is\n// light or dark.\n@mixin states-activated(\n  $color,\n  $has-nested-focusable-element: false,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n  $activated-opacity: functions.states-opacity($color, activated);\n\n  &--activated {\n    // Stylelint seems to think that '&' qualifies as a type selector here?\n    // stylelint-disable-next-line selector-max-type\n    #{$ripple-target}::before {\n      // Opacity falls under color because the chosen opacity is color-dependent.\n      @include feature-targeting-mixins.targets($feat-color) {\n        opacity: $activated-opacity;\n      }\n    }\n\n    @include states-interactions_(\n      $color: $color,\n      $has-nested-focusable-element: $has-nested-focusable-element,\n      $opacity-modifier: $activated-opacity,\n      $query: $query,\n      $ripple-target: $ripple-target\n    );\n  }\n}\n\n// Simple mixin for selected states which automatically selects opacity values based on whether the ink color is\n// light or dark.\n@mixin states-selected(\n  $color,\n  $has-nested-focusable-element: false,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n  $selected-opacity: functions.states-opacity($color, selected);\n\n  &--selected {\n    // stylelint-disable-next-line selector-max-type\n    #{$ripple-target}::before {\n      // Opacity falls under color because the chosen opacity is color-dependent.\n      @include feature-targeting-mixins.targets($feat-color) {\n        opacity: $selected-opacity;\n      }\n    }\n\n    @include states-interactions_(\n      $color: $color,\n      $has-nested-focusable-element: $has-nested-focusable-element,\n      $opacity-modifier: $selected-opacity,\n      $query: $query,\n      $ripple-target: $ripple-target\n    );\n  }\n}\n\n@mixin radius-bounded(\n  $radius: 100%,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  $feat-struture: feature-targeting-functions.create-target($query, structure);\n\n  #{$ripple-target}::before,\n  #{$ripple-target}::after {\n    @include feature-targeting-mixins.targets($feat-struture) {\n      top: calc(50% - #{$radius});\n      /* @noflip */\n      left: calc(50% - #{$radius});\n      width: $radius * 2;\n      height: $radius * 2;\n    }\n  }\n\n  &.mdc-ripple-upgraded {\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-struture) {\n        width: var(--mdc-ripple-fg-size, $radius);\n        height: var(--mdc-ripple-fg-size, $radius);\n      }\n    }\n  }\n}\n\n@mixin radius-unbounded(\n  $radius: 100%,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  $feat-struture: feature-targeting-functions.create-target($query, structure);\n\n  #{$ripple-target}::before,\n  #{$ripple-target}::after {\n    @include feature-targeting-mixins.targets($feat-struture) {\n      top: calc(50% - #{$radius / 2});\n      /* @noflip */\n      left: calc(50% - #{$radius / 2});\n      width: $radius;\n      height: $radius;\n    }\n  }\n\n  &.mdc-ripple-upgraded {\n    #{$ripple-target}::before,\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-struture) {\n        top: var(--mdc-ripple-top, calc(50% - #{$radius / 2}));\n        /* @noflip */\n        left: var(--mdc-ripple-left, calc(50% - #{$radius / 2}));\n        width: var(--mdc-ripple-fg-size, $radius);\n        height: var(--mdc-ripple-fg-size, $radius);\n      }\n    }\n\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-struture) {\n        width: var(--mdc-ripple-fg-size, $radius);\n        height: var(--mdc-ripple-fg-size, $radius);\n      }\n    }\n  }\n}\n\n@mixin states-interactions_(\n  $color,\n  $has-nested-focusable-element,\n  $opacity-modifier: 0,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  @include target-selector($ripple-target) {\n    @include states-base-color($color, $query);\n  }\n\n  $opacity-map: (\n    hover: functions.states-opacity($color, hover) + $opacity-modifier,\n    focus: functions.states-opacity($color, focus) + $opacity-modifier,\n    press: functions.states-opacity($color, press) + $opacity-modifier,\n  );\n\n  @include states-opacities(\n    $opacity-map,\n    $has-nested-focusable-element: $has-nested-focusable-element,\n    $ripple-target: $ripple-target,\n    $query: $query\n  );\n}\n\n// Wraps content in the `ripple-target` selector if it exists.\n@mixin target-selector($ripple-target: '&') {\n  @if $ripple-target == '&' {\n    @content;\n  } @else {\n    #{$ripple-target} {\n      @content;\n    }\n  }\n}\n\n// Common styles for a ripple target element.\n// Used for components which have an inner ripple target element.\n@mixin target-common($query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    // Necessary for clicks on other inner elements (e.g. close icon in chip)\n    // to go through.\n    pointer-events: none;\n  }\n}\n",'//\n// Copyright 2016 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the "Software"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n$fade-in-duration: 75ms !default;\n$fade-out-duration: 150ms !default;\n$translate-duration: 225ms !default;\n$states-wash-duration: 15ms !default;\n\n// Notes on states:\n// * focus takes precedence over hover (i.e. if an element is both focused and hovered, only focus value applies)\n// * press state applies to a separate pseudo-element, so it has an additive effect on top of other states\n// * selected/activated are applied additively to hover/focus via calculations at preprocessing time\n\n$dark-ink-opacities: (\n  hover: 0.04,\n  focus: 0.12,\n  press: 0.12,\n  selected: 0.08,\n  activated: 0.12,\n) !default;\n\n$light-ink-opacities: (\n  hover: 0.08,\n  focus: 0.24,\n  press: 0.24,\n  selected: 0.16,\n  activated: 0.24,\n) !default;\n\n// Legacy\n\n$pressed-dark-ink-opacity: 0.16 !default;\n$pressed-light-ink-opacity: 0.32 !default;\n',"html {\n  height: 100%;\n  width: 100%;\n  font-family: $main-font;\n  font-weight: bold;\n  scroll-behavior: smooth;\n}\nbody {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.mdc-tab-bar {\n  position: fixed;\n  top: 0;\n  z-index:1;\n  background: white;\n}\n\narticle {\n  display: flex;\n  font-size: 20px;\n  h2 {\n    font-size: 40px;\n\n  }\n  h3 {\n    font-size: 30px;\n\n  }\n  pre {\n    font-family: $main-font;\n  }\n\n}\n\n\n#content {\n  margin-top: 48px;\n  max-width: 1400px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n","@import './font';\n\n$main-font: 'Open Sans Condensed';\n$tablet-width: 768px;\n$desktop-width: 1500px;\n",".logo-div {\n  background-size: cover;\n  background-position: center;\n  width: 50px;\n  height: 50px;\n  align-self: center;\n  margin: 1%;\n}\n",".hero-image {\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  position: relative;\n  width: 100%;\n  height: 85vh;\n  margin-bottom: 4%;\n}\n\n.hero-text {\n  text-align: center;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: white;\n  background: none;\n  margin-top: 1%;\n  margin-bottom: 1%;\n}\n\n@media only screen and (max-width: 560px) {\n  .hero-text {\n    h1 {\n      font-size: 24px;\n    }\n  }\n}\n","footer {\n  display: flex;\n  width: 100%;\n  background-color: $grey;\n  padding: 0.5% 0%;\n  p {\n    padding-left: 1%;\n  }\n}\n","$red: rgb(164,17,9);\n$green: rgb(218,194,0);\n$blue: rgb(0,174,239);\n$purple: rgb(143,0,102);\n$grey: rgb(102,102,102);\n",".hours-article {\n  display: flex;\n  width: 100%;\n  flex-direction: row;\n  justify-content: space-around;\n  .article-card {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n}\n\n\n@media only screen and (max-width: 560px) {\n.hours-article {\n    flex-direction: column;\n  }\n}\n",'.manifesto-article {\n  flex-direction: column;\n  font-size: 20px;\n  h3 {\n    padding-left: 5%;\n    padding-bottom: 2%;\n  }\n  p {\n    padding-left: 5%;\n    padding-right: 5%;\n    padding-top: 1%;\n  }\n\n  ul {\n    padding: 1% 5% 2% 6%;\n  }\n\n  ul li::before {\n    content: "-";\n    color: $blue;\n    font-weight: bolder;\n    display: inline-block;\n    /* Needed to add space between the bullet and the text */\n    width: 1em;\n  }\n}\n',"@import '../vars/colors.scss';\n\n.contact-article {\n  display: flex;\n  width: 100%;\n  flex-direction: row;\n  justify-content: space-around;\n\n  .article-card {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  svg {\n    width: 30px;\n    height: 30px;\n    margin-top: 2%;\n    margin-left: 1%;\n  }\n}\n\n.contact-form {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  width: 80%;\n  height: 40vh;\n\n  h3 {\n    font-size: 30px;\n  }\n\n  .infoDiv {\n    display: flex;\n    justify-content: space-around;\n    height: 50px;\n    width: 60%;\n  }\n\n  .messageDiv {\n    display: flex;\n    width: 80%;\n    .input-group {\n      width: 50%;\n    }\n  }\n\n  .input-group {\n    position: relative;\n    margin: 40px auto;\n    width: 35%;\n  }\n\n\n  .form-control {\n    position: relative;\n    z-index: 1;\n    width: 100%;\n    height: 35px;\n    font-size: 16px;\n    border: none;\n    border-bottom: 1px solid lighten(black, 85%);\n    background-color: transparent;\n\n    & + label {\n      position: absolute;\n      top: 10px;\n      left: 3px;\n      font-size: 16px;\n      color: lighten(black, 60%);\n      transition: all 0.2s ease-out;\n    }\n\n    &:focus {\n      outline: none;\n      border-width: 2px;\n      border-color: $green;\n      transition: all 0.2s ease-out;\n    }\n\n    &.has-value + label,\n    &:focus + label {\n      top: -15px;\n      color: $green;\n      font-size: 12px;\n    }\n\n    &.has-value:not(:focus) + label {\n      color: lighten(black, 60%);\n    }\n  }\n}\n\n.map-container {\n  width: 100%;\n  height: 40vh;\n  margin: 1% 0;\n}\n.map-display {\n  width: 100%;\n  height: 100%;\n}\n.map-frame {\n  width: 100%;\n  height: 100%;\n  border: 0;\n}\n\n\n\n@media only screen and (max-width: 1065px) {\n  .contact-article {\n    flex-direction: column;\n  }\n}\n@media only screen and (max-width: 560px) {\n  .contact-article {\n    .article-card {\n      flex-direction: column;\n      padding: 3% 0;\n    }\n\n    p {\n      margin-left: 5%;\n      margin-right: 5%;\n    }\n  }\n\n  .contact-form {\n    h3 {\n      margin-top: -25px;\n      margin-bottom: -50px;\n    }\n\n    .infoDiv {\n      flex-direction: column;\n      justify-content: flex-start;\n      height: 20%;\n      padding: 0;\n      margin: 0;\n\n      .input-group {\n        margin: 3%;\n        width: 80%;\n      }\n    }\n\n    .input-group {\n      margin: 1%;\n    }\n\n    .messageDiv {\n      flex-direction: column;\n      align-items: center;\n    }\n  }\n}\nbutton{\n    background-color: $green;\n    color:white;\n    font-size:14px;\n    text-transform:uppercase;\n    font-weight:500;\n    border:1px solid $green;\n    height:36px;\n    padding:0 16px;\n    border-radius:2px;\n    box-shadow:0 1px 3px lighten(black, 60%);\n}\n\ntextarea.form-control{\n  height:120px;\n}\n","@import '../vars/colors.scss';\n\n// Dropdown menu styling-----------------\n/* Reset Select */\nselect {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  -ms-appearance: none;\n  appearance: none;\n  outline: 0;\n  box-shadow: none;\n  border: 0 !important;\n  background-image: none;\n}\n/* Remove IE arrow */\nselect::-ms-expand {\n  display: none;\n}\n/* Custom Select */\n.select {\n  position: relative;\n  top: 60%;\n  left: 550px;\n  display: flex;\n  width: 20em;\n  height: 3em;\n  line-height: 3;\n  background-color: white;\n  overflow: hidden;\n  border-radius: .25em;\n}\nselect {\n  flex: 1;\n  padding: 0 .5em;\n  background-color: white;\n  cursor: pointer;\n}\noption {\n  background-color: white;\n  text-decoration-color: $purple;\n}\n/* Arrow */\n.select::after {\n  content: '\\25BC';\n  position: absolute;\n  top: 0;\n  right: 0;\n  padding: 0 1em;\n  background: white;\n  cursor: pointer;\n  pointer-events: none;\n  -webkit-transition: .25s all ease;\n  -o-transition: .25s all ease;\n  transition: .25s all ease;\n}\n/* Transition */\n.select:hover::after {\n  color: $purple;\n}\n// end of dropdown menu style---------------------------------------\n\n\n// Menus article, holder, and items--------------------------------\n.menus-article {\n  flex-direction: column;\n  width: 100%;\n  h2 {\n    color: $purple;\n  }\n}\n\n\n.menu-holder {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  p {\n    display: flex;\n    width: 70%;\n    justify-content: center;\n  }\n}\nhr {\n  width: 100%;\n  height: 1px;\n  background-color: $purple;\n  border-color: $purple;\n}\n.menu-div {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  padding: 5%;\n}\n.menu-item-div {\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  padding: 1%;\n  p {\n    justify-content: flex-start;\n  }\n}\n.menu-item-title-div {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n}\n.lunch-menu-div {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 1%;\n}\n.lunch-item-holder {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n}\n\n\n\n// Media queries (mostly to center dropdown menu)\n@media only screen and (max-width: 1395px) {\n  .select {\n    left: 38%;\n  }\n}\n@media only screen and (max-width: 1100px) {\n  .select {\n    left: 32%;\n  }\n}\n@media only screen and (max-width: 800px) {\n  .select {\n    left: 26%;\n  }\n}\n@media only screen and (max-width: 630px) {\n  .select {\n    left: 20%;\n  }\n}\n@media only screen and (max-width: 480px) {\n  .select {\n    left: 14%;\n  }\n}\n@media only screen and (max-width: 400px) {\n  .select {\n    left: 5%;\n  }\n}\n"],sourceRoot:""}]),t.default=i},function(e,t,n){"use strict";n.r(t);var a=(e,t)=>{let n=document.createElement("button");n.setAttribute("class","mdc-tab"),n.setAttribute("role","tab"),n.setAttribute("tabindex",t);let a=document.createElement("span");a.setAttribute("class","mdc-tab__content");let i=document.createElement("span");i.setAttribute("class","mdc-tab__text-label"),i.innerHTML=e,a.appendChild(i);let r=document.createElement("span");r.setAttribute("class","mdc-tab-indicator");let o=document.createElement("span");o.setAttribute("class","mdc-tab-indicator__content mdc-tab-indicator__content--underline"),r.appendChild(o);let s=document.createElement("span");return s.setAttribute("class","mdc-tab__ripple"),n.appendChild(a),n.appendChild(r),n.appendChild(s),n};var i=e=>{let t=document.createElement("div");t.setAttribute("class","mdc-tab-bar"),t.setAttribute("role","tablist");let n=document.createElement("div");n.setAttribute("class","mdc-tab-scroller");let i=document.createElement("div");i.setAttribute("class","mdc-tab-scroller__scroll-area");let r=document.createElement("div");r.setAttribute("class","mdc-tab-scroller__scroll-content");let o=a("hours",0),s=a("menus",1),c=a("manifesto",2),l=a("contact",3);r.appendChild(o),r.appendChild(s),r.appendChild(c),r.appendChild(l),i.appendChild(r),n.appendChild(i),t.appendChild(n),e.appendChild(t)};const r=e=>{document.querySelector("footer").style.color=e};var o=n.p+"e869dc3ddbf923b2254c19dd55312128.jpg";const s=e=>{let t=document.createElement("article");t.setAttribute("class","article"),e.appendChild(t)},c=(e,t,n)=>{const a=document.createElement("div");a.setAttribute("class","article-card");const i=document.createElement("h3"),r=document.createElement("pre");return i.innerHTML=e,r.innerHTML=t,i.style.color=n,a.appendChild(i),a.appendChild(r),a},l=(e,t)=>{let n=document.querySelector("article"),a=document.createElement("h3");a.innerHTML=" - "+e+" - ",a.style.color=t,n.appendChild(a)},d=["rgb(164,17,9)","rgb(143,0,102)","rgb(0,174,239)","rgb(218,194,0)"],p=e=>{if((e-=1)>=0&&e<=3)return d[e]};var u=e=>{let t=document.createElement("pre");t="                       Tuesday:\n           11:30 a.m. – 2:30 p.m.\n\n             Wed, Thurs, Fri, Sat:\n               11:30 a.m. – LATE\n\nHappy Hour: 2:30 p.m. – 4:30 p.m.";let n=c("- Hours -","                       Tuesday:\n           11:30 a.m. – 2:30 p.m.\n\n             Wed, Thurs, Fri, Sat:\n               11:30 a.m. – LATE\n\nHappy Hour: 2:30 p.m. – 4:30 p.m.",p(1));e.appendChild(n)};var f=e=>{let t=document.createElement("pre");t="       4930 Ross St.\nRed Deer, AB T4N 1X7\n\n            Phone:\n      403-392-3046\n            Email:\neat@tribeflatout.com\n";let n=c("- Address -","       4930 Ross St.\nRed Deer, AB T4N 1X7\n\n            Phone:\n      403-392-3046\n            Email:\neat@tribeflatout.com\n",p(1));e.appendChild(n)},m=n.p+"7e8917e4cf1688b3d668f33c02eaf0fb.jpg";const A=(e,t)=>{let n=document.querySelector(".menu-holder"),a=document.createElement("h2");a.innerHTML=e,n.appendChild(a);let i=document.createElement("p");i.innerHTML=t,n.appendChild(i)},h=(e,t,n,a=[])=>{let i=document.createElement("div");i.setAttribute("class","menu-item-div");let r=document.createElement("div");r.setAttribute("class","menu-item-title-div");let o=document.createElement("h2");o.innerHTML=e;let s=document.createElement("h3");s.innerHTML=t,r.appendChild(o),r.appendChild(s);let c=document.createElement("p");c.innerHTML=n,i.appendChild(r),i.appendChild(c);for(var l=0;l<a.length;l++){let e=document.createElement("p");e.innerHTML=a[l],i.appendChild(e)}return i};var g=e=>{L(m),A("Brunch","All brunch items come with one of the following: potatas max, 1/2 fresh tomato, rocket fruit salad.");const t=document.createElement("div");t.setAttribute("class","menu-div");let n=h("traditional benny flatbread","18","soft poached eggs, prosciutto, served with lemony house-made hollandaise."),a=h("bacon, eggg, and tomato flatbread","18","soft poached eggs, bacon and tomato served with lemony house-made hollandaise."),i=h("lox & cream cheese flatbread","18","soft poached eggs, bacon and tomato served with lemony house-made hollandaise.");t.appendChild(n),t.appendChild(a),t.appendChild(i),e.appendChild(t)},b=n.p+"611281548a94316f989cafa69dd49aa5.jpg";var y=e=>{L(b),A("Lunch","Yes, we are now open for lunch at 11:30a.m, Tuesday through Sunday");const t=document.createElement("div");t.setAttribute("class","lunch-menu-div");let n=document.createElement("h3");n.innerHTML="starters",t.appendChild(n);const a=document.createElement("div");a.setAttribute("class","lunch-menu-div");let i=document.createElement("h3");i.innerHTML="entrees",a.appendChild(i);const r=document.createElement("div");r.setAttribute("class","lunch-menu-div");let o=document.createElement("h3");o.innerHTML="flat plates",r.appendChild(o);let s=h("rocket salad","9","arugula, with ginger lemon dressing. topped with beet, dill infused pickled onions."),c=h("zuppa","7","chef alex and team knock it out of the park, with tribe's hand-crafted soup. Inspired by flavours from around the world."),l=h("lemon devilled eggs","9","tarragon cream cheese stuffed eggs, with shaved sharp cheese, on a bed of arugula, with ginger lemon dressing."),d=h("tribe salad","13","cantaloupe, cucumber, tomato, goat cheese, nuts, kalamata olives, lime, cilantro, red onion.",["add proscuitto $3"]),p=h("bread","4","freshly baked bread, accopanied with compound butter."),u=h("proscuitto salmon","18","prosciutto-wrapped salmon filet; oven-baked with garlic butter, and topped with warm sambuca tomato sauce."),f=h("banh mi monte cristo","16","gochujang chicken, prosciutto, swiss, carrots, strings, cilantro and candied peanut, strawberry preserve."),m=h("the burger","17","6 oz sous vide Alberta beef patty, rockets, tomato, confit garlic aioli, maitre d'hôtel butter, dill infused pickled onions."),g=h("crab and shrimp mac & cheese","24","panko crusted cheesey cavatappi, with crab and shrimp, and a side of arugula salad. topped with beet-pickled onion, and a slice of house-made buttered bread."),y=h("marrakesh","18","moroccan-spiced chicken, roasted garlic, turmeric yogurt, caramelized onion, goat cheese, green olive, roasted lemon, honey drizzle."),C=h("sprout","14","shreaded brussel sprouts, carmelized onion, goat cheese, drizzle of rich balsamic glaze."),v=h("snappy dresser","18","italian sausage, green pepper, mushroom, onion, mozzarella, tomato basil sauce."),E=h("salt lick","12","caramelized onion, tapenade, capers, mozzarella.",["add proscuitto $3"]),_=document.createElement("div");_.setAttribute("class","lunch-item-holder"),_.appendChild(s),_.appendChild(c),_.appendChild(l),_.appendChild(d),_.appendChild(p),t.appendChild(_);let x=document.createElement("div");x.setAttribute("class","lunch-item-holder"),x.appendChild(u),x.appendChild(f),x.appendChild(m),x.appendChild(g),a.appendChild(x);let T=document.createElement("div");T.setAttribute("class","lunch-item-holder"),T.appendChild(y),T.appendChild(C),T.appendChild(v),T.appendChild(E),r.appendChild(T),e.appendChild(t),e.appendChild(document.createElement("hr")),e.appendChild(a),e.appendChild(document.createElement("hr")),e.appendChild(r)},C=n.p+"ddde9f9a7027e6986b527d7eeaf624b0.jpg";var v=e=>{L(C),A("Small Plates","Salads and small plates are easy to share. Enjoy one before a meal, or get 3-4 and share them for your meal. We are working hard to make the chef’s board the best collection of charcuterie, cheese, and goodies to nibble on, in the region. Help us propagate that rumour with your social media prowess and natural charm... You’ll be rewarded!");const t=document.createElement("div");t.setAttribute("class","menu-div");let n=h("chef's board","34","a fine collection of meats, cheeses, and other edible delights from the minds of our chefs. Serves 2-4"),a=h("une petite charcuterie","18","a smaller version of the chef’s board. Serves 1-2."),i=h("thumpers feast","18","a vegetarian version of the chef's board. Serves 1-2"),r=h("cast iron poutine","12","potatoes, cheese, bacon in a cast iron fry pan."),o=h("roasted tomatoes","12","roasted tomatoes, with fresh herbs and goat cheese. Served with our own, house-made ciabatta."),s=h("tribe salad","13","cantaloupe, cucumber, tomato, goat cheese, nuts, kalamata olives, lime, cilantro, red onion.",["add proscuitto $3"]),c=h("lemon devilled eggs","9","tarragon cream cheese stuffed eggs, with shaved sharp cheese, on a bed of arugula, with ginger lemon dressing."),l=h("spread and bread","12","the world's best spinach dip or Maximillion's hummus, served with Iranian flatbread, seasoned with Zatar spice."),d=h("eat your rocket, stuffed portabello","14","baked portabello, stuffed with cream cheese and herbs. Topped with Japanese bread crumbs, on a bed of arugula, with lemon ginger dressing... which we strongly encourage you to devour!"),p=h("rocket salad","9","arugula, with ginger lemon dressing. topped with beet, dill infused pickled onions.");t.appendChild(n),t.appendChild(a),t.appendChild(i),t.appendChild(r),t.appendChild(o),t.appendChild(s),t.appendChild(c),t.appendChild(l),t.appendChild(d),t.appendChild(p),e.appendChild(t)},E=n.p+"d5fbf0e36f90634221df57ada1abe31a.jpg";var _=e=>{L(E),A("Big Plates","So let’s talk mains; Not only are these dishes delicious, but they are also hardy. Our mains change every once in a while, but  we always use the finest ingredients we can source, favoring local & regional products wherever possible!");const t=document.createElement("div");t.setAttribute("class","menu-div");let n=h("gochujang chicken","22","korean-style chicken with coconut rice, topped with nori & sesame seed, served with kim chi slaw."),a=h("crab and shrimp mac & cheese","24","panko crusted cheesey cavatappi, with crab and shrimp, and a side of arugula salad. topped with beet-pickled onion, and a slice of house-made buttered bread."),i=h("ouzo mousaka","23","sultana raisin beef ragu, roasted eggplant, onion, tomato, bell pepper, garlic, potato, lemon, scented bechamel."),r=h("mussels","24","one pound of steamed mussels in spicy white wine sauce, served on a bed of wilted spinach with Tribe made rustic bread.");t.appendChild(n),t.appendChild(a),t.appendChild(i),t.appendChild(r),e.appendChild(t)},x=n.p+"a41f633e6355cdd2c616fe06b93f1b41.jpg";var T=e=>{L(x),A("Flat Plates","The secret is in our flakey, house made crust. Atop it sits a flavorful array of mouthwatering toppings, baked to perfection.");const t=document.createElement("div");t.setAttribute("class","menu-div");let n=h("snappy dresser","18","italian sausage, green pepper, mushroom, onion, mozzarella, tomato basil sauce."),a=h("east coast mac","18","shrimp and crab mac and cheese, topped with even more cheese!"),i=h("sprout","14","shreaded brussel sprouts, carmelized onion, goat cheese, drizzle of rich balsamic glaze."),r=h("fungi and fromage","17","cremini and portobello mushrooms, smoked gouda and asagio."),o=h("rustico","12","mozzarella, arugula, basil, tomato basil sauce."),s=h("seoul serching","18","gochujang chicken, kimchi, mozza."),c=h("free love","18","proscuitto, goat cheese, salty nuts, pickled dill onions and fig jam."),l=h("marrakesh","18","moroccan-spiced chicken, roasted garlic, turmeric yogurt, caramelized onion, goat cheese, green olive, roasted lemon, honey drizzle."),d=h("salt lick","12","caramelized onion, tapenade, capers, mozzarella.",["add proscuitto $3"]),p=h("copenhagen","15","thinly sliced potato, smoked cheddar, proscuitto");t.appendChild(n),t.appendChild(a),t.appendChild(i),t.appendChild(r),t.appendChild(o),t.appendChild(s),t.appendChild(c),t.appendChild(l),t.appendChild(d),t.appendChild(p),e.appendChild(t)},w=n.p+"d9a6faac92b70e60edbca574bd63e250.jpg";var $=e=>{L(w),A("Sweet Plates","At the end of an evening of fabulous story telling and love, we’ve got just the right amount of sweetness to top things off. Try a coffee and one of our house made desserts.");const t=document.createElement("div");t.setAttribute("class","menu-div");let n=h("mashed potato chocolate cake with penuche icing","9","seriously, a rich chocolate cake, with walnuts, and a brown sugar fudge icing."),a=h("cheddar shortbread with spiced apple","9","very traditional Scottish shortbread right off the Canada Corn Starch box with a very Tribe cheddar twist, served with spiced apple compote."),i=h("lemon jar","9","when life gives you lemons, tribe gives you lemon cheesecake... and berries"),r=h("tribe gelato","9","we make our gelato in house. ask about our featured flavours. each is paired with an accoutrement... something perfect."),o=h("ay caramba chocolate pot","9","mexican-spiced, rich, creamy, chocolate, with fire dust to warm your cockles.");t.appendChild(n),t.appendChild(a),t.appendChild(i),t.appendChild(r),t.appendChild(o),e.appendChild(t)},S=n.p+"a5f756bc8c4393dd1dae49bbb6da799e.jpg";var O=e=>{L(S),A("Coffee","Sit back, take a load off, sip on one of the classics.");const t=document.createElement("div");t.setAttribute("class","menu-div");let n=h("americano","3","basically coffee, espresso and water."),a=h("espresso","3","strong coffee, tiny cup."),i=h("latte","5","one long espresso shot, in a tall cup with steamed milk."),r=h("cappuccino","5","one long espresso shot, in a short cup with steamed milk and microfoam."),o=h("tea latte","5","tea, in a tall cup with steamed milk."),s=h("slow coffee","8","pour-over, slow coffe, fit for two."),c=h("caffee mocha","5","latte with chocolate");t.appendChild(n),t.appendChild(a),t.appendChild(i),t.appendChild(r),t.appendChild(o),t.appendChild(s),t.appendChild(c),e.appendChild(t)},I=n.p+"6d66f82efe7714c96211390f0e0ae1ef.jpg";var R=e=>{L(I),A("Cocktails","Handcrafted cocktails, along with an everchanging local craft beer menu... but you will have to come in to check that out.");const t=document.createElement("div");t.setAttribute("class","menu-div");let n=h("::earth to cherry moon","(2oz)","top shelf bourbon, blackberry liqueur, ginger, lemon juice, bourbon soaked cherries, nutmeg."),a=h("::temporary gentleman","(2oz)","top shelf bourbon, simple syrop, cherry bitters, bourbon soaked cherries, orange twist."),i=h("::something pink","(2oz)","raspberry vodka, saint germain, aperol, lime, dash of pomegranate syrup."),r=h("::diry caesar","(2oz)","dill pickle vodka, walter's caesar concoction, lemon pepper, double pickles."),o=h("::two decade mai tai","(2oz)","amber rum, amaretto, orange liqueur, pineapple, orange and guava juice."),s=h("::hula thunder","(3oz)","almond liqueur, pineapple & coconut rum, blue curacao, cream."),c=h("::perfecto margarita","(2oz)","gold tequila, grand marnier, fresh lime juice, cinnamon syrup, on the rocks."),l=h("::prarie zombie","(3oz)","tequila, dark rum, blue orange liquer, muddled mint, guava juice, cayenne simple syrup, float of pomagranate liqueur."),d=h("::solar flair","(2oz)","aquavit, chartruese espiscopal, cayenne, basil."),p=h("::black raspberry margarita","(2oz)","tequila, chambord, giner syrup, fresh squeezed lime."),u=h("::bamboo float","(0oz)","two parts hydrogen, one part oxygen and bubbles, with a spear of kiln-dried bamboo, citrus wedge. - $1.50");t.appendChild(n),t.appendChild(a),t.appendChild(i),t.appendChild(r),t.appendChild(o),t.appendChild(s),t.appendChild(c),t.appendChild(l),t.appendChild(d),t.appendChild(p),t.appendChild(u),e.appendChild(t)};var N=e=>{let t=document.querySelector(".menus-article");document.querySelector(".menu-holder")&&t.removeChild(t.childNodes[0]),t.insertBefore(e,t.childNodes[0])};var k=e=>{const t=document.createElement("div");switch(t.setAttribute("class","menu-holder"),N(t),e){case"1":g(t);break;case"2":y(t);break;case"3":v(t);break;case"4":_(t);break;case"5":T(t);break;case"6":$(t);break;case"7":O(t);break;case"8":R(t)}};const F=(e,t,n,a)=>{const i=document.createElement("div");i.setAttribute("class","hero-image"),i.style.backgroundImage=`linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url(${t})`,i.style.borderBottom="3px solid "+a;const r=document.createElement("div");r.setAttribute("class","hero-text");const o=document.createElement("h1");o.innerHTML=e,r.appendChild(o),i.appendChild(r),n.appendChild(i)},L=e=>{document.querySelector(".hero-image").style.backgroundImage=`linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url(${e})`};var B=n.p+"2cf301551e389d5230e4891c6e393cf9.png";var D=e=>{let t=document.createElement("div");t.setAttribute("class","logo-div"),t.style.backgroundImage=`url(${B})`,e.appendChild(t)};var H=e=>{F("We are a contemporary restaurant with a mind to source local, seasonal, ingredients to create food inspired from around the world. Terry, Paul and Brandon are travellers and foodies. We love rich intense flavours, fresh products, and spice, yet… we understand that we live in Red Deer and people here also enjoy comfort food.",o,e,p(1)),s(e);let t=document.querySelector("article");t.setAttribute("class","hours-article"),f(t),u(t),D(e),r(p(1))},U=n.p+"5d88a0453e2f66b355eeff877bbfa2c4.jpg";var q=e=>{F("MENUS",U,e,p(2)),s(e);let t=document.querySelector("article");t.setAttribute("class","menus-article"),(()=>{let e=document.querySelector(".hero-image"),t=document.createElement("div");t.setAttribute("class","select");let n=document.createElement("select");n.setAttribute("name","slct"),n.setAttribute("id","slct");let a=document.createElement("option");a.setAttribute("selected",""),a.setAttribute("disabled",""),a.innerHTML="Choose a menu";let i=document.createElement("option");i.setAttribute("value","1"),i.innerHTML="Brunch";let r=document.createElement("option");r.setAttribute("value","2"),r.innerHTML="Lunch";let o=document.createElement("option");o.setAttribute("value","3"),o.innerHTML="Small Plates";let s=document.createElement("option");s.setAttribute("value","4"),s.innerHTML="Big Plates";let c=document.createElement("option");c.setAttribute("value","5"),c.innerHTML="Flat Plates";let l=document.createElement("option");l.setAttribute("value","6"),l.innerHTML="Sweet Plates";let d=document.createElement("option");d.setAttribute("value","7"),d.innerHTML="Coffee";let p=document.createElement("option");p.setAttribute("value","8"),p.innerHTML="Cocktails",n.appendChild(a),n.appendChild(i),n.appendChild(r),n.appendChild(o),n.appendChild(s),n.appendChild(c),n.appendChild(l),n.appendChild(d),n.appendChild(p);for(var u=1;u<n.children.length;u++)n.children[u].addEventListener("click",e=>{k(e.target.value)});t.appendChild(n),e.appendChild(t)})(),D(t),r(p(2))},M=n.p+"73ea915dd5eb07427a618c1a20e224bd.jpg";var W=e=>{let t=document.createElement("p"),n=document.createElement("p"),a=document.createElement("p"),i=document.createElement("p");t.innerHTML="A committed social group, comprising relations and adopted strangers. People connected by a shared interest, such as beer, shoes, knitting, fancy chickens, star trek, yoga, quidditch, cannabis, heirloom vegetables, bugs, bread-making, cats, world-wandering, glass-blowing, curling, canines…… You… are part of our tribe. One thing that’s common among humanity is our love of food, drink, and storytelling. Here at Tribe we imagine all people, regardless of culture, background, or life philosophy, coming together to enjoy craft beer and our internationally inspired menu.",n.innerHTML="Using locally-sourced ingredients whenever we can, our menu has been thoughtfully crafted by chefs that care about your culinary experience. Inspired by our ancestors from around the world, we invite you to enjoy our offerings, while celebrating one another, and our equally diverse and beautiful journeys.",a.innerHTML="We look forward to sharing our worlds with your worlds… in a sexy, sophisticated way. Romance isn’t just for lovers ‐ it’s to be shared with all of humanity!",i.innerHTML="Eat a little. Drink a little. Flirt a little. Tell your most awesome stories.",i.style.alignSelf="center",i.style.alignSelf="center",e.appendChild(t),e.appendChild(n),e.appendChild(a),e.appendChild(i)};var P=e=>{let t=document.createElement("p"),n=document.createElement("ul");const a=["Pretend it’s 1970; Cell phones don’t exist and we take our hats off inside.","Say one thing that turns you on about life.","Notice how sexy your server is, flirt a little.","Dream about a foreign country you’d like to visit.","Conjugate ‘tribe’ into an adverb and adjective, then use it in a clever sentence.","Take a moment to appreciate, embrace your tribe with a toast.","Be uninhibited for a few moments… in a kind way.","Use expressive language. If you must swear, the tribe charge is $20 a word if any one overhears."];t.innerHTML="Don't think of these as house rules, so much as strong suggestions as to how you might make your time here with us a thing of beauty.";for(var i=0;i<a.length;i++){let e=document.createElement("li");e.innerHTML=a[i],n.appendChild(e)}e.appendChild(t),e.appendChild(n)};var z=e=>{F("MANISFESTO",M,e,p(3)),s(e);let t=document.querySelector("article");t.setAttribute("class","manifesto-article"),l("About Us",p(3)),W(t),l("Agreement",p(3)),P(t),D(t),r(p(3))},G=n.p+"c6e94fab33ac9981beffbdca4000d01d.jpg";var j=e=>{let t=document.createElement("p"),n=document.createElement("p"),a=document.createElement("p");t.innerHTML="Tribe welcomes events, parties and celebrations.",n.innerHTML="We are happy to discuss booking the whole facility or part of it for your event.",a.innerHTML="Just give us a call to discuss rates, menus, and any special requirements you have.";let i=c("- Your Event -","",p(4));i.appendChild(t),i.appendChild(n),i.appendChild(a),e.appendChild(i)};n.p;var Y=e=>{let t="+1 403-392-3046",n="eat@tribeflatout.com",a=document.createElement("pre");a=`           To make a reservation by phone, call:\n                          ${t} <a href=tel:${t}><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="black" width="18px" height="18px"><path d="M0 0h24v24H0z" fill="none"/><path d="M20.01 15.38c-1.23 0-2.42-.2-3.53-.56-.35-.12-.74-.03-1.01.24l-1.57 1.97c-2.83-1.35-5.48-3.9-6.89-6.83l1.95-1.66c.27-.28.35-.67.24-1.02-.37-1.11-.56-2.3-.56-3.53 0-.54-.45-.99-.99-.99H4.19C3.65 3 3 3.24 3 3.99 3 13.28 10.73 21 20.01 21c.71 0 .99-.63.99-1.18v-3.45c0-.54-.45-.99-.99-.99z"/></svg></a>\n\n                      Or to reserve by email:\n                      eat@tribeflatout.com<a href=mailto:${n}><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="black" width="18px" height="18px"><path d="M0 0h24v24H0z" fill="none"/><path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/></svg></a>\nOr, just send us a message using the form below:`;let i=c("- Details -",a,p(4));e.appendChild(i)};const K=e=>{const t=document.createElement("div");t.setAttribute("class","input-group");const n=document.createElement("input");n.setAttribute("type","text"),n.setAttribute("name",e),n.setAttribute("class",`form-control ${e}-input`),n.setAttribute("required",!0);const a=document.createElement("label");return a.innerHTML=e,n.addEventListener("focusout",e=>{e.target.textLength>0?e.target.setAttribute("class","form-control has-value"):e.target.setAttribute("class","form-control")}),t.appendChild(n),t.appendChild(a),t};var V=()=>{let e=document.createElement("button");return e.innerHTML="Submit",e.setAttribute("type","submit"),e};var J=e=>{let t=document.createElement("form");t.setAttribute("class","contact-form"),t.setAttribute("action","https://formspree.io/xwkwpevn"),t.setAttribute("method","post");let n=document.createElement("h3");n.innerHTML="- Send Message -",n.style.color=p(4);let a=document.createElement("div");a.setAttribute("class","infoDiv");let i=K("name"),r=K("email");a.appendChild(i),a.appendChild(r);let o=(e=>{const t=document.createElement("div");t.setAttribute("class","input-group");const n=document.createElement("textarea");n.setAttribute("type","text"),n.setAttribute("name",e),n.setAttribute("class","form-control message-input"),n.setAttribute("required",!0);const a=document.createElement("label");return a.innerHTML=e,n.addEventListener("focusout",e=>{e.target.textLength>0?e.target.setAttribute("class","form-control has-value"):e.target.setAttribute("class","form-control")}),t.appendChild(n),t.appendChild(a),t})("message"),s=document.createElement("div");s.setAttribute("class","messageDiv"),s.appendChild(o);let c=V();t.appendChild(n),t.appendChild(a),t.appendChild(s),t.appendChild(c),e.appendChild(t)};var Q=e=>{let t=document.createElement("div");t.setAttribute("class","map-container");let n=document.createElement("div");n.setAttribute("class","map-display");let a=document.createElement("iframe");a.setAttribute("class","map-frame"),a.setAttribute("src","https://www.google.com/maps/embed/v1/search?q=tribe+red+deer&key=AIzaSyBFw0Qbyq9zTFTd-tUY6dZWTgaQzuU17R8"),n.appendChild(a),t.appendChild(n),e.appendChild(t)};var X=e=>{F("CONTACT",G,e,p(4)),s(e);let t=document.querySelector("article");t.setAttribute("class","contact-article"),j(t),Y(t),J(e),Q(e),D(e),r(p(4))},Z=function(e,t){return(Z=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */function ee(e,t){function n(){this.constructor=e}Z(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var te=function(){return(te=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};function ne(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,i,r=n.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)o.push(a.value)}catch(e){i={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(i)throw i.error}}return o}function ae(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(ne(arguments[t]));return e}
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var ie=function(){function e(e){void 0===e&&(e={}),this.adapter=e}return Object.defineProperty(e,"cssClasses",{get:function(){return{}},enumerable:!0,configurable:!0}),Object.defineProperty(e,"strings",{get:function(){return{}},enumerable:!0,configurable:!0}),Object.defineProperty(e,"numbers",{get:function(){return{}},enumerable:!0,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{}},enumerable:!0,configurable:!0}),e.prototype.init=function(){},e.prototype.destroy=function(){},e}(),re=function(){function e(e,t){for(var n=[],a=2;a<arguments.length;a++)n[a-2]=arguments[a];this.root=e,this.initialize.apply(this,ae(n)),this.foundation=void 0===t?this.getDefaultFoundation():t,this.foundation.init(),this.initialSyncWithDOM()}return e.attachTo=function(t){return new e(t,new ie({}))},e.prototype.initialize=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t]},e.prototype.getDefaultFoundation=function(){throw new Error("Subclasses must override getDefaultFoundation to return a properly configured foundation class")},e.prototype.initialSyncWithDOM=function(){},e.prototype.destroy=function(){this.foundation.destroy()},e.prototype.listen=function(e,t,n){this.root.addEventListener(e,t,n)},e.prototype.unlisten=function(e,t,n){this.root.removeEventListener(e,t,n)},e.prototype.emit=function(e,t,n){var a;void 0===n&&(n=!1),"function"==typeof CustomEvent?a=new CustomEvent(e,{bubbles:n,detail:t}):(a=document.createEvent("CustomEvent")).initCustomEvent(e,n,!1,t),this.root.dispatchEvent(a)},e}();
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
function oe(e){return void 0===e&&(e=window),!!function(e){void 0===e&&(e=window);var t=!1;try{var n={get passive(){return t=!0,!1}},a=function(){};e.document.addEventListener("test",a,n),e.document.removeEventListener("test",a,n)}catch(e){t=!1}return t}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */(e)&&{passive:!0}}function se(e,t){return(e.matches||e.webkitMatchesSelector||e.msMatchesSelector).call(e,t)}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var ce,le={ANIMATING:"mdc-tab-scroller--animating",SCROLL_AREA_SCROLL:"mdc-tab-scroller__scroll-area--scroll",SCROLL_TEST:"mdc-tab-scroller__test"},de={AREA_SELECTOR:".mdc-tab-scroller__scroll-area",CONTENT_SELECTOR:".mdc-tab-scroller__scroll-content"},pe=function(e){this.adapter=e},ue=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ee(t,e),t.prototype.getScrollPositionRTL=function(){var e=this.adapter.getScrollAreaScrollLeft(),t=this.calculateScrollEdges_().right;return Math.round(t-e)},t.prototype.scrollToRTL=function(e){var t=this.calculateScrollEdges_(),n=this.adapter.getScrollAreaScrollLeft(),a=this.clampScrollValue_(t.right-e);return{finalScrollPosition:a,scrollDelta:a-n}},t.prototype.incrementScrollRTL=function(e){var t=this.adapter.getScrollAreaScrollLeft(),n=this.clampScrollValue_(t-e);return{finalScrollPosition:n,scrollDelta:n-t}},t.prototype.getAnimatingScrollPosition=function(e){return e},t.prototype.calculateScrollEdges_=function(){return{left:0,right:this.adapter.getScrollContentOffsetWidth()-this.adapter.getScrollAreaOffsetWidth()}},t.prototype.clampScrollValue_=function(e){var t=this.calculateScrollEdges_();return Math.min(Math.max(t.left,e),t.right)},t}(pe),fe=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ee(t,e),t.prototype.getScrollPositionRTL=function(e){var t=this.adapter.getScrollAreaScrollLeft();return Math.round(e-t)},t.prototype.scrollToRTL=function(e){var t=this.adapter.getScrollAreaScrollLeft(),n=this.clampScrollValue_(-e);return{finalScrollPosition:n,scrollDelta:n-t}},t.prototype.incrementScrollRTL=function(e){var t=this.adapter.getScrollAreaScrollLeft(),n=this.clampScrollValue_(t-e);return{finalScrollPosition:n,scrollDelta:n-t}},t.prototype.getAnimatingScrollPosition=function(e,t){return e-t},t.prototype.calculateScrollEdges_=function(){var e=this.adapter.getScrollContentOffsetWidth();return{left:this.adapter.getScrollAreaOffsetWidth()-e,right:0}},t.prototype.clampScrollValue_=function(e){var t=this.calculateScrollEdges_();return Math.max(Math.min(t.right,e),t.left)},t}(pe),me=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ee(t,e),t.prototype.getScrollPositionRTL=function(e){var t=this.adapter.getScrollAreaScrollLeft();return Math.round(t-e)},t.prototype.scrollToRTL=function(e){var t=this.adapter.getScrollAreaScrollLeft(),n=this.clampScrollValue_(e);return{finalScrollPosition:n,scrollDelta:t-n}},t.prototype.incrementScrollRTL=function(e){var t=this.adapter.getScrollAreaScrollLeft(),n=this.clampScrollValue_(t+e);return{finalScrollPosition:n,scrollDelta:t-n}},t.prototype.getAnimatingScrollPosition=function(e,t){return e+t},t.prototype.calculateScrollEdges_=function(){return{left:this.adapter.getScrollContentOffsetWidth()-this.adapter.getScrollAreaOffsetWidth(),right:0}},t.prototype.clampScrollValue_=function(e){var t=this.calculateScrollEdges_();return Math.min(Math.max(t.right,e),t.left)},t}(pe),Ae=function(e){function t(n){var a=e.call(this,te(te({},t.defaultAdapter),n))||this;return a.isAnimating_=!1,a}return ee(t,e),Object.defineProperty(t,"cssClasses",{get:function(){return le},enumerable:!0,configurable:!0}),Object.defineProperty(t,"strings",{get:function(){return de},enumerable:!0,configurable:!0}),Object.defineProperty(t,"defaultAdapter",{get:function(){return{eventTargetMatchesSelector:function(){return!1},addClass:function(){},removeClass:function(){},addScrollAreaClass:function(){},setScrollAreaStyleProperty:function(){},setScrollContentStyleProperty:function(){},getScrollContentStyleValue:function(){return""},setScrollAreaScrollLeft:function(){},getScrollAreaScrollLeft:function(){return 0},getScrollContentOffsetWidth:function(){return 0},getScrollAreaOffsetWidth:function(){return 0},computeScrollAreaClientRect:function(){return{top:0,right:0,bottom:0,left:0,width:0,height:0}},computeScrollContentClientRect:function(){return{top:0,right:0,bottom:0,left:0,width:0,height:0}},computeHorizontalScrollbarHeight:function(){return 0}}},enumerable:!0,configurable:!0}),t.prototype.init=function(){var e=this.adapter.computeHorizontalScrollbarHeight();this.adapter.setScrollAreaStyleProperty("margin-bottom",-e+"px"),this.adapter.addScrollAreaClass(t.cssClasses.SCROLL_AREA_SCROLL)},t.prototype.getScrollPosition=function(){if(this.isRTL_())return this.computeCurrentScrollPositionRTL_();var e=this.calculateCurrentTranslateX_();return this.adapter.getScrollAreaScrollLeft()-e},t.prototype.handleInteraction=function(){this.isAnimating_&&this.stopScrollAnimation_()},t.prototype.handleTransitionEnd=function(e){var n=e.target;this.isAnimating_&&this.adapter.eventTargetMatchesSelector(n,t.strings.CONTENT_SELECTOR)&&(this.isAnimating_=!1,this.adapter.removeClass(t.cssClasses.ANIMATING))},t.prototype.incrementScroll=function(e){0!==e&&this.animate_(this.getIncrementScrollOperation_(e))},t.prototype.incrementScrollImmediate=function(e){if(0!==e){var t=this.getIncrementScrollOperation_(e);0!==t.scrollDelta&&(this.stopScrollAnimation_(),this.adapter.setScrollAreaScrollLeft(t.finalScrollPosition))}},t.prototype.scrollTo=function(e){if(this.isRTL_())return this.scrollToRTL_(e);this.scrollTo_(e)},t.prototype.getRTLScroller=function(){return this.rtlScrollerInstance_||(this.rtlScrollerInstance_=this.rtlScrollerFactory_()),this.rtlScrollerInstance_},t.prototype.calculateCurrentTranslateX_=function(){var e=this.adapter.getScrollContentStyleValue("transform");if("none"===e)return 0;var t=/\((.+?)\)/.exec(e);if(!t)return 0;var n=ne(t[1].split(","),6),a=(n[0],n[1],n[2],n[3],n[4]);n[5];return parseFloat(a)},t.prototype.clampScrollValue_=function(e){var t=this.calculateScrollEdges_();return Math.min(Math.max(t.left,e),t.right)},t.prototype.computeCurrentScrollPositionRTL_=function(){var e=this.calculateCurrentTranslateX_();return this.getRTLScroller().getScrollPositionRTL(e)},t.prototype.calculateScrollEdges_=function(){return{left:0,right:this.adapter.getScrollContentOffsetWidth()-this.adapter.getScrollAreaOffsetWidth()}},t.prototype.scrollTo_=function(e){var t=this.getScrollPosition(),n=this.clampScrollValue_(e),a=n-t;this.animate_({finalScrollPosition:n,scrollDelta:a})},t.prototype.scrollToRTL_=function(e){var t=this.getRTLScroller().scrollToRTL(e);this.animate_(t)},t.prototype.getIncrementScrollOperation_=function(e){if(this.isRTL_())return this.getRTLScroller().incrementScrollRTL(e);var t=this.getScrollPosition(),n=e+t,a=this.clampScrollValue_(n);return{finalScrollPosition:a,scrollDelta:a-t}},t.prototype.animate_=function(e){var n=this;0!==e.scrollDelta&&(this.stopScrollAnimation_(),this.adapter.setScrollAreaScrollLeft(e.finalScrollPosition),this.adapter.setScrollContentStyleProperty("transform","translateX("+e.scrollDelta+"px)"),this.adapter.computeScrollAreaClientRect(),requestAnimationFrame((function(){n.adapter.addClass(t.cssClasses.ANIMATING),n.adapter.setScrollContentStyleProperty("transform","none")})),this.isAnimating_=!0)},t.prototype.stopScrollAnimation_=function(){this.isAnimating_=!1;var e=this.getAnimatingScrollPosition_();this.adapter.removeClass(t.cssClasses.ANIMATING),this.adapter.setScrollContentStyleProperty("transform","translateX(0px)"),this.adapter.setScrollAreaScrollLeft(e)},t.prototype.getAnimatingScrollPosition_=function(){var e=this.calculateCurrentTranslateX_(),t=this.adapter.getScrollAreaScrollLeft();return this.isRTL_()?this.getRTLScroller().getAnimatingScrollPosition(t,e):t-e},t.prototype.rtlScrollerFactory_=function(){var e=this.adapter.getScrollAreaScrollLeft();this.adapter.setScrollAreaScrollLeft(e-1);var t=this.adapter.getScrollAreaScrollLeft();if(t<0)return this.adapter.setScrollAreaScrollLeft(e),new fe(this.adapter);var n=this.adapter.computeScrollAreaClientRect(),a=this.adapter.computeScrollContentClientRect(),i=Math.round(a.right-n.right);return this.adapter.setScrollAreaScrollLeft(e),i===t?new me(this.adapter):new ue(this.adapter)},t.prototype.isRTL_=function(){return"rtl"===this.adapter.getScrollContentStyleValue("direction")},t}(ie);
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var he,ge=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ee(t,e),t.attachTo=function(e){return new t(e)},t.prototype.initialize=function(){this.area_=this.root.querySelector(Ae.strings.AREA_SELECTOR),this.content_=this.root.querySelector(Ae.strings.CONTENT_SELECTOR)},t.prototype.initialSyncWithDOM=function(){var e=this;this.handleInteraction_=function(){return e.foundation.handleInteraction()},this.handleTransitionEnd_=function(t){return e.foundation.handleTransitionEnd(t)},this.area_.addEventListener("wheel",this.handleInteraction_,oe()),this.area_.addEventListener("touchstart",this.handleInteraction_,oe()),this.area_.addEventListener("pointerdown",this.handleInteraction_,oe()),this.area_.addEventListener("mousedown",this.handleInteraction_,oe()),this.area_.addEventListener("keydown",this.handleInteraction_,oe()),this.content_.addEventListener("transitionend",this.handleTransitionEnd_)},t.prototype.destroy=function(){e.prototype.destroy.call(this),this.area_.removeEventListener("wheel",this.handleInteraction_,oe()),this.area_.removeEventListener("touchstart",this.handleInteraction_,oe()),this.area_.removeEventListener("pointerdown",this.handleInteraction_,oe()),this.area_.removeEventListener("mousedown",this.handleInteraction_,oe()),this.area_.removeEventListener("keydown",this.handleInteraction_,oe()),this.content_.removeEventListener("transitionend",this.handleTransitionEnd_)},t.prototype.getDefaultFoundation=function(){var e=this;return new Ae({eventTargetMatchesSelector:function(e,t){return se(e,t)},addClass:function(t){return e.root.classList.add(t)},removeClass:function(t){return e.root.classList.remove(t)},addScrollAreaClass:function(t){return e.area_.classList.add(t)},setScrollAreaStyleProperty:function(t,n){return e.area_.style.setProperty(t,n)},setScrollContentStyleProperty:function(t,n){return e.content_.style.setProperty(t,n)},getScrollContentStyleValue:function(t){return window.getComputedStyle(e.content_).getPropertyValue(t)},setScrollAreaScrollLeft:function(t){return e.area_.scrollLeft=t},getScrollAreaScrollLeft:function(){return e.area_.scrollLeft},getScrollContentOffsetWidth:function(){return e.content_.offsetWidth},getScrollAreaOffsetWidth:function(){return e.area_.offsetWidth},computeScrollAreaClientRect:function(){return e.area_.getBoundingClientRect()},computeScrollContentClientRect:function(){return e.content_.getBoundingClientRect()},computeHorizontalScrollbarHeight:function(){return function(e,t){if(void 0===t&&(t=!0),t&&void 0!==ce)return ce;var n=e.createElement("div");n.classList.add(le.SCROLL_TEST),e.body.appendChild(n);var a=n.offsetHeight-n.clientHeight;return e.body.removeChild(n),t&&(ce=a),a}(document)}})},t.prototype.getScrollPosition=function(){return this.foundation.getScrollPosition()},t.prototype.getScrollContentWidth=function(){return this.content_.offsetWidth},t.prototype.incrementScroll=function(e){this.foundation.incrementScroll(e)},t.prototype.scrollTo=function(e){this.foundation.scrollTo(e)},t}(re),be={BG_FOCUSED:"mdc-ripple-upgraded--background-focused",FG_ACTIVATION:"mdc-ripple-upgraded--foreground-activation",FG_DEACTIVATION:"mdc-ripple-upgraded--foreground-deactivation",ROOT:"mdc-ripple-upgraded",UNBOUNDED:"mdc-ripple-upgraded--unbounded"},ye={VAR_FG_SCALE:"--mdc-ripple-fg-scale",VAR_FG_SIZE:"--mdc-ripple-fg-size",VAR_FG_TRANSLATE_END:"--mdc-ripple-fg-translate-end",VAR_FG_TRANSLATE_START:"--mdc-ripple-fg-translate-start",VAR_LEFT:"--mdc-ripple-left",VAR_TOP:"--mdc-ripple-top"},Ce={DEACTIVATION_TIMEOUT_MS:225,FG_DEACTIVATION_MS:150,INITIAL_ORIGIN_SCALE:.6,PADDING:10,TAP_DELAY_MS:300};
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var ve=["touchstart","pointerdown","mousedown","keydown"],Ee=["touchend","pointerup","mouseup","contextmenu"],_e=[],xe=function(e){function t(n){var a=e.call(this,te(te({},t.defaultAdapter),n))||this;return a.activationAnimationHasEnded_=!1,a.activationTimer_=0,a.fgDeactivationRemovalTimer_=0,a.fgScale_="0",a.frame_={width:0,height:0},a.initialSize_=0,a.layoutFrame_=0,a.maxRadius_=0,a.unboundedCoords_={left:0,top:0},a.activationState_=a.defaultActivationState_(),a.activationTimerCallback_=function(){a.activationAnimationHasEnded_=!0,a.runDeactivationUXLogicIfReady_()},a.activateHandler_=function(e){return a.activate_(e)},a.deactivateHandler_=function(){return a.deactivate_()},a.focusHandler_=function(){return a.handleFocus()},a.blurHandler_=function(){return a.handleBlur()},a.resizeHandler_=function(){return a.layout()},a}return ee(t,e),Object.defineProperty(t,"cssClasses",{get:function(){return be},enumerable:!0,configurable:!0}),Object.defineProperty(t,"strings",{get:function(){return ye},enumerable:!0,configurable:!0}),Object.defineProperty(t,"numbers",{get:function(){return Ce},enumerable:!0,configurable:!0}),Object.defineProperty(t,"defaultAdapter",{get:function(){return{addClass:function(){},browserSupportsCssVars:function(){return!0},computeBoundingRect:function(){return{top:0,right:0,bottom:0,left:0,width:0,height:0}},containsEventTarget:function(){return!0},deregisterDocumentInteractionHandler:function(){},deregisterInteractionHandler:function(){},deregisterResizeHandler:function(){},getWindowPageOffset:function(){return{x:0,y:0}},isSurfaceActive:function(){return!0},isSurfaceDisabled:function(){return!0},isUnbounded:function(){return!0},registerDocumentInteractionHandler:function(){},registerInteractionHandler:function(){},registerResizeHandler:function(){},removeClass:function(){},updateCssVariable:function(){}}},enumerable:!0,configurable:!0}),t.prototype.init=function(){var e=this,n=this.supportsPressRipple_();if(this.registerRootHandlers_(n),n){var a=t.cssClasses,i=a.ROOT,r=a.UNBOUNDED;requestAnimationFrame((function(){e.adapter.addClass(i),e.adapter.isUnbounded()&&(e.adapter.addClass(r),e.layoutInternal_())}))}},t.prototype.destroy=function(){var e=this;if(this.supportsPressRipple_()){this.activationTimer_&&(clearTimeout(this.activationTimer_),this.activationTimer_=0,this.adapter.removeClass(t.cssClasses.FG_ACTIVATION)),this.fgDeactivationRemovalTimer_&&(clearTimeout(this.fgDeactivationRemovalTimer_),this.fgDeactivationRemovalTimer_=0,this.adapter.removeClass(t.cssClasses.FG_DEACTIVATION));var n=t.cssClasses,a=n.ROOT,i=n.UNBOUNDED;requestAnimationFrame((function(){e.adapter.removeClass(a),e.adapter.removeClass(i),e.removeCssVars_()}))}this.deregisterRootHandlers_(),this.deregisterDeactivationHandlers_()},t.prototype.activate=function(e){this.activate_(e)},t.prototype.deactivate=function(){this.deactivate_()},t.prototype.layout=function(){var e=this;this.layoutFrame_&&cancelAnimationFrame(this.layoutFrame_),this.layoutFrame_=requestAnimationFrame((function(){e.layoutInternal_(),e.layoutFrame_=0}))},t.prototype.setUnbounded=function(e){var n=t.cssClasses.UNBOUNDED;e?this.adapter.addClass(n):this.adapter.removeClass(n)},t.prototype.handleFocus=function(){var e=this;requestAnimationFrame((function(){return e.adapter.addClass(t.cssClasses.BG_FOCUSED)}))},t.prototype.handleBlur=function(){var e=this;requestAnimationFrame((function(){return e.adapter.removeClass(t.cssClasses.BG_FOCUSED)}))},t.prototype.supportsPressRipple_=function(){return this.adapter.browserSupportsCssVars()},t.prototype.defaultActivationState_=function(){return{activationEvent:void 0,hasDeactivationUXRun:!1,isActivated:!1,isProgrammatic:!1,wasActivatedByPointer:!1,wasElementMadeActive:!1}},t.prototype.registerRootHandlers_=function(e){var t=this;e&&(ve.forEach((function(e){t.adapter.registerInteractionHandler(e,t.activateHandler_)})),this.adapter.isUnbounded()&&this.adapter.registerResizeHandler(this.resizeHandler_)),this.adapter.registerInteractionHandler("focus",this.focusHandler_),this.adapter.registerInteractionHandler("blur",this.blurHandler_)},t.prototype.registerDeactivationHandlers_=function(e){var t=this;"keydown"===e.type?this.adapter.registerInteractionHandler("keyup",this.deactivateHandler_):Ee.forEach((function(e){t.adapter.registerDocumentInteractionHandler(e,t.deactivateHandler_)}))},t.prototype.deregisterRootHandlers_=function(){var e=this;ve.forEach((function(t){e.adapter.deregisterInteractionHandler(t,e.activateHandler_)})),this.adapter.deregisterInteractionHandler("focus",this.focusHandler_),this.adapter.deregisterInteractionHandler("blur",this.blurHandler_),this.adapter.isUnbounded()&&this.adapter.deregisterResizeHandler(this.resizeHandler_)},t.prototype.deregisterDeactivationHandlers_=function(){var e=this;this.adapter.deregisterInteractionHandler("keyup",this.deactivateHandler_),Ee.forEach((function(t){e.adapter.deregisterDocumentInteractionHandler(t,e.deactivateHandler_)}))},t.prototype.removeCssVars_=function(){var e=this,n=t.strings;Object.keys(n).forEach((function(t){0===t.indexOf("VAR_")&&e.adapter.updateCssVariable(n[t],null)}))},t.prototype.activate_=function(e){var t=this;if(!this.adapter.isSurfaceDisabled()){var n=this.activationState_;if(!n.isActivated){var a=this.previousActivationEvent_;if(!(a&&void 0!==e&&a.type!==e.type))n.isActivated=!0,n.isProgrammatic=void 0===e,n.activationEvent=e,n.wasActivatedByPointer=!n.isProgrammatic&&(void 0!==e&&("mousedown"===e.type||"touchstart"===e.type||"pointerdown"===e.type)),void 0!==e&&_e.length>0&&_e.some((function(e){return t.adapter.containsEventTarget(e)}))?this.resetActivationState_():(void 0!==e&&(_e.push(e.target),this.registerDeactivationHandlers_(e)),n.wasElementMadeActive=this.checkElementMadeActive_(e),n.wasElementMadeActive&&this.animateActivation_(),requestAnimationFrame((function(){_e=[],n.wasElementMadeActive||void 0===e||" "!==e.key&&32!==e.keyCode||(n.wasElementMadeActive=t.checkElementMadeActive_(e),n.wasElementMadeActive&&t.animateActivation_()),n.wasElementMadeActive||(t.activationState_=t.defaultActivationState_())})))}}},t.prototype.checkElementMadeActive_=function(e){return void 0===e||"keydown"!==e.type||this.adapter.isSurfaceActive()},t.prototype.animateActivation_=function(){var e=this,n=t.strings,a=n.VAR_FG_TRANSLATE_START,i=n.VAR_FG_TRANSLATE_END,r=t.cssClasses,o=r.FG_DEACTIVATION,s=r.FG_ACTIVATION,c=t.numbers.DEACTIVATION_TIMEOUT_MS;this.layoutInternal_();var l="",d="";if(!this.adapter.isUnbounded()){var p=this.getFgTranslationCoordinates_(),u=p.startPoint,f=p.endPoint;l=u.x+"px, "+u.y+"px",d=f.x+"px, "+f.y+"px"}this.adapter.updateCssVariable(a,l),this.adapter.updateCssVariable(i,d),clearTimeout(this.activationTimer_),clearTimeout(this.fgDeactivationRemovalTimer_),this.rmBoundedActivationClasses_(),this.adapter.removeClass(o),this.adapter.computeBoundingRect(),this.adapter.addClass(s),this.activationTimer_=setTimeout((function(){return e.activationTimerCallback_()}),c)},t.prototype.getFgTranslationCoordinates_=function(){var e,t=this.activationState_,n=t.activationEvent;return{startPoint:e={x:(e=t.wasActivatedByPointer?function(e,t,n){if(!e)return{x:0,y:0};var a,i,r=t.x,o=t.y,s=r+n.left,c=o+n.top;if("touchstart"===e.type){var l=e;a=l.changedTouches[0].pageX-s,i=l.changedTouches[0].pageY-c}else{var d=e;a=d.pageX-s,i=d.pageY-c}return{x:a,y:i}}(n,this.adapter.getWindowPageOffset(),this.adapter.computeBoundingRect()):{x:this.frame_.width/2,y:this.frame_.height/2}).x-this.initialSize_/2,y:e.y-this.initialSize_/2},endPoint:{x:this.frame_.width/2-this.initialSize_/2,y:this.frame_.height/2-this.initialSize_/2}}},t.prototype.runDeactivationUXLogicIfReady_=function(){var e=this,n=t.cssClasses.FG_DEACTIVATION,a=this.activationState_,i=a.hasDeactivationUXRun,r=a.isActivated;(i||!r)&&this.activationAnimationHasEnded_&&(this.rmBoundedActivationClasses_(),this.adapter.addClass(n),this.fgDeactivationRemovalTimer_=setTimeout((function(){e.adapter.removeClass(n)}),Ce.FG_DEACTIVATION_MS))},t.prototype.rmBoundedActivationClasses_=function(){var e=t.cssClasses.FG_ACTIVATION;this.adapter.removeClass(e),this.activationAnimationHasEnded_=!1,this.adapter.computeBoundingRect()},t.prototype.resetActivationState_=function(){var e=this;this.previousActivationEvent_=this.activationState_.activationEvent,this.activationState_=this.defaultActivationState_(),setTimeout((function(){return e.previousActivationEvent_=void 0}),t.numbers.TAP_DELAY_MS)},t.prototype.deactivate_=function(){var e=this,t=this.activationState_;if(t.isActivated){var n=te({},t);t.isProgrammatic?(requestAnimationFrame((function(){return e.animateDeactivation_(n)})),this.resetActivationState_()):(this.deregisterDeactivationHandlers_(),requestAnimationFrame((function(){e.activationState_.hasDeactivationUXRun=!0,e.animateDeactivation_(n),e.resetActivationState_()})))}},t.prototype.animateDeactivation_=function(e){var t=e.wasActivatedByPointer,n=e.wasElementMadeActive;(t||n)&&this.runDeactivationUXLogicIfReady_()},t.prototype.layoutInternal_=function(){var e=this;this.frame_=this.adapter.computeBoundingRect();var n=Math.max(this.frame_.height,this.frame_.width);this.maxRadius_=this.adapter.isUnbounded()?n:Math.sqrt(Math.pow(e.frame_.width,2)+Math.pow(e.frame_.height,2))+t.numbers.PADDING;var a=Math.floor(n*t.numbers.INITIAL_ORIGIN_SCALE);this.adapter.isUnbounded()&&a%2!=0?this.initialSize_=a-1:this.initialSize_=a,this.fgScale_=""+this.maxRadius_/this.initialSize_,this.updateLayoutCssVars_()},t.prototype.updateLayoutCssVars_=function(){var e=t.strings,n=e.VAR_FG_SIZE,a=e.VAR_LEFT,i=e.VAR_TOP,r=e.VAR_FG_SCALE;this.adapter.updateCssVariable(n,this.initialSize_+"px"),this.adapter.updateCssVariable(r,this.fgScale_),this.adapter.isUnbounded()&&(this.unboundedCoords_={left:Math.round(this.frame_.width/2-this.initialSize_/2),top:Math.round(this.frame_.height/2-this.initialSize_/2)},this.adapter.updateCssVariable(a,this.unboundedCoords_.left+"px"),this.adapter.updateCssVariable(i,this.unboundedCoords_.top+"px"))},t}(ie),Te=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.disabled=!1,t}return ee(t,e),t.attachTo=function(e,n){void 0===n&&(n={isUnbounded:void 0});var a=new t(e);return void 0!==n.isUnbounded&&(a.unbounded=n.isUnbounded),a},t.createAdapter=function(e){return{addClass:function(t){return e.root.classList.add(t)},browserSupportsCssVars:function(){return function(e,t){void 0===t&&(t=!1);var n,a=e.CSS;if("boolean"==typeof he&&!t)return he;if(!(a&&"function"==typeof a.supports))return!1;var i=a.supports("--css-vars","yes"),r=a.supports("(--css-vars: yes)")&&a.supports("color","#00000000");return n=i||r,t||(he=n),n}(window)},computeBoundingRect:function(){return e.root.getBoundingClientRect()},containsEventTarget:function(t){return e.root.contains(t)},deregisterDocumentInteractionHandler:function(e,t){return document.documentElement.removeEventListener(e,t,oe())},deregisterInteractionHandler:function(t,n){return e.root.removeEventListener(t,n,oe())},deregisterResizeHandler:function(e){return window.removeEventListener("resize",e)},getWindowPageOffset:function(){return{x:window.pageXOffset,y:window.pageYOffset}},isSurfaceActive:function(){return se(e.root,":active")},isSurfaceDisabled:function(){return Boolean(e.disabled)},isUnbounded:function(){return Boolean(e.unbounded)},registerDocumentInteractionHandler:function(e,t){return document.documentElement.addEventListener(e,t,oe())},registerInteractionHandler:function(t,n){return e.root.addEventListener(t,n,oe())},registerResizeHandler:function(e){return window.addEventListener("resize",e)},removeClass:function(t){return e.root.classList.remove(t)},updateCssVariable:function(t,n){return e.root.style.setProperty(t,n)}}},Object.defineProperty(t.prototype,"unbounded",{get:function(){return Boolean(this.unbounded_)},set:function(e){this.unbounded_=Boolean(e),this.setUnbounded_()},enumerable:!0,configurable:!0}),t.prototype.activate=function(){this.foundation.activate()},t.prototype.deactivate=function(){this.foundation.deactivate()},t.prototype.layout=function(){this.foundation.layout()},t.prototype.getDefaultFoundation=function(){return new xe(t.createAdapter(this))},t.prototype.initialSyncWithDOM=function(){var e=this.root;this.unbounded="mdcRippleIsUnbounded"in e.dataset},t.prototype.setUnbounded_=function(){this.foundation.setUnbounded(Boolean(this.unbounded_))},t}(re),we={ACTIVE:"mdc-tab-indicator--active",FADE:"mdc-tab-indicator--fade",NO_TRANSITION:"mdc-tab-indicator--no-transition"},$e={CONTENT_SELECTOR:".mdc-tab-indicator__content"},Se=function(e){function t(n){return e.call(this,te(te({},t.defaultAdapter),n))||this}return ee(t,e),Object.defineProperty(t,"cssClasses",{get:function(){return we},enumerable:!0,configurable:!0}),Object.defineProperty(t,"strings",{get:function(){return $e},enumerable:!0,configurable:!0}),Object.defineProperty(t,"defaultAdapter",{get:function(){return{addClass:function(){},removeClass:function(){},computeContentClientRect:function(){return{top:0,right:0,bottom:0,left:0,width:0,height:0}},setContentStyleProperty:function(){}}},enumerable:!0,configurable:!0}),t.prototype.computeContentClientRect=function(){return this.adapter.computeContentClientRect()},t}(ie),Oe=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ee(t,e),t.prototype.activate=function(){this.adapter.addClass(Se.cssClasses.ACTIVE)},t.prototype.deactivate=function(){this.adapter.removeClass(Se.cssClasses.ACTIVE)},t}(Se),Ie=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ee(t,e),t.prototype.activate=function(e){if(e){var t=this.computeContentClientRect(),n=e.width/t.width,a=e.left-t.left;this.adapter.addClass(Se.cssClasses.NO_TRANSITION),this.adapter.setContentStyleProperty("transform","translateX("+a+"px) scaleX("+n+")"),this.computeContentClientRect(),this.adapter.removeClass(Se.cssClasses.NO_TRANSITION),this.adapter.addClass(Se.cssClasses.ACTIVE),this.adapter.setContentStyleProperty("transform","")}else this.adapter.addClass(Se.cssClasses.ACTIVE)},t.prototype.deactivate=function(){this.adapter.removeClass(Se.cssClasses.ACTIVE)},t}(Se),Re=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ee(t,e),t.attachTo=function(e){return new t(e)},t.prototype.initialize=function(){this.content_=this.root.querySelector(Se.strings.CONTENT_SELECTOR)},t.prototype.computeContentClientRect=function(){return this.foundation.computeContentClientRect()},t.prototype.getDefaultFoundation=function(){var e=this,t={addClass:function(t){return e.root.classList.add(t)},removeClass:function(t){return e.root.classList.remove(t)},computeContentClientRect:function(){return e.content_.getBoundingClientRect()},setContentStyleProperty:function(t,n){return e.content_.style.setProperty(t,n)}};return this.root.classList.contains(Se.cssClasses.FADE)?new Oe(t):new Ie(t)},t.prototype.activate=function(e){this.foundation.activate(e)},t.prototype.deactivate=function(){this.foundation.deactivate()},t}(re),Ne={ACTIVE:"mdc-tab--active"},ke={ARIA_SELECTED:"aria-selected",CONTENT_SELECTOR:".mdc-tab__content",INTERACTED_EVENT:"MDCTab:interacted",RIPPLE_SELECTOR:".mdc-tab__ripple",TABINDEX:"tabIndex",TAB_INDICATOR_SELECTOR:".mdc-tab-indicator"},Fe=function(e){function t(n){var a=e.call(this,te(te({},t.defaultAdapter),n))||this;return a.focusOnActivate_=!0,a}return ee(t,e),Object.defineProperty(t,"cssClasses",{get:function(){return Ne},enumerable:!0,configurable:!0}),Object.defineProperty(t,"strings",{get:function(){return ke},enumerable:!0,configurable:!0}),Object.defineProperty(t,"defaultAdapter",{get:function(){return{addClass:function(){},removeClass:function(){},hasClass:function(){return!1},setAttr:function(){},activateIndicator:function(){},deactivateIndicator:function(){},notifyInteracted:function(){},getOffsetLeft:function(){return 0},getOffsetWidth:function(){return 0},getContentOffsetLeft:function(){return 0},getContentOffsetWidth:function(){return 0},focus:function(){}}},enumerable:!0,configurable:!0}),t.prototype.handleClick=function(){this.adapter.notifyInteracted()},t.prototype.isActive=function(){return this.adapter.hasClass(Ne.ACTIVE)},t.prototype.setFocusOnActivate=function(e){this.focusOnActivate_=e},t.prototype.activate=function(e){this.adapter.addClass(Ne.ACTIVE),this.adapter.setAttr(ke.ARIA_SELECTED,"true"),this.adapter.setAttr(ke.TABINDEX,"0"),this.adapter.activateIndicator(e),this.focusOnActivate_&&this.adapter.focus()},t.prototype.deactivate=function(){this.isActive()&&(this.adapter.removeClass(Ne.ACTIVE),this.adapter.setAttr(ke.ARIA_SELECTED,"false"),this.adapter.setAttr(ke.TABINDEX,"-1"),this.adapter.deactivateIndicator())},t.prototype.computeDimensions=function(){var e=this.adapter.getOffsetWidth(),t=this.adapter.getOffsetLeft(),n=this.adapter.getContentOffsetWidth(),a=this.adapter.getContentOffsetLeft();return{contentLeft:t+a,contentRight:t+a+n,rootLeft:t,rootRight:t+e}},t}(ie),Le=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ee(t,e),t.attachTo=function(e){return new t(e)},t.prototype.initialize=function(e,t){void 0===e&&(e=function(e,t){return new Te(e,t)}),void 0===t&&(t=function(e){return new Re(e)}),this.id=this.root.id;var n=this.root.querySelector(Fe.strings.RIPPLE_SELECTOR),a=te(te({},Te.createAdapter(this)),{addClass:function(e){return n.classList.add(e)},removeClass:function(e){return n.classList.remove(e)},updateCssVariable:function(e,t){return n.style.setProperty(e,t)}}),i=new xe(a);this.ripple_=e(this.root,i);var r=this.root.querySelector(Fe.strings.TAB_INDICATOR_SELECTOR);this.tabIndicator_=t(r),this.content_=this.root.querySelector(Fe.strings.CONTENT_SELECTOR)},t.prototype.initialSyncWithDOM=function(){var e=this;this.handleClick_=function(){return e.foundation.handleClick()},this.listen("click",this.handleClick_)},t.prototype.destroy=function(){this.unlisten("click",this.handleClick_),this.ripple_.destroy(),e.prototype.destroy.call(this)},t.prototype.getDefaultFoundation=function(){var e=this;return new Fe({setAttr:function(t,n){return e.root.setAttribute(t,n)},addClass:function(t){return e.root.classList.add(t)},removeClass:function(t){return e.root.classList.remove(t)},hasClass:function(t){return e.root.classList.contains(t)},activateIndicator:function(t){return e.tabIndicator_.activate(t)},deactivateIndicator:function(){return e.tabIndicator_.deactivate()},notifyInteracted:function(){return e.emit(Fe.strings.INTERACTED_EVENT,{tabId:e.id},!0)},getOffsetLeft:function(){return e.root.offsetLeft},getOffsetWidth:function(){return e.root.offsetWidth},getContentOffsetLeft:function(){return e.content_.offsetLeft},getContentOffsetWidth:function(){return e.content_.offsetWidth},focus:function(){return e.root.focus()}})},Object.defineProperty(t.prototype,"active",{get:function(){return this.foundation.isActive()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"focusOnActivate",{set:function(e){this.foundation.setFocusOnActivate(e)},enumerable:!0,configurable:!0}),t.prototype.activate=function(e){this.foundation.activate(e)},t.prototype.deactivate=function(){this.foundation.deactivate()},t.prototype.computeIndicatorClientRect=function(){return this.tabIndicator_.computeContentClientRect()},t.prototype.computeDimensions=function(){return this.foundation.computeDimensions()},t.prototype.focus=function(){this.root.focus()},t}(re),Be={ARROW_LEFT_KEY:"ArrowLeft",ARROW_RIGHT_KEY:"ArrowRight",END_KEY:"End",ENTER_KEY:"Enter",HOME_KEY:"Home",SPACE_KEY:"Space",TAB_ACTIVATED_EVENT:"MDCTabBar:activated",TAB_SCROLLER_SELECTOR:".mdc-tab-scroller",TAB_SELECTOR:".mdc-tab"},De={ARROW_LEFT_KEYCODE:37,ARROW_RIGHT_KEYCODE:39,END_KEYCODE:35,ENTER_KEYCODE:13,EXTRA_SCROLL_AMOUNT:20,HOME_KEYCODE:36,SPACE_KEYCODE:32},He=new Set;He.add(Be.ARROW_LEFT_KEY),He.add(Be.ARROW_RIGHT_KEY),He.add(Be.END_KEY),He.add(Be.HOME_KEY),He.add(Be.ENTER_KEY),He.add(Be.SPACE_KEY);var Ue=new Map;Ue.set(De.ARROW_LEFT_KEYCODE,Be.ARROW_LEFT_KEY),Ue.set(De.ARROW_RIGHT_KEYCODE,Be.ARROW_RIGHT_KEY),Ue.set(De.END_KEYCODE,Be.END_KEY),Ue.set(De.HOME_KEYCODE,Be.HOME_KEY),Ue.set(De.ENTER_KEYCODE,Be.ENTER_KEY),Ue.set(De.SPACE_KEYCODE,Be.SPACE_KEY);var qe=function(e){function t(n){var a=e.call(this,te(te({},t.defaultAdapter),n))||this;return a.useAutomaticActivation_=!1,a}return ee(t,e),Object.defineProperty(t,"strings",{get:function(){return Be},enumerable:!0,configurable:!0}),Object.defineProperty(t,"numbers",{get:function(){return De},enumerable:!0,configurable:!0}),Object.defineProperty(t,"defaultAdapter",{get:function(){return{scrollTo:function(){},incrementScroll:function(){},getScrollPosition:function(){return 0},getScrollContentWidth:function(){return 0},getOffsetWidth:function(){return 0},isRTL:function(){return!1},setActiveTab:function(){},activateTabAtIndex:function(){},deactivateTabAtIndex:function(){},focusTabAtIndex:function(){},getTabIndicatorClientRectAtIndex:function(){return{top:0,right:0,bottom:0,left:0,width:0,height:0}},getTabDimensionsAtIndex:function(){return{rootLeft:0,rootRight:0,contentLeft:0,contentRight:0}},getPreviousActiveTabIndex:function(){return-1},getFocusedTabIndex:function(){return-1},getIndexOfTabById:function(){return-1},getTabListLength:function(){return 0},notifyTabActivated:function(){}}},enumerable:!0,configurable:!0}),t.prototype.setUseAutomaticActivation=function(e){this.useAutomaticActivation_=e},t.prototype.activateTab=function(e){var t,n=this.adapter.getPreviousActiveTabIndex();this.indexIsInRange_(e)&&e!==n&&(-1!==n&&(this.adapter.deactivateTabAtIndex(n),t=this.adapter.getTabIndicatorClientRectAtIndex(n)),this.adapter.activateTabAtIndex(e,t),this.scrollIntoView(e),this.adapter.notifyTabActivated(e))},t.prototype.handleKeyDown=function(e){var t=this.getKeyFromEvent_(e);if(void 0!==t)if(this.isActivationKey_(t)||e.preventDefault(),this.useAutomaticActivation_){if(this.isActivationKey_(t))return;var n=this.determineTargetFromKey_(this.adapter.getPreviousActiveTabIndex(),t);this.adapter.setActiveTab(n),this.scrollIntoView(n)}else{var a=this.adapter.getFocusedTabIndex();if(this.isActivationKey_(t))this.adapter.setActiveTab(a);else{n=this.determineTargetFromKey_(a,t);this.adapter.focusTabAtIndex(n),this.scrollIntoView(n)}}},t.prototype.handleTabInteraction=function(e){this.adapter.setActiveTab(this.adapter.getIndexOfTabById(e.detail.tabId))},t.prototype.scrollIntoView=function(e){if(this.indexIsInRange_(e))return 0===e?this.adapter.scrollTo(0):e===this.adapter.getTabListLength()-1?this.adapter.scrollTo(this.adapter.getScrollContentWidth()):this.isRTL_()?this.scrollIntoViewRTL_(e):void this.scrollIntoView_(e)},t.prototype.determineTargetFromKey_=function(e,t){var n=this.isRTL_(),a=this.adapter.getTabListLength()-1,i=e;return t===Be.END_KEY?i=a:t===Be.ARROW_LEFT_KEY&&!n||t===Be.ARROW_RIGHT_KEY&&n?i-=1:t===Be.ARROW_RIGHT_KEY&&!n||t===Be.ARROW_LEFT_KEY&&n?i+=1:i=0,i<0?i=a:i>a&&(i=0),i},t.prototype.calculateScrollIncrement_=function(e,t,n,a){var i=this.adapter.getTabDimensionsAtIndex(t),r=i.contentLeft-n-a,o=i.contentRight-n-De.EXTRA_SCROLL_AMOUNT,s=r+De.EXTRA_SCROLL_AMOUNT;return t<e?Math.min(o,0):Math.max(s,0)},t.prototype.calculateScrollIncrementRTL_=function(e,t,n,a,i){var r=this.adapter.getTabDimensionsAtIndex(t),o=i-r.contentLeft-n,s=i-r.contentRight-n-a+De.EXTRA_SCROLL_AMOUNT,c=o-De.EXTRA_SCROLL_AMOUNT;return t>e?Math.max(s,0):Math.min(c,0)},t.prototype.findAdjacentTabIndexClosestToEdge_=function(e,t,n,a){var i=t.rootLeft-n,r=t.rootRight-n-a,o=i+r;return i<0||o<0?e-1:r>0||o>0?e+1:-1},t.prototype.findAdjacentTabIndexClosestToEdgeRTL_=function(e,t,n,a,i){var r=i-t.rootLeft-a-n,o=i-t.rootRight-n,s=r+o;return r>0||s>0?e+1:o<0||s<0?e-1:-1},t.prototype.getKeyFromEvent_=function(e){return He.has(e.key)?e.key:Ue.get(e.keyCode)},t.prototype.isActivationKey_=function(e){return e===Be.SPACE_KEY||e===Be.ENTER_KEY},t.prototype.indexIsInRange_=function(e){return e>=0&&e<this.adapter.getTabListLength()},t.prototype.isRTL_=function(){return this.adapter.isRTL()},t.prototype.scrollIntoView_=function(e){var t=this.adapter.getScrollPosition(),n=this.adapter.getOffsetWidth(),a=this.adapter.getTabDimensionsAtIndex(e),i=this.findAdjacentTabIndexClosestToEdge_(e,a,t,n);if(this.indexIsInRange_(i)){var r=this.calculateScrollIncrement_(e,i,t,n);this.adapter.incrementScroll(r)}},t.prototype.scrollIntoViewRTL_=function(e){var t=this.adapter.getScrollPosition(),n=this.adapter.getOffsetWidth(),a=this.adapter.getTabDimensionsAtIndex(e),i=this.adapter.getScrollContentWidth(),r=this.findAdjacentTabIndexClosestToEdgeRTL_(e,a,t,n,i);if(this.indexIsInRange_(r)){var o=this.calculateScrollIncrementRTL_(e,r,t,n,i);this.adapter.incrementScroll(o)}},t}(ie),Me=qe.strings,We=0,Pe=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ee(t,e),t.attachTo=function(e){return new t(e)},Object.defineProperty(t.prototype,"focusOnActivate",{set:function(e){this.tabList_.forEach((function(t){return t.focusOnActivate=e}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"useAutomaticActivation",{set:function(e){this.foundation.setUseAutomaticActivation(e)},enumerable:!0,configurable:!0}),t.prototype.initialize=function(e,t){void 0===e&&(e=function(e){return new Le(e)}),void 0===t&&(t=function(e){return new ge(e)}),this.tabList_=this.instantiateTabs_(e),this.tabScroller_=this.instantiateTabScroller_(t)},t.prototype.initialSyncWithDOM=function(){var e=this;this.handleTabInteraction_=function(t){return e.foundation.handleTabInteraction(t)},this.handleKeyDown_=function(t){return e.foundation.handleKeyDown(t)},this.listen(Fe.strings.INTERACTED_EVENT,this.handleTabInteraction_),this.listen("keydown",this.handleKeyDown_);for(var t=0;t<this.tabList_.length;t++)if(this.tabList_[t].active){this.scrollIntoView(t);break}},t.prototype.destroy=function(){e.prototype.destroy.call(this),this.unlisten(Fe.strings.INTERACTED_EVENT,this.handleTabInteraction_),this.unlisten("keydown",this.handleKeyDown_),this.tabList_.forEach((function(e){return e.destroy()})),this.tabScroller_&&this.tabScroller_.destroy()},t.prototype.getDefaultFoundation=function(){var e=this;return new qe({scrollTo:function(t){return e.tabScroller_.scrollTo(t)},incrementScroll:function(t){return e.tabScroller_.incrementScroll(t)},getScrollPosition:function(){return e.tabScroller_.getScrollPosition()},getScrollContentWidth:function(){return e.tabScroller_.getScrollContentWidth()},getOffsetWidth:function(){return e.root.offsetWidth},isRTL:function(){return"rtl"===window.getComputedStyle(e.root).getPropertyValue("direction")},setActiveTab:function(t){return e.foundation.activateTab(t)},activateTabAtIndex:function(t,n){return e.tabList_[t].activate(n)},deactivateTabAtIndex:function(t){return e.tabList_[t].deactivate()},focusTabAtIndex:function(t){return e.tabList_[t].focus()},getTabIndicatorClientRectAtIndex:function(t){return e.tabList_[t].computeIndicatorClientRect()},getTabDimensionsAtIndex:function(t){return e.tabList_[t].computeDimensions()},getPreviousActiveTabIndex:function(){for(var t=0;t<e.tabList_.length;t++)if(e.tabList_[t].active)return t;return-1},getFocusedTabIndex:function(){var t=e.getTabElements_(),n=document.activeElement;return t.indexOf(n)},getIndexOfTabById:function(t){for(var n=0;n<e.tabList_.length;n++)if(e.tabList_[n].id===t)return n;return-1},getTabListLength:function(){return e.tabList_.length},notifyTabActivated:function(t){return e.emit(Me.TAB_ACTIVATED_EVENT,{index:t},!0)}})},t.prototype.activateTab=function(e){this.foundation.activateTab(e)},t.prototype.scrollIntoView=function(e){this.foundation.scrollIntoView(e)},t.prototype.getTabElements_=function(){return[].slice.call(this.root.querySelectorAll(Me.TAB_SELECTOR))},t.prototype.instantiateTabs_=function(e){return this.getTabElements_().map((function(t){return t.id=t.id||"mdc-tab-"+ ++We,e(t)}))},t.prototype.instantiateTabScroller_=function(e){var t=this.root.querySelector(Me.TAB_SCROLLER_SELECTOR);return t?e(t):null},t}(re);var ze=e=>{let t=new Pe(document.querySelector(".mdc-tab-bar")).tabList_[e].content_.firstElementChild.innerText.toLowerCase();window.history.pushState("","","?"+t)};var Ge=e=>{const t=document.querySelector("#content");t&&e.removeChild(t);const n=document.createElement("main");n.setAttribute("id","content");let a=document.querySelector("footer");return e.insertBefore(n,a),n};var je=e=>{const t=document.querySelector("body");let n=Ge(t);switch(window.scrollTo(0,0),e){case 0:H(n),ze(e);break;case 1:q(n),ze(e);break;case 2:z(n),ze(e);break;case 3:X(n),ze(e)}};var Ye=(e=0)=>{const t=document.querySelector("body");i(t);const n=document.createElement("main");n.setAttribute("id","content"),t.appendChild(n),(e=>{let t=document.createElement("footer");t.setAttribute("class","footer");let n=document.createElement("p");n.innerHTML="© Tribe 2018. All rights reserved",t.appendChild(n),e.appendChild(t)})(t),t.addEventListener("MDCTabBar:activated",e=>{je(e.detail.index)});new Pe(document.querySelector(".mdc-tab-bar")).activateTab(e)};n(3),n(5);switch(window.location.search){case"?hours":Ye(0);break;case"?menus":Ye(1);break;case"?manifesto":Ye(2);break;case"?contact":Ye(3);break;default:document.onload=Ye(0)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlL3Jlc2V0LnNjc3M/MTRhOCIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGUvcmVzZXQuc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGUvc3R5bGUuc2Nzcz9lNmNkIiwid2VicGFjazovLy8uL3NyYy9zdHlsZS9zdHlsZS5zY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2J1aWxkZXJzL2J1aWxkVGFiLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3JlbmRlck5hdi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9mb290ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltZy9ob3Vyc0JhY2tncm91bmRDbGlwLmpwZyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hcnRpY2xlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NvbG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9idWlsZGVycy9idWlsZEhvdXJzQ2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9idWlsZGVycy9idWlsZEFkZHJlc3NDYXJkLmpzIiwid2VicGFjazovLy8uL3NyYy9pbWcvVHJpYmVTa2V3ZXJzLmpwZyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9idWlsZGVycy9tZW51cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWVudXMvcmVuZGVyQnJ1bmNoLmpzIiwid2VicGFjazovLy8uL3NyYy9pbWcvVHJpYmVTYWxhZC5qcGciLCJ3ZWJwYWNrOi8vLy4vc3JjL21lbnVzL3JlbmRlckx1bmNoLmpzIiwid2VicGFjazovLy8uL3NyYy9pbWcvVHJpYmVDaGFyY3V0ZXJpZS5qcGciLCJ3ZWJwYWNrOi8vLy4vc3JjL21lbnVzL3JlbmRlclNtYWxsLmpzIiwid2VicGFjazovLy8uL3NyYy9pbWcvVHJpYmVPZmZlcmluZy5qcGciLCJ3ZWJwYWNrOi8vLy4vc3JjL21lbnVzL3JlbmRlckJpZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1nL1RyaWJlUGl6emEyLmpwZyIsIndlYnBhY2s6Ly8vLi9zcmMvbWVudXMvcmVuZGVyRmxhdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1nL1RyaWJlRGVzc2VydC5qcGciLCJ3ZWJwYWNrOi8vLy4vc3JjL21lbnVzL3JlbmRlclN3ZWV0LmpzIiwid2VicGFjazovLy8uL3NyYy9pbWcvVHJpYmVDb2ZmZWUuanBnIiwid2VicGFjazovLy8uL3NyYy9tZW51cy9yZW5kZXJDb2ZmZWUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltZy9UcmliZU9yYW5nZXMuanBnIiwid2VicGFjazovLy8uL3NyYy9tZW51cy9yZW5kZXJDb2NrdGFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRyb2xsZXJzL3JlZnJlc2hNZW51LmpzIiwid2VicGFjazovLy8uL3NyYy9jb250cm9sbGVycy9tZW51Q29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9oZXJvLmpzIiwid2VicGFjazovLy8uL3NyYy9pbWcvbG9nby5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvcmVuZGVyTG9nby5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvcmVuZGVySG91cnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltZy9tZW51QmFja2dyb3VuZENsaXAuanBnIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9yZW5kZXJNZW51cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1nL21hbmlmZXN0b0JhY2tncm91bmRDbGlwLmpwZyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9idWlsZGVycy9idWlsZEFib3V0VXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYnVpbGRlcnMvYnVpbGRBZ3JlZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL3JlbmRlck1hbmlmZXN0by5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1nL2NvbnRhY3RCYWNrZ3JvdW5kLmpwZyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9idWlsZGVycy9idWlsZEV2ZW50Q2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1nL2NhbGwtYmxhY2stMThkcC5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYnVpbGRlcnMvYnVpbGRDb250YWN0Q2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9idWlsZGVycy9idWlsZElucHV0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2J1aWxkZXJzL2J1aWxkQnV0dG9uLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2J1aWxkZXJzL2J1aWxkTWVzc2FnZUNhcmQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYnVpbGRlcnMvYnVpbGRNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL3JlbmRlckNvbnRhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2Jhc2UvZm91bmRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2Jhc2UvY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvZG9tL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2RvbS9wb255ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RhYi1zY3JvbGxlci9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC90YWItc2Nyb2xsZXIvdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RhYi1zY3JvbGxlci9ydGwtc2Nyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC90YWItc2Nyb2xsZXIvcnRsLWRlZmF1bHQtc2Nyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC90YWItc2Nyb2xsZXIvcnRsLW5lZ2F0aXZlLXNjcm9sbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdGFiLXNjcm9sbGVyL3J0bC1yZXZlcnNlLXNjcm9sbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdGFiLXNjcm9sbGVyL2ZvdW5kYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC90YWItc2Nyb2xsZXIvY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvcmlwcGxlL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9yaXBwbGUvY29uc3RhbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvcmlwcGxlL2ZvdW5kYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9yaXBwbGUvY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdGFiLWluZGljYXRvci9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC90YWItaW5kaWNhdG9yL2ZvdW5kYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC90YWItaW5kaWNhdG9yL2ZhZGluZy1mb3VuZGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdGFiLWluZGljYXRvci9zbGlkaW5nLWZvdW5kYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC90YWItaW5kaWNhdG9yL2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RhYi9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC90YWIvZm91bmRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RhYi9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC90YWItYmFyL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RhYi1iYXIvZm91bmRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RhYi1iYXIvY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9jb250cm9sbGVycy91cGRhdGVVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRyb2xsZXJzL2NsZWFyQ29udGVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udHJvbGxlcnMvZGlzcGxheUNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRyb2xsZXJzL3BhZ2VMb2FkLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInVzZVNvdXJjZU1hcCIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsImNzc01hcHBpbmciLCJidG9hIiwic291cmNlTWFwcGluZyIsInNvdXJjZU1hcCIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJjb25jYXQiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJqb2luIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJkZWR1cGUiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwibGVuZ3RoIiwiaWQiLCJfaSIsInB1c2giLCJtZW1vIiwiaXNPbGRJRSIsIkJvb2xlYW4iLCJ3aW5kb3ciLCJkb2N1bWVudCIsImFsbCIsImF0b2IiLCJnZXRUYXJnZXQiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXgiLCJvYmoiLCJjc3MiLCJtZWRpYSIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJrZXlzIiwiZm9yRWFjaCIsInNldEF0dHJpYnV0ZSIsImluc2VydCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInJlbW92ZSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwbHlUb1RhZyIsInJlbW92ZUF0dHJpYnV0ZSIsImZpcnN0Q2hpbGQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwidXBkYXRlIiwic3R5bGVJbmRleCIsInBhcmVudE5vZGUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJuZXdPYmoiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4Iiwic3BsaWNlIiwiYXBpIiwiZGVmYXVsdCIsImxvY2FscyIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwidGFiIiwidGFiQ29udGVudCIsInRhYlRleHQiLCJpbm5lckhUTUwiLCJ0YWJJbmRpY2F0b3IiLCJ0YWJJbmRpY2F0b3JDbnQiLCJ0YWJSaXBwbGUiLCJ0YWJCYXIiLCJ0YWJTY3JvbGxlciIsInRhYlNjcm9sbGVyU2EiLCJ0YWJTY3JvbGxlclNjIiwiYWJvdXRUYWIiLCJtZW51c1RhYiIsIm1hbmlmZXN0b1RhYiIsImNvbnRhY3RUYWIiLCJjaGFuZ2VGb290ZXJDb2xvciIsImNvbG9yIiwicmVuZGVyQXJ0aWNsZSIsImFydGljbGUiLCJidWlsZEFydGljbGVDYXJkIiwidGl0bGUiLCJ0ZXh0IiwiaG9sZGVyIiwiYm9keSIsInJlbmRlckFydGljbGVUaXRsZSIsInRhYkNvbG9ycyIsImNvbG9yUGlja2VyIiwibnVtYmVyIiwiaG91cnNUZXh0IiwiaG91cnNDYXJkIiwiYWRkcmVzc1RleHQiLCJhZGRyZXNzQ2FyZCIsImJ1aWxkTWVudVRpdGxlIiwidGl0bGVUZXh0IiwiYmx1cmJUZXh0IiwibWVudUFydGljbGUiLCJibHVyYiIsImJ1aWxkTWVudUl0ZW0iLCJwcmMiLCJpbmdyZWQiLCJhZGRvbnMiLCJ0aXRsZUhvbGRlciIsInByaWNlIiwiaW5ncmVkaWVudHMiLCJhZGRvblRleHQiLCJtZW51SG9sZGVyIiwidXBkYXRlSGVyb1BpYyIsIm1lbnVEaXYiLCJiZW5ueUZCIiwiYmV0RkIiLCJsb3hGQiIsInN0YXJ0RGl2Iiwic3RhcnRUaXRsZSIsImVudHJlZURpdiIsImVudHJlZVRpdGxlIiwiZmxhdERpdiIsImZsYXRUaXRsZSIsInJvY2tldFNhbGFkIiwienVwcGEiLCJsZEVnZ3MiLCJ0cmliZVNhbGFkIiwiYnJlYWQiLCJwcm9zY3VpdHRvU2FsbW9uIiwiYmFobk1pIiwidGhlQnVyZ2VyIiwibWFjTkNoZWVzZSIsIm1hcnJha2VzaCIsInNwcm91dCIsInNuYXBEcmVzIiwic2FsdExpY2siLCJzSG9sZGVyIiwiZUhvbGRlciIsImZIb2xkZXIiLCJjaGVmQm9hcmQiLCJjaGFyY3V0IiwidGh1bXAiLCJwb3V0aW5lIiwidG9tYXRvZXMiLCJzcHJlYWQiLCJwb3J0byIsImdvakNoaWNrIiwibW91c2FrYSIsIm11c3NlbHMiLCJlY01hYyIsImZ1bmdGcm9tIiwicnVzdGljbyIsInNlb3VsIiwiZnJlZUxvdmUiLCJjb3BlbmhhZyIsImNob2NvQ2FrZSIsInNob3J0QnJlYWQiLCJsZW1vbiIsImdlbGF0byIsImNob2NvUG90IiwiYW1lcmljYW5vIiwiZXNwcmVzc28iLCJsYXR0ZSIsImNhcHB1Y2Npbm8iLCJ0ZWFMYXR0ZSIsInNsb3dDb2YiLCJtb2NoYSIsImVhcnRoQ2hlcnJ5IiwiZ2VudCIsInBpbmsiLCJjYWVzYXIiLCJtYWlUYWkiLCJodWxhIiwicGVyZk1hcmciLCJ6b21iaWUiLCJzb2xhciIsInJhc3BNYXJnIiwiZmxvYXQiLCJtZW51IiwicmVuZGVySGVybyIsImltYWdlIiwiaW1hZ2VEaXYiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJib3JkZXJCb3R0b20iLCJ0ZXh0RGl2IiwiaW1nIiwiZHJvcGRvd24iLCJzZWxlY3QiLCJjaG9vc2VPcHQiLCJicnVuY2hPcHQiLCJsdW5jaE9wdCIsInNtYWxsT3B0IiwiYmlnT3B0IiwiZmxhdE9wdCIsInN3ZWV0T3B0IiwiY29mZmVlT3B0IiwiY29ja3RhaWxPcHQiLCJjaGlsZHJlbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW5kZXJIZXJvTWVudSIsInAxIiwicDIiLCJwMyIsInA0IiwiYWxpZ25TZWxmIiwidWwiLCJhZ3JlZW1lbnRzIiwibGkiLCJldmVudENhcmQiLCJ0ZWwiLCJlbWFpbCIsImNvbnRhY3RUZXh0IiwiY29udGFjdENhcmQiLCJidWlsZElucHV0IiwiaW5wdXQiLCJsYWJlbCIsInRleHRMZW5ndGgiLCJzdWJtaXRCdXR0b24iLCJmb3JtIiwiZm9ybUhlYWRlciIsImluZm9EaXYiLCJuYW1lSW5wdXQiLCJlbWFpbElucHV0IiwibWVzc2FnZUlucHV0IiwidGV4dGFyZWEiLCJidWlsZFRleHRBcmVhIiwibWVzc2FnZURpdiIsImNvbnRhaW5lciIsImRpc3BsYXkiLCJmcmFtZSIsImV4dGVuZFN0YXRpY3MiLCJiIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsIl9fZXh0ZW5kcyIsIl9fIiwiY29uc3RydWN0b3IiLCJfX2Fzc2lnbiIsImFzc2lnbiIsImFyZ3VtZW50cyIsImFwcGx5IiwiX19yZWFkIiwiaXRlcmF0b3IiLCJhciIsIm5leHQiLCJkb25lIiwiZXJyb3IiLCJfX3NwcmVhZCIsIk1EQ0ZvdW5kYXRpb24iLCJhZGFwdGVyIiwiY29uZmlndXJhYmxlIiwiaW5pdCIsImRlc3Ryb3kiLCJNRENDb21wb25lbnQiLCJyb290IiwiZm91bmRhdGlvbiIsImFyZ3MiLCJpbml0aWFsaXplIiwidW5kZWZpbmVkIiwiZ2V0RGVmYXVsdEZvdW5kYXRpb24iLCJpbml0aWFsU3luY1dpdGhET00iLCJhdHRhY2hUbyIsIl9hcmdzIiwibGlzdGVuIiwiZXZ0VHlwZSIsImhhbmRsZXIiLCJ1bmxpc3RlbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJlbWl0IiwiZXZ0RGF0YSIsInNob3VsZEJ1YmJsZSIsImV2dCIsIkN1c3RvbUV2ZW50IiwiYnViYmxlcyIsImRldGFpbCIsImNyZWF0ZUV2ZW50IiwiaW5pdEN1c3RvbUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImFwcGx5UGFzc2l2ZSIsImdsb2JhbE9iaiIsInBhc3NpdmVTdXBwb3J0ZWQiLCJlcnIiLCJzdXBwb3J0c1Bhc3NpdmVPcHRpb24iLCJwYXNzaXZlIiwibWF0Y2hlcyIsImVsZW1lbnQiLCJzZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiaG9yaXpvbnRhbFNjcm9sbGJhckhlaWdodF8iLCJjc3NDbGFzc2VzIiwiQU5JTUFUSU5HIiwiU0NST0xMX0FSRUFfU0NST0xMIiwiU0NST0xMX1RFU1QiLCJzdHJpbmdzIiwiQVJFQV9TRUxFQ1RPUiIsIkNPTlRFTlRfU0VMRUNUT1IiLCJNRENUYWJTY3JvbGxlclJUTCIsIl9zdXBlciIsIk1EQ1RhYlNjcm9sbGVyUlRMRGVmYXVsdCIsImdldFNjcm9sbFBvc2l0aW9uUlRMIiwiY3VycmVudFNjcm9sbExlZnQiLCJnZXRTY3JvbGxBcmVhU2Nyb2xsTGVmdCIsInJpZ2h0IiwiY2FsY3VsYXRlU2Nyb2xsRWRnZXNfIiwiTWF0aCIsInJvdW5kIiwic2Nyb2xsVG9SVEwiLCJzY3JvbGxYIiwiZWRnZXMiLCJjbGFtcGVkU2Nyb2xsTGVmdCIsImNsYW1wU2Nyb2xsVmFsdWVfIiwiZmluYWxTY3JvbGxQb3NpdGlvbiIsInNjcm9sbERlbHRhIiwiaW5jcmVtZW50U2Nyb2xsUlRMIiwiZ2V0QW5pbWF0aW5nU2Nyb2xsUG9zaXRpb24iLCJsZWZ0IiwiZ2V0U2Nyb2xsQ29udGVudE9mZnNldFdpZHRoIiwiZ2V0U2Nyb2xsQXJlYU9mZnNldFdpZHRoIiwibWluIiwibWF4IiwiTURDVGFiU2Nyb2xsZXJSVExOZWdhdGl2ZSIsInRyYW5zbGF0ZVgiLCJjb250ZW50V2lkdGgiLCJNRENUYWJTY3JvbGxlclJUTFJldmVyc2UiLCJNRENUYWJTY3JvbGxlckZvdW5kYXRpb24iLCJfdGhpcyIsImRlZmF1bHRBZGFwdGVyIiwiaXNBbmltYXRpbmdfIiwiZXZlbnRUYXJnZXRNYXRjaGVzU2VsZWN0b3IiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwiYWRkU2Nyb2xsQXJlYUNsYXNzIiwic2V0U2Nyb2xsQXJlYVN0eWxlUHJvcGVydHkiLCJzZXRTY3JvbGxDb250ZW50U3R5bGVQcm9wZXJ0eSIsImdldFNjcm9sbENvbnRlbnRTdHlsZVZhbHVlIiwic2V0U2Nyb2xsQXJlYVNjcm9sbExlZnQiLCJjb21wdXRlU2Nyb2xsQXJlYUNsaWVudFJlY3QiLCJ0b3AiLCJib3R0b20iLCJ3aWR0aCIsImhlaWdodCIsImNvbXB1dGVTY3JvbGxDb250ZW50Q2xpZW50UmVjdCIsImNvbXB1dGVIb3Jpem9udGFsU2Nyb2xsYmFySGVpZ2h0IiwiaG9yaXpvbnRhbFNjcm9sbGJhckhlaWdodCIsImdldFNjcm9sbFBvc2l0aW9uIiwiaXNSVExfIiwiY29tcHV0ZUN1cnJlbnRTY3JvbGxQb3NpdGlvblJUTF8iLCJjdXJyZW50VHJhbnNsYXRlWCIsImNhbGN1bGF0ZUN1cnJlbnRUcmFuc2xhdGVYXyIsImhhbmRsZUludGVyYWN0aW9uIiwic3RvcFNjcm9sbEFuaW1hdGlvbl8iLCJoYW5kbGVUcmFuc2l0aW9uRW5kIiwiZXZ0VGFyZ2V0IiwiaW5jcmVtZW50U2Nyb2xsIiwic2Nyb2xsWEluY3JlbWVudCIsImFuaW1hdGVfIiwiZ2V0SW5jcmVtZW50U2Nyb2xsT3BlcmF0aW9uXyIsImluY3JlbWVudFNjcm9sbEltbWVkaWF0ZSIsIm9wZXJhdGlvbiIsInNjcm9sbFRvIiwic2Nyb2xsVG9SVExfIiwic2Nyb2xsVG9fIiwiZ2V0UlRMU2Nyb2xsZXIiLCJydGxTY3JvbGxlckluc3RhbmNlXyIsInJ0bFNjcm9sbGVyRmFjdG9yeV8iLCJ0cmFuc2Zvcm1WYWx1ZSIsIm1hdGNoIiwiZXhlYyIsIl9hIiwic3BsaXQiLCJ0eCIsInBhcnNlRmxvYXQiLCJjdXJyZW50U2Nyb2xsWCIsInNhZmVTY3JvbGxYIiwiYW5pbWF0aW9uIiwidGFyZ2V0U2Nyb2xsWCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImN1cnJlbnRTY3JvbGxQb3NpdGlvbiIsImdldEFuaW1hdGluZ1Njcm9sbFBvc2l0aW9uXyIsInNjcm9sbExlZnQiLCJpbml0aWFsU2Nyb2xsTGVmdCIsIm5ld1Njcm9sbExlZnQiLCJyb290Q2xpZW50UmVjdCIsImNvbnRlbnRDbGllbnRSZWN0IiwicmlnaHRFZGdlRGVsdGEiLCJzdXBwb3J0c0Nzc1ZhcmlhYmxlc18iLCJNRENUYWJTY3JvbGxlciIsImFyZWFfIiwiY29udGVudF8iLCJoYW5kbGVJbnRlcmFjdGlvbl8iLCJoYW5kbGVUcmFuc2l0aW9uRW5kXyIsImNsYXNzTmFtZSIsImNsYXNzTGlzdCIsImFkZCIsInByb3AiLCJzZXRQcm9wZXJ0eSIsInByb3BOYW1lIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJvZmZzZXRXaWR0aCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImRvY3VtZW50T2JqIiwic2hvdWxkQ2FjaGVSZXN1bHQiLCJlbCIsIm9mZnNldEhlaWdodCIsImNsaWVudEhlaWdodCIsImdldFNjcm9sbENvbnRlbnRXaWR0aCIsIkJHX0ZPQ1VTRUQiLCJGR19BQ1RJVkFUSU9OIiwiRkdfREVBQ1RJVkFUSU9OIiwiUk9PVCIsIlVOQk9VTkRFRCIsIlZBUl9GR19TQ0FMRSIsIlZBUl9GR19TSVpFIiwiVkFSX0ZHX1RSQU5TTEFURV9FTkQiLCJWQVJfRkdfVFJBTlNMQVRFX1NUQVJUIiwiVkFSX0xFRlQiLCJWQVJfVE9QIiwibnVtYmVycyIsIkRFQUNUSVZBVElPTl9USU1FT1VUX01TIiwiRkdfREVBQ1RJVkFUSU9OX01TIiwiSU5JVElBTF9PUklHSU5fU0NBTEUiLCJQQURESU5HIiwiVEFQX0RFTEFZX01TIiwiQUNUSVZBVElPTl9FVkVOVF9UWVBFUyIsIlBPSU5URVJfREVBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTIiwiYWN0aXZhdGVkVGFyZ2V0cyIsIk1EQ1JpcHBsZUZvdW5kYXRpb24iLCJhY3RpdmF0aW9uQW5pbWF0aW9uSGFzRW5kZWRfIiwiYWN0aXZhdGlvblRpbWVyXyIsImZnRGVhY3RpdmF0aW9uUmVtb3ZhbFRpbWVyXyIsImZnU2NhbGVfIiwiZnJhbWVfIiwiaW5pdGlhbFNpemVfIiwibGF5b3V0RnJhbWVfIiwibWF4UmFkaXVzXyIsInVuYm91bmRlZENvb3Jkc18iLCJhY3RpdmF0aW9uU3RhdGVfIiwiZGVmYXVsdEFjdGl2YXRpb25TdGF0ZV8iLCJhY3RpdmF0aW9uVGltZXJDYWxsYmFja18iLCJydW5EZWFjdGl2YXRpb25VWExvZ2ljSWZSZWFkeV8iLCJhY3RpdmF0ZUhhbmRsZXJfIiwiYWN0aXZhdGVfIiwiZGVhY3RpdmF0ZUhhbmRsZXJfIiwiZGVhY3RpdmF0ZV8iLCJmb2N1c0hhbmRsZXJfIiwiaGFuZGxlRm9jdXMiLCJibHVySGFuZGxlcl8iLCJoYW5kbGVCbHVyIiwicmVzaXplSGFuZGxlcl8iLCJsYXlvdXQiLCJicm93c2VyU3VwcG9ydHNDc3NWYXJzIiwiY29tcHV0ZUJvdW5kaW5nUmVjdCIsImNvbnRhaW5zRXZlbnRUYXJnZXQiLCJkZXJlZ2lzdGVyRG9jdW1lbnRJbnRlcmFjdGlvbkhhbmRsZXIiLCJkZXJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyIiwiZGVyZWdpc3RlclJlc2l6ZUhhbmRsZXIiLCJnZXRXaW5kb3dQYWdlT2Zmc2V0IiwieCIsInkiLCJpc1N1cmZhY2VBY3RpdmUiLCJpc1N1cmZhY2VEaXNhYmxlZCIsImlzVW5ib3VuZGVkIiwicmVnaXN0ZXJEb2N1bWVudEludGVyYWN0aW9uSGFuZGxlciIsInJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyIiwicmVnaXN0ZXJSZXNpemVIYW5kbGVyIiwidXBkYXRlQ3NzVmFyaWFibGUiLCJzdXBwb3J0c1ByZXNzUmlwcGxlIiwic3VwcG9ydHNQcmVzc1JpcHBsZV8iLCJyZWdpc3RlclJvb3RIYW5kbGVyc18iLCJST09UXzEiLCJVTkJPVU5ERURfMSIsImxheW91dEludGVybmFsXyIsImNsZWFyVGltZW91dCIsIlJPT1RfMiIsIlVOQk9VTkRFRF8yIiwicmVtb3ZlQ3NzVmFyc18iLCJkZXJlZ2lzdGVyUm9vdEhhbmRsZXJzXyIsImRlcmVnaXN0ZXJEZWFjdGl2YXRpb25IYW5kbGVyc18iLCJhY3RpdmF0ZSIsImRlYWN0aXZhdGUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInNldFVuYm91bmRlZCIsInVuYm91bmRlZCIsImFjdGl2YXRpb25FdmVudCIsImhhc0RlYWN0aXZhdGlvblVYUnVuIiwiaXNBY3RpdmF0ZWQiLCJpc1Byb2dyYW1tYXRpYyIsIndhc0FjdGl2YXRlZEJ5UG9pbnRlciIsIndhc0VsZW1lbnRNYWRlQWN0aXZlIiwicmVnaXN0ZXJEZWFjdGl2YXRpb25IYW5kbGVyc18iLCJ0eXBlIiwicmlwcGxlU3RyaW5ncyIsImluZGV4T2YiLCJhY3RpdmF0aW9uU3RhdGUiLCJwcmV2aW91c0FjdGl2YXRpb25FdmVudCIsInByZXZpb3VzQWN0aXZhdGlvbkV2ZW50XyIsInNvbWUiLCJyZXNldEFjdGl2YXRpb25TdGF0ZV8iLCJjaGVja0VsZW1lbnRNYWRlQWN0aXZlXyIsImFuaW1hdGVBY3RpdmF0aW9uXyIsImtleUNvZGUiLCJfYiIsInRyYW5zbGF0ZVN0YXJ0IiwidHJhbnNsYXRlRW5kIiwiX2MiLCJnZXRGZ1RyYW5zbGF0aW9uQ29vcmRpbmF0ZXNfIiwic3RhcnRQb2ludCIsImVuZFBvaW50Iiwicm1Cb3VuZGVkQWN0aXZhdGlvbkNsYXNzZXNfIiwic2V0VGltZW91dCIsInBhZ2VPZmZzZXQiLCJjbGllbnRSZWN0Iiwibm9ybWFsaXplZFgiLCJub3JtYWxpemVkWSIsImRvY3VtZW50WCIsImRvY3VtZW50WSIsInRvdWNoRXZlbnQiLCJjaGFuZ2VkVG91Y2hlcyIsInBhZ2VYIiwicGFnZVkiLCJtb3VzZUV2ZW50IiwiZ2V0Tm9ybWFsaXplZEV2ZW50Q29vcmRzIiwic3RhdGUiLCJhbmltYXRlRGVhY3RpdmF0aW9uXyIsIm1heERpbSIsInNxcnQiLCJwb3ciLCJpbml0aWFsU2l6ZSIsImZsb29yIiwidXBkYXRlTGF5b3V0Q3NzVmFyc18iLCJNRENSaXBwbGUiLCJkaXNhYmxlZCIsIm9wdHMiLCJyaXBwbGUiLCJjcmVhdGVBZGFwdGVyIiwiaW5zdGFuY2UiLCJ3aW5kb3dPYmoiLCJmb3JjZVJlZnJlc2giLCJzdXBwb3J0c0Nzc1ZhcnMiLCJDU1MiLCJzdXBwb3J0cyIsImV4cGxpY2l0bHlTdXBwb3J0c0Nzc1ZhcnMiLCJ3ZUFyZUZlYXR1cmVEZXRlY3RpbmdTYWZhcmkxMHBsdXMiLCJjb250YWlucyIsImRvY3VtZW50RWxlbWVudCIsInBhZ2VYT2Zmc2V0IiwicGFnZVlPZmZzZXQiLCJ2YXJOYW1lIiwidW5ib3VuZGVkXyIsInNldCIsInNldFVuYm91bmRlZF8iLCJkYXRhc2V0IiwiQUNUSVZFIiwiRkFERSIsIk5PX1RSQU5TSVRJT04iLCJNRENUYWJJbmRpY2F0b3JGb3VuZGF0aW9uIiwiY29tcHV0ZUNvbnRlbnRDbGllbnRSZWN0Iiwic2V0Q29udGVudFN0eWxlUHJvcGVydHkiLCJNRENGYWRpbmdUYWJJbmRpY2F0b3JGb3VuZGF0aW9uIiwiTURDU2xpZGluZ1RhYkluZGljYXRvckZvdW5kYXRpb24iLCJwcmV2aW91c0luZGljYXRvckNsaWVudFJlY3QiLCJjdXJyZW50Q2xpZW50UmVjdCIsIndpZHRoRGVsdGEiLCJ4UG9zaXRpb24iLCJNRENUYWJJbmRpY2F0b3IiLCJBUklBX1NFTEVDVEVEIiwiSU5URVJBQ1RFRF9FVkVOVCIsIlJJUFBMRV9TRUxFQ1RPUiIsIlRBQklOREVYIiwiVEFCX0lORElDQVRPUl9TRUxFQ1RPUiIsIk1EQ1RhYkZvdW5kYXRpb24iLCJmb2N1c09uQWN0aXZhdGVfIiwiaGFzQ2xhc3MiLCJzZXRBdHRyIiwiYWN0aXZhdGVJbmRpY2F0b3IiLCJkZWFjdGl2YXRlSW5kaWNhdG9yIiwibm90aWZ5SW50ZXJhY3RlZCIsImdldE9mZnNldExlZnQiLCJnZXRPZmZzZXRXaWR0aCIsImdldENvbnRlbnRPZmZzZXRMZWZ0IiwiZ2V0Q29udGVudE9mZnNldFdpZHRoIiwiZm9jdXMiLCJoYW5kbGVDbGljayIsImlzQWN0aXZlIiwic2V0Rm9jdXNPbkFjdGl2YXRlIiwiZm9jdXNPbkFjdGl2YXRlIiwiY29tcHV0ZURpbWVuc2lvbnMiLCJyb290V2lkdGgiLCJyb290TGVmdCIsImNvbnRlbnRMZWZ0IiwiY29udGVudFJpZ2h0Iiwicm9vdFJpZ2h0IiwiTURDVGFiIiwicmlwcGxlRmFjdG9yeSIsInRhYkluZGljYXRvckZhY3RvcnkiLCJyaXBwbGVTdXJmYWNlIiwicmlwcGxlQWRhcHRlciIsInJpcHBsZUZvdW5kYXRpb24iLCJyaXBwbGVfIiwidGFiSW5kaWNhdG9yRWxlbWVudCIsInRhYkluZGljYXRvcl8iLCJoYW5kbGVDbGlja18iLCJhdHRyIiwidGFiSWQiLCJvZmZzZXRMZWZ0IiwiY29tcHV0ZUluZGljYXRvckNsaWVudFJlY3QiLCJBUlJPV19MRUZUX0tFWSIsIkFSUk9XX1JJR0hUX0tFWSIsIkVORF9LRVkiLCJFTlRFUl9LRVkiLCJIT01FX0tFWSIsIlNQQUNFX0tFWSIsIlRBQl9BQ1RJVkFURURfRVZFTlQiLCJUQUJfU0NST0xMRVJfU0VMRUNUT1IiLCJUQUJfU0VMRUNUT1IiLCJBUlJPV19MRUZUX0tFWUNPREUiLCJBUlJPV19SSUdIVF9LRVlDT0RFIiwiRU5EX0tFWUNPREUiLCJFTlRFUl9LRVlDT0RFIiwiRVhUUkFfU0NST0xMX0FNT1VOVCIsIkhPTUVfS0VZQ09ERSIsIlNQQUNFX0tFWUNPREUiLCJBQ0NFUFRBQkxFX0tFWVMiLCJTZXQiLCJLRVlDT0RFX01BUCIsIk1hcCIsIk1EQ1RhYkJhckZvdW5kYXRpb24iLCJ1c2VBdXRvbWF0aWNBY3RpdmF0aW9uXyIsImlzUlRMIiwic2V0QWN0aXZlVGFiIiwiYWN0aXZhdGVUYWJBdEluZGV4IiwiZGVhY3RpdmF0ZVRhYkF0SW5kZXgiLCJmb2N1c1RhYkF0SW5kZXgiLCJnZXRUYWJJbmRpY2F0b3JDbGllbnRSZWN0QXRJbmRleCIsImdldFRhYkRpbWVuc2lvbnNBdEluZGV4IiwiZ2V0UHJldmlvdXNBY3RpdmVUYWJJbmRleCIsImdldEZvY3VzZWRUYWJJbmRleCIsImdldEluZGV4T2ZUYWJCeUlkIiwiZ2V0VGFiTGlzdExlbmd0aCIsIm5vdGlmeVRhYkFjdGl2YXRlZCIsInNldFVzZUF1dG9tYXRpY0FjdGl2YXRpb24iLCJ1c2VBdXRvbWF0aWNBY3RpdmF0aW9uIiwiYWN0aXZhdGVUYWIiLCJwcmV2aW91c0NsaWVudFJlY3QiLCJwcmV2aW91c0FjdGl2ZUluZGV4IiwiaW5kZXhJc0luUmFuZ2VfIiwic2Nyb2xsSW50b1ZpZXciLCJoYW5kbGVLZXlEb3duIiwiZ2V0S2V5RnJvbUV2ZW50XyIsImlzQWN0aXZhdGlvbktleV8iLCJwcmV2ZW50RGVmYXVsdCIsImRldGVybWluZVRhcmdldEZyb21LZXlfIiwiZm9jdXNlZFRhYkluZGV4IiwiaGFuZGxlVGFiSW50ZXJhY3Rpb24iLCJzY3JvbGxJbnRvVmlld1JUTF8iLCJzY3JvbGxJbnRvVmlld18iLCJvcmlnaW4iLCJtYXhJbmRleCIsImNhbGN1bGF0ZVNjcm9sbEluY3JlbWVudF8iLCJuZXh0SW5kZXgiLCJzY3JvbGxQb3NpdGlvbiIsImJhcldpZHRoIiwibmV4dFRhYkRpbWVuc2lvbnMiLCJyZWxhdGl2ZUNvbnRlbnRMZWZ0IiwibGVmdEluY3JlbWVudCIsInJpZ2h0SW5jcmVtZW50IiwiY2FsY3VsYXRlU2Nyb2xsSW5jcmVtZW50UlRMXyIsInNjcm9sbENvbnRlbnRXaWR0aCIsImZpbmRBZGphY2VudFRhYkluZGV4Q2xvc2VzdFRvRWRnZV8iLCJ0YWJEaW1lbnNpb25zIiwicmVsYXRpdmVSb290TGVmdCIsInJlbGF0aXZlUm9vdFJpZ2h0IiwicmVsYXRpdmVSb290RGVsdGEiLCJmaW5kQWRqYWNlbnRUYWJJbmRleENsb3Nlc3RUb0VkZ2VSVExfIiwicm9vdERlbHRhIiwiaGFzIiwic2Nyb2xsSW5jcmVtZW50Iiwic2Nyb2xsV2lkdGgiLCJ0YWJJZENvdW50ZXIiLCJNRENUYWJCYXIiLCJ0YWJMaXN0XyIsInRhYkZhY3RvcnkiLCJ0YWJTY3JvbGxlckZhY3RvcnkiLCJpbnN0YW50aWF0ZVRhYnNfIiwidGFiU2Nyb2xsZXJfIiwiaW5zdGFudGlhdGVUYWJTY3JvbGxlcl8iLCJoYW5kbGVUYWJJbnRlcmFjdGlvbl8iLCJoYW5kbGVLZXlEb3duXyIsImFjdGl2ZSIsInRhYkVsZW1lbnRzIiwiZ2V0VGFiRWxlbWVudHNfIiwiYWN0aXZlRWxlbWVudCIsInNsaWNlIiwicXVlcnlTZWxlY3RvckFsbCIsInRhYlNjcm9sbGVyRWxlbWVudCIsInRhYk5hbWUiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImlubmVyVGV4dCIsInRvTG93ZXJDYXNlIiwiaGlzdG9yeSIsInB1c2hTdGF0ZSIsIm9sZENvbnRlbnQiLCJuZXdDb250ZW50IiwiZm9vdGVyIiwicmVuZGVyRm9vdGVyIiwibG9jYXRpb24iLCJzZWFyY2giLCJvbmxvYWQiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FB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SUFBSyxTQUNILEdBQVMsR0FDVCxNQUNGLElBQUssYUFDSCxHQUFTLEdBQ1QsTUFDRixJQUFLLFdBQ0gsR0FBUyxHQUNULE1BQ0YsUUFDQTFzQixTQUFTMnNCLE9BQVMsR0FBUyIsImZpbGUiOiJhcHAuYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA3KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8ICcnKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICByZXR1cm4gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgYnRvYSkge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtMiEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC0zIS4vcmVzZXQuc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKHRydWUpO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiaHRtbCxib2R5LGhlYWRlcixuYXYsaDEsYSx1bCxsaSxzdHJvbmcsbWFpbixidXR0b24saSxzZWN0aW9uLGltZyxkaXYsaDIsaDMsaDQsaDUscCxmb3JtLGZpZWxkc2V0LGxhYmVsLGlucHV0LHRleHRhcmVhLHNwYW4sYXJ0aWNsZSxmb290ZXIsdGltZSxzbWFsbCxhc2lkZXttYXJnaW46MDtwYWRkaW5nOjA7Ym9yZGVyOjA7b3V0bGluZTowO2ZvbnQtZmFtaWx5OmluaGVyaXQ7Y29sb3I6aW5oZXJpdDt0ZXh0LWFsaWduOmluaGVyaXQ7dGV4dC1kZWNvcmF0aW9uOmluaGVyaXQ7dmVydGljYWwtYWxpZ246aW5oZXJpdDtib3gtc2l6aW5nOmluaGVyaXQ7YmFja2dyb3VuZDppbmhlcml0fXVse2xpc3Qtc3R5bGU6bm9uZX1pbWd7ZGlzcGxheTpibG9jazt3aWR0aDoxMDAlO2hlaWdodDphdXRvfWlucHV0W3R5cGU9cGFzc3dvcmRdLGlucHV0W3R5cGU9ZW1haWxdLGlucHV0W3R5cGU9dGV4dF0saW5wdXRbdHlwZT1zdWJtaXRdLHRleHRhcmVhLGJ1dHRvbnstd2Via2l0LWFwcGVhcmFuY2U6bm9uZTstbW96LWFwcGVhcmFuY2U6bm9uZTthcHBlYXJhbmNlOm5vbmV9YnV0dG9uLGlucHV0W3R5cGU9c3VibWl0XXtjdXJzb3I6cG9pbnRlcn0qOmZvY3Vze291dGxpbmU6bm9uZX1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vc3JjL3N0eWxlL3Jlc2V0LnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQ0EsMkpBS0UsUUFBQSxDQUNBLFNBQUEsQ0FDQSxRQUFBLENBQ0EsU0FBQSxDQUNBLG1CQUFBLENBQ0EsYUFBQSxDQUNBLGtCQUFBLENBQ0EsdUJBQUEsQ0FDQSxzQkFBQSxDQUNBLGtCQUFBLENBQ0Esa0JBQUEsQ0FHRixHQUNFLGVBQUEsQ0FHRixJQUNFLGFBQUEsQ0FDQSxVQUFBLENBQ0EsV0FBQSxDQUdGLDJGQU1DLHVCQUFBLENBQ0Esb0JBQUEsQ0FDQSxlQUFBLENBR0QsMEJBRUUsY0FBQSxDQUdGLFFBQ0ksWUFBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIvKiBTVEFOREFSRCBDU1MgUkVTRVQgQkVMT1cgKi9cXG5odG1sLCBib2R5LCBoZWFkZXIsIG5hdiwgaDEsIGEsXFxudWwsIGxpLCBzdHJvbmcsIG1haW4sIGJ1dHRvbiwgaSxcXG5zZWN0aW9uLCBpbWcsIGRpdiwgaDIsIGgzLCBoNCwgaDUsIHAsIGZvcm0sXFxuZmllbGRzZXQsIGxhYmVsLCBpbnB1dCwgdGV4dGFyZWEsXFxuc3BhbiwgYXJ0aWNsZSwgZm9vdGVyLCB0aW1lLCBzbWFsbCwgYXNpZGUge1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG4gIGJvcmRlcjogMDtcXG4gIG91dGxpbmU6IDA7XFxuICBmb250LWZhbWlseTogaW5oZXJpdDtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbiAgdGV4dC1hbGlnbjogaW5oZXJpdDtcXG4gIHRleHQtZGVjb3JhdGlvbjogaW5oZXJpdDtcXG4gIHZlcnRpY2FsLWFsaWduOiBpbmhlcml0O1xcbiAgYm94LXNpemluZzogaW5oZXJpdDtcXG4gIGJhY2tncm91bmQ6IGluaGVyaXQ7XFxufVxcblxcbnVsIHtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcblxcbmltZyB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiBhdXRvO1xcbn1cXG5cXG5pbnB1dFt0eXBlPVxcXCJwYXNzd29yZFxcXCJdLFxcbmlucHV0W3R5cGU9XFxcImVtYWlsXFxcIl0sXFxuaW5wdXRbdHlwZT1cXFwidGV4dFxcXCJdLFxcbmlucHV0W3R5cGU9XFxcInN1Ym1pdFxcXCJdLFxcbnRleHRhcmVhLFxcbmJ1dHRvbiB7XFxuIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXG4gLW1vei1hcHBlYXJhbmNlOiBub25lO1xcbiBhcHBlYXJhbmNlOiBub25lO1xcbn1cXG5cXG5idXR0b24sXFxuaW5wdXRbdHlwZT1cXFwic3VibWl0XFxcIl0ge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4qOmZvY3VzIHtcXG4gICAgb3V0bGluZTogbm9uZTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtMiEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC0zIS4vc3R5bGUuc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKHRydWUpO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiQGZvbnQtZmFjZXtmb250LWZhbWlseTpcXFwiT3BlbiBTYW5zIENvbmRlbnNlZFxcXCI7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6MzAwO2ZvbnQtZGlzcGxheTpzd2FwO3NyYzpsb2NhbChcXFwiT3BlbiBTYW5zIENvbmRlbnNlZCBMaWdodFxcXCIpLGxvY2FsKFxcXCJPcGVuU2Fuc0NvbmRlbnNlZC1MaWdodFxcXCIpLHVybChodHRwczovL2ZvbnRzLmdzdGF0aWMuY29tL3Mvb3BlbnNhbnNjb25kZW5zZWQvdjE1L3o3TkZkUURuYlRrYWJaQUlPbDlpbF9PNktKajczZTdGZjFHaER1ak1SNldSLndvZmYyKSBmb3JtYXQoXFxcIndvZmYyXFxcIik7dW5pY29kZS1yYW5nZTpVKzA0NjAtMDUyRixVKzFDODAtMUM4OCxVKzIwQjQsVSsyREUwLTJERkYsVStBNjQwLUE2OUYsVStGRTJFLUZFMkZ9QGZvbnQtZmFjZXtmb250LWZhbWlseTpcXFwiT3BlbiBTYW5zIENvbmRlbnNlZFxcXCI7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6MzAwO2ZvbnQtZGlzcGxheTpzd2FwO3NyYzpsb2NhbChcXFwiT3BlbiBTYW5zIENvbmRlbnNlZCBMaWdodFxcXCIpLGxvY2FsKFxcXCJPcGVuU2Fuc0NvbmRlbnNlZC1MaWdodFxcXCIpLHVybChodHRwczovL2ZvbnRzLmdzdGF0aWMuY29tL3Mvb3BlbnNhbnNjb25kZW5zZWQvdjE1L3o3TkZkUURuYlRrYWJaQUlPbDlpbF9PNktKajczZTdGZjFHaER1SE1SNldSLndvZmYyKSBmb3JtYXQoXFxcIndvZmYyXFxcIik7dW5pY29kZS1yYW5nZTpVKzA0MDAtMDQ1RixVKzA0OTAtMDQ5MSxVKzA0QjAtMDRCMSxVKzIxMTZ9QGZvbnQtZmFjZXtmb250LWZhbWlseTpcXFwiT3BlbiBTYW5zIENvbmRlbnNlZFxcXCI7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6MzAwO2ZvbnQtZGlzcGxheTpzd2FwO3NyYzpsb2NhbChcXFwiT3BlbiBTYW5zIENvbmRlbnNlZCBMaWdodFxcXCIpLGxvY2FsKFxcXCJPcGVuU2Fuc0NvbmRlbnNlZC1MaWdodFxcXCIpLHVybChodHRwczovL2ZvbnRzLmdzdGF0aWMuY29tL3Mvb3BlbnNhbnNjb25kZW5zZWQvdjE1L3o3TkZkUURuYlRrYWJaQUlPbDlpbF9PNktKajczZTdGZjFHaER1bk1SNldSLndvZmYyKSBmb3JtYXQoXFxcIndvZmYyXFxcIik7dW5pY29kZS1yYW5nZTpVKzFGMDAtMUZGRn1AZm9udC1mYWNle2ZvbnQtZmFtaWx5OlxcXCJPcGVuIFNhbnMgQ29uZGVuc2VkXFxcIjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDozMDA7Zm9udC1kaXNwbGF5OnN3YXA7c3JjOmxvY2FsKFxcXCJPcGVuIFNhbnMgQ29uZGVuc2VkIExpZ2h0XFxcIiksbG9jYWwoXFxcIk9wZW5TYW5zQ29uZGVuc2VkLUxpZ2h0XFxcIiksdXJsKGh0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb20vcy9vcGVuc2Fuc2NvbmRlbnNlZC92MTUvejdORmRRRG5iVGthYlpBSU9sOWlsX082S0pqNzNlN0ZmMUdoRHViTVI2V1Iud29mZjIpIGZvcm1hdChcXFwid29mZjJcXFwiKTt1bmljb2RlLXJhbmdlOlUrMDM3MC0wM0ZGfUBmb250LWZhY2V7Zm9udC1mYW1pbHk6XFxcIk9wZW4gU2FucyBDb25kZW5zZWRcXFwiO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OjMwMDtmb250LWRpc3BsYXk6c3dhcDtzcmM6bG9jYWwoXFxcIk9wZW4gU2FucyBDb25kZW5zZWQgTGlnaHRcXFwiKSxsb2NhbChcXFwiT3BlblNhbnNDb25kZW5zZWQtTGlnaHRcXFwiKSx1cmwoaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbS9zL29wZW5zYW5zY29uZGVuc2VkL3YxNS96N05GZFFEbmJUa2FiWkFJT2w5aWxfTzZLSmo3M2U3RmYxR2hEdXJNUjZXUi53b2ZmMikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpO3VuaWNvZGUtcmFuZ2U6VSswMTAyLTAxMDMsVSswMTEwLTAxMTEsVSswMTI4LTAxMjksVSswMTY4LTAxNjksVSswMUEwLTAxQTEsVSswMUFGLTAxQjAsVSsxRUEwLTFFRjksVSsyMEFCfUBmb250LWZhY2V7Zm9udC1mYW1pbHk6XFxcIk9wZW4gU2FucyBDb25kZW5zZWRcXFwiO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OjMwMDtmb250LWRpc3BsYXk6c3dhcDtzcmM6bG9jYWwoXFxcIk9wZW4gU2FucyBDb25kZW5zZWQgTGlnaHRcXFwiKSxsb2NhbChcXFwiT3BlblNhbnNDb25kZW5zZWQtTGlnaHRcXFwiKSx1cmwoaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbS9zL29wZW5zYW5zY29uZGVuc2VkL3YxNS96N05GZFFEbmJUa2FiWkFJT2w5aWxfTzZLSmo3M2U3RmYxR2hEdXZNUjZXUi53b2ZmMikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpO3VuaWNvZGUtcmFuZ2U6VSswMTAwLTAyNEYsVSswMjU5LFUrMUUwMC0xRUZGLFUrMjAyMCxVKzIwQTAtMjBBQixVKzIwQUQtMjBDRixVKzIxMTMsVSsyQzYwLTJDN0YsVStBNzIwLUE3RkZ9QGZvbnQtZmFjZXtmb250LWZhbWlseTpcXFwiT3BlbiBTYW5zIENvbmRlbnNlZFxcXCI7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6MzAwO2ZvbnQtZGlzcGxheTpzd2FwO3NyYzpsb2NhbChcXFwiT3BlbiBTYW5zIENvbmRlbnNlZCBMaWdodFxcXCIpLGxvY2FsKFxcXCJPcGVuU2Fuc0NvbmRlbnNlZC1MaWdodFxcXCIpLHVybChodHRwczovL2ZvbnRzLmdzdGF0aWMuY29tL3Mvb3BlbnNhbnNjb25kZW5zZWQvdjE1L3o3TkZkUURuYlRrYWJaQUlPbDlpbF9PNktKajczZTdGZjFHaER1WE1Sdy53b2ZmMikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpO3VuaWNvZGUtcmFuZ2U6VSswMDAwLTAwRkYsVSswMTMxLFUrMDE1Mi0wMTUzLFUrMDJCQi0wMkJDLFUrMDJDNixVKzAyREEsVSswMkRDLFUrMjAwMC0yMDZGLFUrMjA3NCxVKzIwQUMsVSsyMTIyLFUrMjE5MSxVKzIxOTMsVSsyMjEyLFUrMjIxNSxVK0ZFRkYsVStGRkZEfS5tZGMtdGFiLWJhcnt3aWR0aDoxMDAlfS5tZGMtdGFie2hlaWdodDo0OHB4fS5tZGMtdGFiLS1zdGFja2Vke2hlaWdodDo3MnB4fS5tZGMtdGFiLXNjcm9sbGVye292ZXJmbG93LXk6aGlkZGVufS5tZGMtdGFiLXNjcm9sbGVyLm1kYy10YWItc2Nyb2xsZXItLWFuaW1hdGluZyAubWRjLXRhYi1zY3JvbGxlcl9fc2Nyb2xsLWNvbnRlbnR7dHJhbnNpdGlvbjoyNTBtcyB0cmFuc2Zvcm0gY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKX0ubWRjLXRhYi1zY3JvbGxlcl9fdGVzdHtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6LTk5OTlweDt3aWR0aDoxMDBweDtoZWlnaHQ6MTAwcHg7b3ZlcmZsb3cteDpzY3JvbGx9Lm1kYy10YWItc2Nyb2xsZXJfX3Njcm9sbC1hcmVhey13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOnRvdWNoO2Rpc3BsYXk6ZmxleDtvdmVyZmxvdy14OmhpZGRlbn0ubWRjLXRhYi1zY3JvbGxlcl9fc2Nyb2xsLWFyZWE6Oi13ZWJraXQtc2Nyb2xsYmFyLC5tZGMtdGFiLXNjcm9sbGVyX190ZXN0Ojotd2Via2l0LXNjcm9sbGJhcntkaXNwbGF5Om5vbmV9Lm1kYy10YWItc2Nyb2xsZXJfX3Njcm9sbC1hcmVhLS1zY3JvbGx7b3ZlcmZsb3cteDpzY3JvbGx9Lm1kYy10YWItc2Nyb2xsZXJfX3Njcm9sbC1jb250ZW50e3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6ZmxleDtmbGV4OjEgMCBhdXRvO3RyYW5zZm9ybTpub25lO3dpbGwtY2hhbmdlOnRyYW5zZm9ybX0ubWRjLXRhYi1zY3JvbGxlci0tYWxpZ24tc3RhcnQgLm1kYy10YWItc2Nyb2xsZXJfX3Njcm9sbC1jb250ZW50e2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0fS5tZGMtdGFiLXNjcm9sbGVyLS1hbGlnbi1lbmQgLm1kYy10YWItc2Nyb2xsZXJfX3Njcm9sbC1jb250ZW50e2p1c3RpZnktY29udGVudDpmbGV4LWVuZH0ubWRjLXRhYi1zY3JvbGxlci0tYWxpZ24tY2VudGVyIC5tZGMtdGFiLXNjcm9sbGVyX19zY3JvbGwtY29udGVudHtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5tZGMtdGFiLXNjcm9sbGVyLS1hbmltYXRpbmcgLm1kYy10YWItc2Nyb2xsZXJfX3Njcm9sbC1hcmVhey13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOmF1dG99Lm1kYy10YWItaW5kaWNhdG9ye2Rpc3BsYXk6ZmxleDtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7anVzdGlmeS1jb250ZW50OmNlbnRlcjt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3BvaW50ZXItZXZlbnRzOm5vbmU7ei1pbmRleDoxfS5tZGMtdGFiLWluZGljYXRvciAubWRjLXRhYi1pbmRpY2F0b3JfX2NvbnRlbnQtLXVuZGVybGluZXtib3JkZXItY29sb3I6IzYyMDBlZTtib3JkZXItY29sb3I6dmFyKC0tbWRjLXRoZW1lLXByaW1hcnksICM2MjAwZWUpfS5tZGMtdGFiLWluZGljYXRvciAubWRjLXRhYi1pbmRpY2F0b3JfX2NvbnRlbnQtLWljb257Y29sb3I6IzAxODc4Njtjb2xvcjp2YXIoLS1tZGMtdGhlbWUtc2Vjb25kYXJ5LCAjMDE4Nzg2KX0ubWRjLXRhYi1pbmRpY2F0b3IgLm1kYy10YWItaW5kaWNhdG9yX19jb250ZW50LS11bmRlcmxpbmV7Ym9yZGVyLXRvcC13aWR0aDoycHh9Lm1kYy10YWItaW5kaWNhdG9yIC5tZGMtdGFiLWluZGljYXRvcl9fY29udGVudC0taWNvbntoZWlnaHQ6MzRweDtmb250LXNpemU6MzRweH0ubWRjLXRhYi1pbmRpY2F0b3JfX2NvbnRlbnR7dHJhbnNmb3JtLW9yaWdpbjpsZWZ0O29wYWNpdHk6MH0ubWRjLXRhYi1pbmRpY2F0b3JfX2NvbnRlbnQtLXVuZGVybGluZXthbGlnbi1zZWxmOmZsZXgtZW5kO2JveC1zaXppbmc6Ym9yZGVyLWJveDt3aWR0aDoxMDAlO2JvcmRlci10b3Atc3R5bGU6c29saWR9Lm1kYy10YWItaW5kaWNhdG9yX19jb250ZW50LS1pY29ue2FsaWduLXNlbGY6Y2VudGVyO21hcmdpbjowIGF1dG99Lm1kYy10YWItaW5kaWNhdG9yLS1hY3RpdmUgLm1kYy10YWItaW5kaWNhdG9yX19jb250ZW50e29wYWNpdHk6MX0ubWRjLXRhYi1pbmRpY2F0b3IgLm1kYy10YWItaW5kaWNhdG9yX19jb250ZW50e3RyYW5zaXRpb246MjUwbXMgdHJhbnNmb3JtIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSl9Lm1kYy10YWItaW5kaWNhdG9yLS1uby10cmFuc2l0aW9uIC5tZGMtdGFiLWluZGljYXRvcl9fY29udGVudHt0cmFuc2l0aW9uOm5vbmV9Lm1kYy10YWItaW5kaWNhdG9yLS1mYWRlIC5tZGMtdGFiLWluZGljYXRvcl9fY29udGVudHt0cmFuc2l0aW9uOjE1MG1zIG9wYWNpdHkgbGluZWFyfS5tZGMtdGFiLWluZGljYXRvci0tYWN0aXZlLm1kYy10YWItaW5kaWNhdG9yLS1mYWRlIC5tZGMtdGFiLWluZGljYXRvcl9fY29udGVudHt0cmFuc2l0aW9uLWRlbGF5OjEwMG1zfS5tZGMtdGFiey1tb3otb3N4LWZvbnQtc21vb3RoaW5nOmdyYXlzY2FsZTstd2Via2l0LWZvbnQtc21vb3RoaW5nOmFudGlhbGlhc2VkO2ZvbnQtZmFtaWx5OlJvYm90bywgc2Fucy1zZXJpZjtmb250LWZhbWlseTp2YXIoLS1tZGMtdHlwb2dyYXBoeS1idXR0b24tZm9udC1mYW1pbHksIHZhcigtLW1kYy10eXBvZ3JhcGh5LWZvbnQtZmFtaWx5LCBSb2JvdG8sIHNhbnMtc2VyaWYpKTtmb250LXNpemU6MC44NzVyZW07Zm9udC1zaXplOnZhcigtLW1kYy10eXBvZ3JhcGh5LWJ1dHRvbi1mb250LXNpemUsIDAuODc1cmVtKTtsaW5lLWhlaWdodDoyLjI1cmVtO2xpbmUtaGVpZ2h0OnZhcigtLW1kYy10eXBvZ3JhcGh5LWJ1dHRvbi1saW5lLWhlaWdodCwgMi4yNXJlbSk7Zm9udC13ZWlnaHQ6NTAwO2ZvbnQtd2VpZ2h0OnZhcigtLW1kYy10eXBvZ3JhcGh5LWJ1dHRvbi1mb250LXdlaWdodCwgNTAwKTtsZXR0ZXItc3BhY2luZzowLjA4OTI4NTcxNDNlbTtsZXR0ZXItc3BhY2luZzp2YXIoLS1tZGMtdHlwb2dyYXBoeS1idXR0b24tbGV0dGVyLXNwYWNpbmcsIDAuMDg5Mjg1NzE0M2VtKTt0ZXh0LWRlY29yYXRpb246bm9uZTstd2Via2l0LXRleHQtZGVjb3JhdGlvbjp2YXIoLS1tZGMtdHlwb2dyYXBoeS1idXR0b24tdGV4dC1kZWNvcmF0aW9uLCBub25lKTt0ZXh0LWRlY29yYXRpb246dmFyKC0tbWRjLXR5cG9ncmFwaHktYnV0dG9uLXRleHQtZGVjb3JhdGlvbiwgbm9uZSk7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO3RleHQtdHJhbnNmb3JtOnZhcigtLW1kYy10eXBvZ3JhcGh5LWJ1dHRvbi10ZXh0LXRyYW5zZm9ybSwgdXBwZXJjYXNlKTtwYWRkaW5nLXJpZ2h0OjI0cHg7cGFkZGluZy1sZWZ0OjI0cHg7cG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpmbGV4O2ZsZXg6MSAwIGF1dG87anVzdGlmeS1jb250ZW50OmNlbnRlcjtib3gtc2l6aW5nOmJvcmRlci1ib3g7bWFyZ2luOjA7cGFkZGluZy10b3A6MDtwYWRkaW5nLWJvdHRvbTowO2JvcmRlcjpub25lO291dGxpbmU6bm9uZTtiYWNrZ3JvdW5kOm5vbmU7dGV4dC1hbGlnbjpjZW50ZXI7d2hpdGUtc3BhY2U6bm93cmFwO2N1cnNvcjpwb2ludGVyOy13ZWJraXQtYXBwZWFyYW5jZTpub25lO3otaW5kZXg6MX0ubWRjLXRhYiAubWRjLXRhYl9fdGV4dC1sYWJlbHtjb2xvcjpyZ2JhKDAsMCwwLC42KX0ubWRjLXRhYiAubWRjLXRhYl9faWNvbntjb2xvcjpyZ2JhKDAsMCwwLC41NCk7ZmlsbDpjdXJyZW50Q29sb3J9Lm1kYy10YWI6Oi1tb3otZm9jdXMtaW5uZXJ7cGFkZGluZzowO2JvcmRlcjowfS5tZGMtdGFiLS1taW4td2lkdGh7ZmxleDowIDEgYXV0b30ubWRjLXRhYl9fY29udGVudHtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7aGVpZ2h0OmluaGVyaXQ7cG9pbnRlci1ldmVudHM6bm9uZX0ubWRjLXRhYl9fdGV4dC1sYWJlbHt0cmFuc2l0aW9uOjE1MG1zIGNvbG9yIGxpbmVhcjtkaXNwbGF5OmlubGluZS1ibG9jaztsaW5lLWhlaWdodDoxO3otaW5kZXg6Mn0ubWRjLXRhYl9faWNvbnt0cmFuc2l0aW9uOjE1MG1zIGNvbG9yIGxpbmVhcjt3aWR0aDoyNHB4O2hlaWdodDoyNHB4O2ZvbnQtc2l6ZToyNHB4O3otaW5kZXg6Mn0ubWRjLXRhYi0tc3RhY2tlZCAubWRjLXRhYl9fY29udGVudHtmbGV4LWRpcmVjdGlvbjpjb2x1bW47YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXJ9Lm1kYy10YWItLXN0YWNrZWQgLm1kYy10YWJfX3RleHQtbGFiZWx7cGFkZGluZy10b3A6NnB4O3BhZGRpbmctYm90dG9tOjRweH0ubWRjLXRhYi0tYWN0aXZlIC5tZGMtdGFiX190ZXh0LWxhYmVse2NvbG9yOiM2MjAwZWU7Y29sb3I6dmFyKC0tbWRjLXRoZW1lLXByaW1hcnksICM2MjAwZWUpfS5tZGMtdGFiLS1hY3RpdmUgLm1kYy10YWJfX2ljb257Y29sb3I6IzYyMDBlZTtjb2xvcjp2YXIoLS1tZGMtdGhlbWUtcHJpbWFyeSwgIzYyMDBlZSk7ZmlsbDpjdXJyZW50Q29sb3J9Lm1kYy10YWItLWFjdGl2ZSAubWRjLXRhYl9fdGV4dC1sYWJlbCwubWRjLXRhYi0tYWN0aXZlIC5tZGMtdGFiX19pY29ue3RyYW5zaXRpb24tZGVsYXk6MTAwbXN9Lm1kYy10YWI6bm90KC5tZGMtdGFiLS1zdGFja2VkKSAubWRjLXRhYl9faWNvbisubWRjLXRhYl9fdGV4dC1sYWJlbHtwYWRkaW5nLWxlZnQ6OHB4O3BhZGRpbmctcmlnaHQ6MH1bZGlyPXJ0bF0gLm1kYy10YWI6bm90KC5tZGMtdGFiLS1zdGFja2VkKSAubWRjLXRhYl9faWNvbisubWRjLXRhYl9fdGV4dC1sYWJlbCwubWRjLXRhYjpub3QoLm1kYy10YWItLXN0YWNrZWQpIC5tZGMtdGFiX19pY29uKy5tZGMtdGFiX190ZXh0LWxhYmVsW2Rpcj1ydGxde3BhZGRpbmctbGVmdDowO3BhZGRpbmctcmlnaHQ6OHB4fUAtd2Via2l0LWtleWZyYW1lcyBtZGMtcmlwcGxlLWZnLXJhZGl1cy1pbntmcm9tey13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKTt0cmFuc2Zvcm06dHJhbnNsYXRlKHZhcigtLW1kYy1yaXBwbGUtZmctdHJhbnNsYXRlLXN0YXJ0LCAwKSkgc2NhbGUoMSl9dG97dHJhbnNmb3JtOnRyYW5zbGF0ZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXRyYW5zbGF0ZS1lbmQsIDApKSBzY2FsZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXNjYWxlLCAxKSl9fUBrZXlmcmFtZXMgbWRjLXJpcHBsZS1mZy1yYWRpdXMtaW57ZnJvbXstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSk7dHJhbnNmb3JtOnRyYW5zbGF0ZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXRyYW5zbGF0ZS1zdGFydCwgMCkpIHNjYWxlKDEpfXRve3RyYW5zZm9ybTp0cmFuc2xhdGUodmFyKC0tbWRjLXJpcHBsZS1mZy10cmFuc2xhdGUtZW5kLCAwKSkgc2NhbGUodmFyKC0tbWRjLXJpcHBsZS1mZy1zY2FsZSwgMSkpfX1ALXdlYmtpdC1rZXlmcmFtZXMgbWRjLXJpcHBsZS1mZy1vcGFjaXR5LWlue2Zyb217LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmxpbmVhcjthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmxpbmVhcjtvcGFjaXR5OjB9dG97b3BhY2l0eTp2YXIoLS1tZGMtcmlwcGxlLWZnLW9wYWNpdHksIDApfX1Aa2V5ZnJhbWVzIG1kYy1yaXBwbGUtZmctb3BhY2l0eS1pbntmcm9tey13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpsaW5lYXI7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpsaW5lYXI7b3BhY2l0eTowfXRve29wYWNpdHk6dmFyKC0tbWRjLXJpcHBsZS1mZy1vcGFjaXR5LCAwKX19QC13ZWJraXQta2V5ZnJhbWVzIG1kYy1yaXBwbGUtZmctb3BhY2l0eS1vdXR7ZnJvbXstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyO29wYWNpdHk6dmFyKC0tbWRjLXJpcHBsZS1mZy1vcGFjaXR5LCAwKX10b3tvcGFjaXR5OjB9fUBrZXlmcmFtZXMgbWRjLXJpcHBsZS1mZy1vcGFjaXR5LW91dHtmcm9tey13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpsaW5lYXI7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpsaW5lYXI7b3BhY2l0eTp2YXIoLS1tZGMtcmlwcGxlLWZnLW9wYWNpdHksIDApfXRve29wYWNpdHk6MH19Lm1kYy10YWJfX3JpcHBsZXstLW1kYy1yaXBwbGUtZmctc2l6ZTogMDstLW1kYy1yaXBwbGUtbGVmdDogMDstLW1kYy1yaXBwbGUtdG9wOiAwOy0tbWRjLXJpcHBsZS1mZy1zY2FsZTogMTstLW1kYy1yaXBwbGUtZmctdHJhbnNsYXRlLWVuZDogMDstLW1kYy1yaXBwbGUtZmctdHJhbnNsYXRlLXN0YXJ0OiAwOy13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjpyZ2JhKDAsMCwwLDApO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO292ZXJmbG93OmhpZGRlbn0ubWRjLXRhYl9fcmlwcGxlOjpiZWZvcmUsLm1kYy10YWJfX3JpcHBsZTo6YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7Ym9yZGVyLXJhZGl1czo1MCU7b3BhY2l0eTowO3BvaW50ZXItZXZlbnRzOm5vbmU7Y29udGVudDpcXFwiXFxcIn0ubWRjLXRhYl9fcmlwcGxlOjpiZWZvcmV7dHJhbnNpdGlvbjpvcGFjaXR5IDE1bXMgbGluZWFyLGJhY2tncm91bmQtY29sb3IgMTVtcyBsaW5lYXI7ei1pbmRleDoxfS5tZGMtdGFiX19yaXBwbGUubWRjLXJpcHBsZS11cGdyYWRlZDo6YmVmb3Jle3RyYW5zZm9ybTpzY2FsZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXNjYWxlLCAxKSl9Lm1kYy10YWJfX3JpcHBsZS5tZGMtcmlwcGxlLXVwZ3JhZGVkOjphZnRlcnt0b3A6MDtsZWZ0OjA7dHJhbnNmb3JtOnNjYWxlKDApO3RyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcn0ubWRjLXRhYl9fcmlwcGxlLm1kYy1yaXBwbGUtdXBncmFkZWQtLXVuYm91bmRlZDo6YWZ0ZXJ7dG9wOnZhcigtLW1kYy1yaXBwbGUtdG9wLCAwKTtsZWZ0OnZhcigtLW1kYy1yaXBwbGUtbGVmdCwgMCl9Lm1kYy10YWJfX3JpcHBsZS5tZGMtcmlwcGxlLXVwZ3JhZGVkLS1mb3JlZ3JvdW5kLWFjdGl2YXRpb246OmFmdGVyey13ZWJraXQtYW5pbWF0aW9uOm1kYy1yaXBwbGUtZmctcmFkaXVzLWluIDIyNW1zIGZvcndhcmRzLG1kYy1yaXBwbGUtZmctb3BhY2l0eS1pbiA3NW1zIGZvcndhcmRzO2FuaW1hdGlvbjptZGMtcmlwcGxlLWZnLXJhZGl1cy1pbiAyMjVtcyBmb3J3YXJkcyxtZGMtcmlwcGxlLWZnLW9wYWNpdHktaW4gNzVtcyBmb3J3YXJkc30ubWRjLXRhYl9fcmlwcGxlLm1kYy1yaXBwbGUtdXBncmFkZWQtLWZvcmVncm91bmQtZGVhY3RpdmF0aW9uOjphZnRlcnstd2Via2l0LWFuaW1hdGlvbjptZGMtcmlwcGxlLWZnLW9wYWNpdHktb3V0IDE1MG1zO2FuaW1hdGlvbjptZGMtcmlwcGxlLWZnLW9wYWNpdHktb3V0IDE1MG1zO3RyYW5zZm9ybTp0cmFuc2xhdGUodmFyKC0tbWRjLXJpcHBsZS1mZy10cmFuc2xhdGUtZW5kLCAwKSkgc2NhbGUodmFyKC0tbWRjLXJpcHBsZS1mZy1zY2FsZSwgMSkpfS5tZGMtdGFiX19yaXBwbGU6OmJlZm9yZSwubWRjLXRhYl9fcmlwcGxlOjphZnRlcnt0b3A6Y2FsYyg1MCUgLSAxMDAlKTtsZWZ0OmNhbGMoNTAlIC0gMTAwJSk7d2lkdGg6MjAwJTtoZWlnaHQ6MjAwJX0ubWRjLXRhYl9fcmlwcGxlLm1kYy1yaXBwbGUtdXBncmFkZWQ6OmFmdGVye3dpZHRoOnZhcigtLW1kYy1yaXBwbGUtZmctc2l6ZSwgMTAwJSk7aGVpZ2h0OnZhcigtLW1kYy1yaXBwbGUtZmctc2l6ZSwgMTAwJSl9Lm1kYy10YWJfX3JpcHBsZTo6YmVmb3JlLC5tZGMtdGFiX19yaXBwbGU6OmFmdGVye2JhY2tncm91bmQtY29sb3I6IzYyMDBlZTtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLW1kYy10aGVtZS1wcmltYXJ5LCAjNjIwMGVlKX0ubWRjLXRhYl9fcmlwcGxlOmhvdmVyOjpiZWZvcmV7b3BhY2l0eTouMDR9Lm1kYy10YWJfX3JpcHBsZS5tZGMtcmlwcGxlLXVwZ3JhZGVkLS1iYWNrZ3JvdW5kLWZvY3VzZWQ6OmJlZm9yZSwubWRjLXRhYl9fcmlwcGxlOm5vdCgubWRjLXJpcHBsZS11cGdyYWRlZCk6Zm9jdXM6OmJlZm9yZXt0cmFuc2l0aW9uLWR1cmF0aW9uOjc1bXM7b3BhY2l0eTouMTJ9Lm1kYy10YWJfX3JpcHBsZTpub3QoLm1kYy1yaXBwbGUtdXBncmFkZWQpOjphZnRlcnt0cmFuc2l0aW9uOm9wYWNpdHkgMTUwbXMgbGluZWFyfS5tZGMtdGFiX19yaXBwbGU6bm90KC5tZGMtcmlwcGxlLXVwZ3JhZGVkKTphY3RpdmU6OmFmdGVye3RyYW5zaXRpb24tZHVyYXRpb246NzVtcztvcGFjaXR5Oi4xMn0ubWRjLXRhYl9fcmlwcGxlLm1kYy1yaXBwbGUtdXBncmFkZWR7LS1tZGMtcmlwcGxlLWZnLW9wYWNpdHk6IDAuMTJ9aHRtbHtoZWlnaHQ6MTAwJTt3aWR0aDoxMDAlO2ZvbnQtZmFtaWx5OlxcXCJPcGVuIFNhbnMgQ29uZGVuc2VkXFxcIjtmb250LXdlaWdodDpib2xkO3Njcm9sbC1iZWhhdmlvcjpzbW9vdGh9Ym9keXt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47YWxpZ24taXRlbXM6Y2VudGVyfS5tZGMtdGFiLWJhcntwb3NpdGlvbjpmaXhlZDt0b3A6MDt6LWluZGV4OjE7YmFja2dyb3VuZDojZmZmfWFydGljbGV7ZGlzcGxheTpmbGV4O2ZvbnQtc2l6ZToyMHB4fWFydGljbGUgaDJ7Zm9udC1zaXplOjQwcHh9YXJ0aWNsZSBoM3tmb250LXNpemU6MzBweH1hcnRpY2xlIHByZXtmb250LWZhbWlseTpcXFwiT3BlbiBTYW5zIENvbmRlbnNlZFxcXCJ9I2NvbnRlbnR7bWFyZ2luLXRvcDo0OHB4O21heC13aWR0aDoxNDAwcHg7d2lkdGg6MTAwJTtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5tZGMtdGFiW2lkPW1kYy10YWItMV0ubWRjLXRhYi0tYWN0aXZlIC5tZGMtdGFiX190ZXh0LWxhYmVse2NvbG9yOiNhNDExMDl9Lm1kYy10YWJbaWQ9bWRjLXRhYi0xXS5tZGMtdGFiLS1hY3RpdmUgLm1kYy10YWJfX3JpcHBsZTo6YmVmb3JlLC5tZGMtdGFiW2lkPW1kYy10YWItMV0ubWRjLXRhYi0tYWN0aXZlIC5tZGMtdGFiX19yaXBwbGU6OmFmdGVye2JhY2tncm91bmQtY29sb3I6I2E0MTEwOX0ubWRjLXRhYltpZD1tZGMtdGFiLTFdLm1kYy10YWItLWFjdGl2ZSAubWRjLXRhYl9fcmlwcGxlOmhvdmVyOjpiZWZvcmV7b3BhY2l0eTouMDR9Lm1kYy10YWJbaWQ9bWRjLXRhYi0xXS5tZGMtdGFiLS1hY3RpdmUgLm1kYy10YWJfX3JpcHBsZS5tZGMtcmlwcGxlLXVwZ3JhZGVkLS1iYWNrZ3JvdW5kLWZvY3VzZWQ6OmJlZm9yZSwubWRjLXRhYltpZD1tZGMtdGFiLTFdLm1kYy10YWItLWFjdGl2ZSAubWRjLXRhYl9fcmlwcGxlOm5vdCgubWRjLXJpcHBsZS11cGdyYWRlZCk6Zm9jdXM6OmJlZm9yZXt0cmFuc2l0aW9uLWR1cmF0aW9uOjc1bXM7b3BhY2l0eTouMTJ9Lm1kYy10YWJbaWQ9bWRjLXRhYi0xXS5tZGMtdGFiLS1hY3RpdmUgLm1kYy10YWJfX3JpcHBsZTpub3QoLm1kYy1yaXBwbGUtdXBncmFkZWQpOjphZnRlcnt0cmFuc2l0aW9uOm9wYWNpdHkgMTUwbXMgbGluZWFyfS5tZGMtdGFiW2lkPW1kYy10YWItMV0ubWRjLXRhYi0tYWN0aXZlIC5tZGMtdGFiX19yaXBwbGU6bm90KC5tZGMtcmlwcGxlLXVwZ3JhZGVkKTphY3RpdmU6OmFmdGVye3RyYW5zaXRpb24tZHVyYXRpb246NzVtcztvcGFjaXR5Oi4xMn0ubWRjLXRhYltpZD1tZGMtdGFiLTFdLm1kYy10YWItLWFjdGl2ZSAubWRjLXRhYl9fcmlwcGxlLm1kYy1yaXBwbGUtdXBncmFkZWR7LS1tZGMtcmlwcGxlLWZnLW9wYWNpdHk6IDAuMTJ9Lm1kYy10YWJbaWQ9bWRjLXRhYi0xXSAubWRjLXRhYi1pbmRpY2F0b3IgLm1kYy10YWItaW5kaWNhdG9yX19jb250ZW50LS11bmRlcmxpbmV7Ym9yZGVyLWNvbG9yOiNhNDExMDl9Lm1kYy10YWJbaWQ9bWRjLXRhYi0yXS5tZGMtdGFiLS1hY3RpdmUgLm1kYy10YWJfX3RleHQtbGFiZWx7Y29sb3I6IzhmMDA2Nn0ubWRjLXRhYltpZD1tZGMtdGFiLTJdLm1kYy10YWItLWFjdGl2ZSAubWRjLXRhYl9fcmlwcGxlOjpiZWZvcmUsLm1kYy10YWJbaWQ9bWRjLXRhYi0yXS5tZGMtdGFiLS1hY3RpdmUgLm1kYy10YWJfX3JpcHBsZTo6YWZ0ZXJ7YmFja2dyb3VuZC1jb2xvcjojOGYwMDY2fS5tZGMtdGFiW2lkPW1kYy10YWItMl0ubWRjLXRhYi0tYWN0aXZlIC5tZGMtdGFiX19yaXBwbGU6aG92ZXI6OmJlZm9yZXtvcGFjaXR5Oi4wNH0ubWRjLXRhYltpZD1tZGMtdGFiLTJdLm1kYy10YWItLWFjdGl2ZSAubWRjLXRhYl9fcmlwcGxlLm1kYy1yaXBwbGUtdXBncmFkZWQtLWJhY2tncm91bmQtZm9jdXNlZDo6YmVmb3JlLC5tZGMtdGFiW2lkPW1kYy10YWItMl0ubWRjLXRhYi0tYWN0aXZlIC5tZGMtdGFiX19yaXBwbGU6bm90KC5tZGMtcmlwcGxlLXVwZ3JhZGVkKTpmb2N1czo6YmVmb3Jle3RyYW5zaXRpb24tZHVyYXRpb246NzVtcztvcGFjaXR5Oi4xMn0ubWRjLXRhYltpZD1tZGMtdGFiLTJdLm1kYy10YWItLWFjdGl2ZSAubWRjLXRhYl9fcmlwcGxlOm5vdCgubWRjLXJpcHBsZS11cGdyYWRlZCk6OmFmdGVye3RyYW5zaXRpb246b3BhY2l0eSAxNTBtcyBsaW5lYXJ9Lm1kYy10YWJbaWQ9bWRjLXRhYi0yXS5tZGMtdGFiLS1hY3RpdmUgLm1kYy10YWJfX3JpcHBsZTpub3QoLm1kYy1yaXBwbGUtdXBncmFkZWQpOmFjdGl2ZTo6YWZ0ZXJ7dHJhbnNpdGlvbi1kdXJhdGlvbjo3NW1zO29wYWNpdHk6LjEyfS5tZGMtdGFiW2lkPW1kYy10YWItMl0ubWRjLXRhYi0tYWN0aXZlIC5tZGMtdGFiX19yaXBwbGUubWRjLXJpcHBsZS11cGdyYWRlZHstLW1kYy1yaXBwbGUtZmctb3BhY2l0eTogMC4xMn0ubWRjLXRhYltpZD1tZGMtdGFiLTJdIC5tZGMtdGFiLWluZGljYXRvciAubWRjLXRhYi1pbmRpY2F0b3JfX2NvbnRlbnQtLXVuZGVybGluZXtib3JkZXItY29sb3I6IzhmMDA2Nn0ubWRjLXRhYltpZD1tZGMtdGFiLTNdLm1kYy10YWItLWFjdGl2ZSAubWRjLXRhYl9fdGV4dC1sYWJlbHtjb2xvcjojMDBhZWVmfS5tZGMtdGFiW2lkPW1kYy10YWItM10ubWRjLXRhYi0tYWN0aXZlIC5tZGMtdGFiX19yaXBwbGU6OmJlZm9yZSwubWRjLXRhYltpZD1tZGMtdGFiLTNdLm1kYy10YWItLWFjdGl2ZSAubWRjLXRhYl9fcmlwcGxlOjphZnRlcntiYWNrZ3JvdW5kLWNvbG9yOiMwMGFlZWZ9Lm1kYy10YWJbaWQ9bWRjLXRhYi0zXS5tZGMtdGFiLS1hY3RpdmUgLm1kYy10YWJfX3JpcHBsZTpob3Zlcjo6YmVmb3Jle29wYWNpdHk6LjA4fS5tZGMtdGFiW2lkPW1kYy10YWItM10ubWRjLXRhYi0tYWN0aXZlIC5tZGMtdGFiX19yaXBwbGUubWRjLXJpcHBsZS11cGdyYWRlZC0tYmFja2dyb3VuZC1mb2N1c2VkOjpiZWZvcmUsLm1kYy10YWJbaWQ9bWRjLXRhYi0zXS5tZGMtdGFiLS1hY3RpdmUgLm1kYy10YWJfX3JpcHBsZTpub3QoLm1kYy1yaXBwbGUtdXBncmFkZWQpOmZvY3VzOjpiZWZvcmV7dHJhbnNpdGlvbi1kdXJhdGlvbjo3NW1zO29wYWNpdHk6LjI0fS5tZGMtdGFiW2lkPW1kYy10YWItM10ubWRjLXRhYi0tYWN0aXZlIC5tZGMtdGFiX19yaXBwbGU6bm90KC5tZGMtcmlwcGxlLXVwZ3JhZGVkKTo6YWZ0ZXJ7dHJhbnNpdGlvbjpvcGFjaXR5IDE1MG1zIGxpbmVhcn0ubWRjLXRhYltpZD1tZGMtdGFiLTNdLm1kYy10YWItLWFjdGl2ZSAubWRjLXRhYl9fcmlwcGxlOm5vdCgubWRjLXJpcHBsZS11cGdyYWRlZCk6YWN0aXZlOjphZnRlcnt0cmFuc2l0aW9uLWR1cmF0aW9uOjc1bXM7b3BhY2l0eTouMjR9Lm1kYy10YWJbaWQ9bWRjLXRhYi0zXS5tZGMtdGFiLS1hY3RpdmUgLm1kYy10YWJfX3JpcHBsZS5tZGMtcmlwcGxlLXVwZ3JhZGVkey0tbWRjLXJpcHBsZS1mZy1vcGFjaXR5OiAwLjI0fS5tZGMtdGFiW2lkPW1kYy10YWItM10gLm1kYy10YWItaW5kaWNhdG9yIC5tZGMtdGFiLWluZGljYXRvcl9fY29udGVudC0tdW5kZXJsaW5le2JvcmRlci1jb2xvcjojMDBhZWVmfS5tZGMtdGFiW2lkPW1kYy10YWItNF0ubWRjLXRhYi0tYWN0aXZlIC5tZGMtdGFiX190ZXh0LWxhYmVse2NvbG9yOiNkYWMyMDB9Lm1kYy10YWJbaWQ9bWRjLXRhYi00XS5tZGMtdGFiLS1hY3RpdmUgLm1kYy10YWJfX3JpcHBsZTo6YmVmb3JlLC5tZGMtdGFiW2lkPW1kYy10YWItNF0ubWRjLXRhYi0tYWN0aXZlIC5tZGMtdGFiX19yaXBwbGU6OmFmdGVye2JhY2tncm91bmQtY29sb3I6I2RhYzIwMH0ubWRjLXRhYltpZD1tZGMtdGFiLTRdLm1kYy10YWItLWFjdGl2ZSAubWRjLXRhYl9fcmlwcGxlOmhvdmVyOjpiZWZvcmV7b3BhY2l0eTouMDh9Lm1kYy10YWJbaWQ9bWRjLXRhYi00XS5tZGMtdGFiLS1hY3RpdmUgLm1kYy10YWJfX3JpcHBsZS5tZGMtcmlwcGxlLXVwZ3JhZGVkLS1iYWNrZ3JvdW5kLWZvY3VzZWQ6OmJlZm9yZSwubWRjLXRhYltpZD1tZGMtdGFiLTRdLm1kYy10YWItLWFjdGl2ZSAubWRjLXRhYl9fcmlwcGxlOm5vdCgubWRjLXJpcHBsZS11cGdyYWRlZCk6Zm9jdXM6OmJlZm9yZXt0cmFuc2l0aW9uLWR1cmF0aW9uOjc1bXM7b3BhY2l0eTouMjR9Lm1kYy10YWJbaWQ9bWRjLXRhYi00XS5tZGMtdGFiLS1hY3RpdmUgLm1kYy10YWJfX3JpcHBsZTpub3QoLm1kYy1yaXBwbGUtdXBncmFkZWQpOjphZnRlcnt0cmFuc2l0aW9uOm9wYWNpdHkgMTUwbXMgbGluZWFyfS5tZGMtdGFiW2lkPW1kYy10YWItNF0ubWRjLXRhYi0tYWN0aXZlIC5tZGMtdGFiX19yaXBwbGU6bm90KC5tZGMtcmlwcGxlLXVwZ3JhZGVkKTphY3RpdmU6OmFmdGVye3RyYW5zaXRpb24tZHVyYXRpb246NzVtcztvcGFjaXR5Oi4yNH0ubWRjLXRhYltpZD1tZGMtdGFiLTRdLm1kYy10YWItLWFjdGl2ZSAubWRjLXRhYl9fcmlwcGxlLm1kYy1yaXBwbGUtdXBncmFkZWR7LS1tZGMtcmlwcGxlLWZnLW9wYWNpdHk6IDAuMjR9Lm1kYy10YWJbaWQ9bWRjLXRhYi00XSAubWRjLXRhYi1pbmRpY2F0b3IgLm1kYy10YWItaW5kaWNhdG9yX19jb250ZW50LS11bmRlcmxpbmV7Ym9yZGVyLWNvbG9yOiNkYWMyMDB9LmxvZ28tZGl2e2JhY2tncm91bmQtc2l6ZTpjb3ZlcjtiYWNrZ3JvdW5kLXBvc2l0aW9uOmNlbnRlcjt3aWR0aDo1MHB4O2hlaWdodDo1MHB4O2FsaWduLXNlbGY6Y2VudGVyO21hcmdpbjoxJX0uaGVyby1pbWFnZXtiYWNrZ3JvdW5kLXNpemU6Y292ZXI7YmFja2dyb3VuZC1wb3NpdGlvbjpjZW50ZXI7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjEwMCU7aGVpZ2h0Ojg1dmg7bWFyZ2luLWJvdHRvbTo0JX0uaGVyby10ZXh0e3RleHQtYWxpZ246Y2VudGVyO3Bvc2l0aW9uOmFic29sdXRlO3RvcDo1MCU7bGVmdDo1MCU7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtjb2xvcjojZmZmO2JhY2tncm91bmQ6bm9uZTttYXJnaW4tdG9wOjElO21hcmdpbi1ib3R0b206MSV9QG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA1NjBweCl7Lmhlcm8tdGV4dCBoMXtmb250LXNpemU6MjRweH19Zm9vdGVye2Rpc3BsYXk6ZmxleDt3aWR0aDoxMDAlO2JhY2tncm91bmQtY29sb3I6IzY2NjtwYWRkaW5nOi41JSAwJX1mb290ZXIgcHtwYWRkaW5nLWxlZnQ6MSV9LmhvdXJzLWFydGljbGV7ZGlzcGxheTpmbGV4O3dpZHRoOjEwMCU7ZmxleC1kaXJlY3Rpb246cm93O2p1c3RpZnktY29udGVudDpzcGFjZS1hcm91bmR9LmhvdXJzLWFydGljbGUgLmFydGljbGUtY2FyZHtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2FsaWduLWl0ZW1zOmNlbnRlcn1AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDU2MHB4KXsuaG91cnMtYXJ0aWNsZXtmbGV4LWRpcmVjdGlvbjpjb2x1bW59fS5tYW5pZmVzdG8tYXJ0aWNsZXtmbGV4LWRpcmVjdGlvbjpjb2x1bW47Zm9udC1zaXplOjIwcHh9Lm1hbmlmZXN0by1hcnRpY2xlIGgze3BhZGRpbmctbGVmdDo1JTtwYWRkaW5nLWJvdHRvbToyJX0ubWFuaWZlc3RvLWFydGljbGUgcHtwYWRkaW5nLWxlZnQ6NSU7cGFkZGluZy1yaWdodDo1JTtwYWRkaW5nLXRvcDoxJX0ubWFuaWZlc3RvLWFydGljbGUgdWx7cGFkZGluZzoxJSA1JSAyJSA2JX0ubWFuaWZlc3RvLWFydGljbGUgdWwgbGk6OmJlZm9yZXtjb250ZW50OlxcXCItXFxcIjtjb2xvcjojMDBhZWVmO2ZvbnQtd2VpZ2h0OmJvbGRlcjtkaXNwbGF5OmlubGluZS1ibG9jazt3aWR0aDoxZW19LmNvbnRhY3QtYXJ0aWNsZXtkaXNwbGF5OmZsZXg7d2lkdGg6MTAwJTtmbGV4LWRpcmVjdGlvbjpyb3c7anVzdGlmeS1jb250ZW50OnNwYWNlLWFyb3VuZH0uY29udGFjdC1hcnRpY2xlIC5hcnRpY2xlLWNhcmR7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjthbGlnbi1pdGVtczpjZW50ZXJ9LmNvbnRhY3QtYXJ0aWNsZSBzdmd7d2lkdGg6MzBweDtoZWlnaHQ6MzBweDttYXJnaW4tdG9wOjIlO21hcmdpbi1sZWZ0OjElfS5jb250YWN0LWZvcm17ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYXJvdW5kO2FsaWduLWl0ZW1zOmNlbnRlcjt3aWR0aDo4MCU7aGVpZ2h0OjQwdmh9LmNvbnRhY3QtZm9ybSBoM3tmb250LXNpemU6MzBweH0uY29udGFjdC1mb3JtIC5pbmZvRGl2e2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYXJvdW5kO2hlaWdodDo1MHB4O3dpZHRoOjYwJX0uY29udGFjdC1mb3JtIC5tZXNzYWdlRGl2e2Rpc3BsYXk6ZmxleDt3aWR0aDo4MCV9LmNvbnRhY3QtZm9ybSAubWVzc2FnZURpdiAuaW5wdXQtZ3JvdXB7d2lkdGg6NTAlfS5jb250YWN0LWZvcm0gLmlucHV0LWdyb3Vwe3Bvc2l0aW9uOnJlbGF0aXZlO21hcmdpbjo0MHB4IGF1dG87d2lkdGg6MzUlfS5jb250YWN0LWZvcm0gLmZvcm0tY29udHJvbHtwb3NpdGlvbjpyZWxhdGl2ZTt6LWluZGV4OjE7d2lkdGg6MTAwJTtoZWlnaHQ6MzVweDtmb250LXNpemU6MTZweDtib3JkZXI6bm9uZTtib3JkZXItYm90dG9tOjFweCBzb2xpZCAjZDlkOWQ5O2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnR9LmNvbnRhY3QtZm9ybSAuZm9ybS1jb250cm9sK2xhYmVse3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxMHB4O2xlZnQ6M3B4O2ZvbnQtc2l6ZToxNnB4O2NvbG9yOiM5OTk7dHJhbnNpdGlvbjphbGwgLjJzIGVhc2Utb3V0fS5jb250YWN0LWZvcm0gLmZvcm0tY29udHJvbDpmb2N1c3tvdXRsaW5lOm5vbmU7Ym9yZGVyLXdpZHRoOjJweDtib3JkZXItY29sb3I6I2RhYzIwMDt0cmFuc2l0aW9uOmFsbCAuMnMgZWFzZS1vdXR9LmNvbnRhY3QtZm9ybSAuZm9ybS1jb250cm9sLmhhcy12YWx1ZStsYWJlbCwuY29udGFjdC1mb3JtIC5mb3JtLWNvbnRyb2w6Zm9jdXMrbGFiZWx7dG9wOi0xNXB4O2NvbG9yOiNkYWMyMDA7Zm9udC1zaXplOjEycHh9LmNvbnRhY3QtZm9ybSAuZm9ybS1jb250cm9sLmhhcy12YWx1ZTpub3QoOmZvY3VzKStsYWJlbHtjb2xvcjojOTk5fS5tYXAtY29udGFpbmVye3dpZHRoOjEwMCU7aGVpZ2h0OjQwdmg7bWFyZ2luOjElIDB9Lm1hcC1kaXNwbGF5e3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCV9Lm1hcC1mcmFtZXt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2JvcmRlcjowfUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTA2NXB4KXsuY29udGFjdC1hcnRpY2xle2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn19QG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA1NjBweCl7LmNvbnRhY3QtYXJ0aWNsZSAuYXJ0aWNsZS1jYXJke2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtwYWRkaW5nOjMlIDB9LmNvbnRhY3QtYXJ0aWNsZSBwe21hcmdpbi1sZWZ0OjUlO21hcmdpbi1yaWdodDo1JX0uY29udGFjdC1mb3JtIGgze21hcmdpbi10b3A6LTI1cHg7bWFyZ2luLWJvdHRvbTotNTBweH0uY29udGFjdC1mb3JtIC5pbmZvRGl2e2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1zdGFydDtoZWlnaHQ6MjAlO3BhZGRpbmc6MDttYXJnaW46MH0uY29udGFjdC1mb3JtIC5pbmZvRGl2IC5pbnB1dC1ncm91cHttYXJnaW46MyU7d2lkdGg6ODAlfS5jb250YWN0LWZvcm0gLmlucHV0LWdyb3Vwe21hcmdpbjoxJX0uY29udGFjdC1mb3JtIC5tZXNzYWdlRGl2e2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjthbGlnbi1pdGVtczpjZW50ZXJ9fWJ1dHRvbntiYWNrZ3JvdW5kLWNvbG9yOiNkYWMyMDA7Y29sb3I6I2ZmZjtmb250LXNpemU6MTRweDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2U7Zm9udC13ZWlnaHQ6NTAwO2JvcmRlcjoxcHggc29saWQgI2RhYzIwMDtoZWlnaHQ6MzZweDtwYWRkaW5nOjAgMTZweDtib3JkZXItcmFkaXVzOjJweDtib3gtc2hhZG93OjAgMXB4IDNweCAjOTk5fXRleHRhcmVhLmZvcm0tY29udHJvbHtoZWlnaHQ6MTIwcHh9c2VsZWN0ey13ZWJraXQtYXBwZWFyYW5jZTpub25lOy1tb3otYXBwZWFyYW5jZTpub25lO2FwcGVhcmFuY2U6bm9uZTtvdXRsaW5lOjA7Ym94LXNoYWRvdzpub25lO2JvcmRlcjowICFpbXBvcnRhbnQ7YmFja2dyb3VuZC1pbWFnZTpub25lfXNlbGVjdDo6LW1zLWV4cGFuZHtkaXNwbGF5Om5vbmV9LnNlbGVjdHtwb3NpdGlvbjpyZWxhdGl2ZTt0b3A6NjAlO2xlZnQ6NTUwcHg7ZGlzcGxheTpmbGV4O3dpZHRoOjIwZW07aGVpZ2h0OjNlbTtsaW5lLWhlaWdodDozO2JhY2tncm91bmQtY29sb3I6I2ZmZjtvdmVyZmxvdzpoaWRkZW47Ym9yZGVyLXJhZGl1czouMjVlbX1zZWxlY3R7ZmxleDoxO3BhZGRpbmc6MCAuNWVtO2JhY2tncm91bmQtY29sb3I6I2ZmZjtjdXJzb3I6cG9pbnRlcn1vcHRpb257YmFja2dyb3VuZC1jb2xvcjojZmZmOy13ZWJraXQtdGV4dC1kZWNvcmF0aW9uLWNvbG9yOiM4ZjAwNjY7dGV4dC1kZWNvcmF0aW9uLWNvbG9yOiM4ZjAwNjZ9LnNlbGVjdDo6YWZ0ZXJ7Y29udGVudDpcXFwi4pa8XFxcIjtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtyaWdodDowO3BhZGRpbmc6MCAxZW07YmFja2dyb3VuZDojZmZmO2N1cnNvcjpwb2ludGVyO3BvaW50ZXItZXZlbnRzOm5vbmU7dHJhbnNpdGlvbjouMjVzIGFsbCBlYXNlfS5zZWxlY3Q6aG92ZXI6OmFmdGVye2NvbG9yOiM4ZjAwNjZ9Lm1lbnVzLWFydGljbGV7ZmxleC1kaXJlY3Rpb246Y29sdW1uO3dpZHRoOjEwMCV9Lm1lbnVzLWFydGljbGUgaDJ7Y29sb3I6IzhmMDA2Nn0ubWVudS1ob2xkZXJ7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjthbGlnbi1pdGVtczpjZW50ZXI7d2lkdGg6MTAwJX0ubWVudS1ob2xkZXIgcHtkaXNwbGF5OmZsZXg7d2lkdGg6NzAlO2p1c3RpZnktY29udGVudDpjZW50ZXJ9aHJ7d2lkdGg6MTAwJTtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzhmMDA2Njtib3JkZXItY29sb3I6IzhmMDA2Nn0ubWVudS1kaXZ7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOnJvdztmbGV4LXdyYXA6d3JhcDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjtwYWRkaW5nOjUlfS5tZW51LWl0ZW0tZGl2e2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47d2lkdGg6MzAwcHg7cGFkZGluZzoxJX0ubWVudS1pdGVtLWRpdiBwe2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0fS5tZW51LWl0ZW0tdGl0bGUtZGl2e2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpyb3c7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59Lmx1bmNoLW1lbnUtZGl2e2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47YWxpZ24taXRlbXM6Y2VudGVyO3BhZGRpbmc6MSV9Lmx1bmNoLWl0ZW0taG9sZGVye2Rpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbn1AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEzOTVweCl7LnNlbGVjdHtsZWZ0OjM4JX19QG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMTAwcHgpey5zZWxlY3R7bGVmdDozMiV9fUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogODAwcHgpey5zZWxlY3R7bGVmdDoyNiV9fUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjMwcHgpey5zZWxlY3R7bGVmdDoyMCV9fUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDgwcHgpey5zZWxlY3R7bGVmdDoxNCV9fUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDAwcHgpey5zZWxlY3R7bGVmdDo1JX19XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovL3NyYy9zdHlsZS9zdHlsZS5zY3NzXCIsXCJ3ZWJwYWNrOi8vc3JjL3N0eWxlL3ZhcnMvZm9udC5zY3NzXCIsXCJ3ZWJwYWNrOi8vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC90YWItYmFyL19taXhpbnMuc2Nzc1wiLFwid2VicGFjazovL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdGFiLXNjcm9sbGVyL19taXhpbnMuc2Nzc1wiLFwid2VicGFjazovL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdGFiL19taXhpbnMuc2Nzc1wiLFwid2VicGFjazovL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdGFiLWluZGljYXRvci9fbWl4aW5zLnNjc3NcIixcIndlYnBhY2s6Ly9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RoZW1lL19taXhpbnMuc2Nzc1wiLFwid2VicGFjazovL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdHlwb2dyYXBoeS9fbWl4aW5zLnNjc3NcIixcIndlYnBhY2s6Ly9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RoZW1lL19jdXN0b20tcHJvcGVydGllcy5zY3NzXCIsXCJ3ZWJwYWNrOi8vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC90YWIvX3ZhcmlhYmxlcy5zY3NzXCIsXCJ3ZWJwYWNrOi8vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9ydGwvX21peGlucy5zY3NzXCIsXCJ3ZWJwYWNrOi8vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9yaXBwbGUvX2tleWZyYW1lcy5zY3NzXCIsXCJ3ZWJwYWNrOi8vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9hbmltYXRpb24vX3ZhcmlhYmxlcy5zY3NzXCIsXCJ3ZWJwYWNrOi8vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9yaXBwbGUvX21peGlucy5zY3NzXCIsXCJ3ZWJwYWNrOi8vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9yaXBwbGUvX3ZhcmlhYmxlcy5zY3NzXCIsXCJ3ZWJwYWNrOi8vc3JjL3N0eWxlL2Jhc2Uuc2Nzc1wiLFwid2VicGFjazovL3NyYy9zdHlsZS92YXJzL3ZhcnMuc2Nzc1wiLFwid2VicGFjazovL3NyYy9zdHlsZS9jb21wb25lbnRzL2xvZ28uc2Nzc1wiLFwid2VicGFjazovL3NyYy9zdHlsZS9jb21wb25lbnRzL2hlcm8uc2Nzc1wiLFwid2VicGFjazovL3NyYy9zdHlsZS9jb21wb25lbnRzL2Zvb3Rlci5zY3NzXCIsXCJ3ZWJwYWNrOi8vc3JjL3N0eWxlL3ZhcnMvY29sb3JzLnNjc3NcIixcIndlYnBhY2s6Ly9zcmMvc3R5bGUvcGFnZXMvaG91cnMuc2Nzc1wiLFwid2VicGFjazovL3NyYy9zdHlsZS9wYWdlcy9tYW5pZmVzdG8uc2Nzc1wiLFwid2VicGFjazovL3NyYy9zdHlsZS9wYWdlcy9jb250YWN0LnNjc3NcIixcIndlYnBhY2s6Ly9zcmMvc3R5bGUvcGFnZXMvbWVudXMuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxXQ0NBLGlDQUNFLENBQUEsaUJBQ0EsQ0FBQSxlQUNBLENBQUEsaUJBQ0EsQ0FBQSxpTUFDQSxDQUFBLGdGQUNBLENBQUEsV0FHRixpQ0FDRSxDQUFBLGlCQUNBLENBQUEsZUFDQSxDQUFBLGlCQUNBLENBQUEsaU1BQ0EsQ0FBQSx3REFDQSxDQUFBLFdBR0YsaUNBQ0UsQ0FBQSxpQkFDQSxDQUFBLGVBQ0EsQ0FBQSxp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Q0UsQ0FBQSxxQkFHSixZQUNFLENBQUEsa0JBQ0EsQ0FBQSw2QkFDQSxDQUFBLGdCQUVGLFlBQ0UsQ0FBQSxxQkFDQSxDQUFBLGtCQUNBLENBQUEsVUFDQSxDQUFBLG1CQUVGLFlBQ0UsQ0FBQSxjQUNBLENBQUEsNkJBQ0EsQ0FBQSwyQ0FNRixRQUNFLFFBQ0UsQ0FBQSxDQUFBLDJDQUdKLFFBQ0UsUUFDRSxDQUFBLENBQUEsMENBR0osUUFDRSxRQUNFLENBQUEsQ0FBQSwwQ0FHSixRQUNFLFFBQ0UsQ0FBQSxDQUFBLDBDQUdKLFFBQ0UsUUFDRSxDQUFBLENBQUEsMENBR0osUUFDRSxPQUNFLENBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGZvbnQtZmFjZXtmb250LWZhbWlseTpcXFwiT3BlbiBTYW5zIENvbmRlbnNlZFxcXCI7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6MzAwO2ZvbnQtZGlzcGxheTpzd2FwO3NyYzpsb2NhbChcXFwiT3BlbiBTYW5zIENvbmRlbnNlZCBMaWdodFxcXCIpLGxvY2FsKFxcXCJPcGVuU2Fuc0NvbmRlbnNlZC1MaWdodFxcXCIpLHVybChodHRwczovL2ZvbnRzLmdzdGF0aWMuY29tL3Mvb3BlbnNhbnNjb25kZW5zZWQvdjE1L3o3TkZkUURuYlRrYWJaQUlPbDlpbF9PNktKajczZTdGZjFHaER1ak1SNldSLndvZmYyKSBmb3JtYXQoXFxcIndvZmYyXFxcIik7dW5pY29kZS1yYW5nZTpVKzA0NjAtMDUyRixVKzFDODAtMUM4OCxVKzIwQjQsVSsyREUwLTJERkYsVStBNjQwLUE2OUYsVStGRTJFLUZFMkZ9QGZvbnQtZmFjZXtmb250LWZhbWlseTpcXFwiT3BlbiBTYW5zIENvbmRlbnNlZFxcXCI7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6MzAwO2ZvbnQtZGlzcGxheTpzd2FwO3NyYzpsb2NhbChcXFwiT3BlbiBTYW5zIENvbmRlbnNlZCBMaWdodFxcXCIpLGxvY2FsKFxcXCJPcGVuU2Fuc0NvbmRlbnNlZC1MaWdodFxcXCIpLHVybChodHRwczovL2ZvbnRzLmdzdGF0aWMuY29tL3Mvb3BlbnNhbnNjb25kZW5zZWQvdjE1L3o3TkZkUURuYlRrYWJaQUlPbDlpbF9PNktKajczZTdGZjFHaER1SE1SNldSLndvZmYyKSBmb3JtYXQoXFxcIndvZmYyXFxcIik7dW5pY29kZS1yYW5nZTpVKzA0MDAtMDQ1RixVKzA0OTAtMDQ5MSxVKzA0QjAtMDRCMSxVKzIxMTZ9QGZvbnQtZmFjZXtmb250LWZhbWlseTpcXFwiT3BlbiBTYW5zIENvbmRlbnNlZFxcXCI7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6MzAwO2ZvbnQtZGlzcGxheTpzd2FwO3NyYzpsb2NhbChcXFwiT3BlbiBTYW5zIENvbmRlbnNlZCBMaWdodFxcXCIpLGxvY2FsKFxcXCJPcGVuU2Fuc0NvbmRlbnNlZC1MaWdodFxcXCIpLHVybChodHRwczovL2ZvbnRzLmdzdGF0aWMuY29tL3Mvb3BlbnNhbnNjb25kZW5zZWQvdjE1L3o3TkZkUURuYlRrYWJaQUlPbDlpbF9PNktKajczZTdGZjFHaER1bk1SNldSLndvZmYyKSBmb3JtYXQoXFxcIndvZmYyXFxcIik7dW5pY29kZS1yYW5nZTpVKzFGMDAtMUZGRn1AZm9udC1mYWNle2ZvbnQtZmFtaWx5OlxcXCJPcGVuIFNhbnMgQ29uZGVuc2VkXFxcIjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDozMDA7Zm9udC1kaXNwbGF5OnN3YXA7c3JjOmxvY2FsKFxcXCJPcGVuIFNhbnMgQ29uZGVuc2VkIExpZ2h0XFxcIiksbG9jYWwoXFxcIk9wZW5TYW5zQ29uZGVuc2VkLUxpZ2h0XFxcIiksdXJsKGh0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb20vcy9vcGVuc2Fuc2NvbmRlbnNlZC92MTUvejdORmRRRG5iVGthYlpBSU9sOWlsX082S0pqNzNlN0ZmMUdoRHViTVI2V1Iud29mZjIpIGZvcm1hdChcXFwid29mZjJcXFwiKTt1bmljb2RlLXJhbmdlOlUrMDM3MC0wM0ZGfUBmb250LWZhY2V7Zm9udC1mYW1pbHk6XFxcIk9wZW4gU2FucyBDb25kZW5zZWRcXFwiO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OjMwMDtmb250LWRpc3BsYXk6c3dhcDtzcmM6bG9jYWwoXFxcIk9wZW4gU2FucyBDb25kZW5zZWQgTGlnaHRcXFwiKSxsb2NhbChcXFwiT3BlblNhbnNDb25kZW5zZWQtTGlnaHRcXFwiKSx1cmwoaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbS9zL29wZW5zYW5zY29uZGVuc2VkL3YxNS96N05GZFFEbmJUa2FiWkFJT2w5aWxfTzZLSmo3M2U3RmYxR2hEdXJNUjZXUi53b2ZmMikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpO3VuaWNvZGUtcmFuZ2U6VSswMTAyLTAxMDMsVSswMTEwLTAxMTEsVSswMTI4LTAxMjksVSswMTY4LTAxNjksVSswMUEwLTAxQTEsVSswMUFGLTAxQjAsVSsxRUEwLTFFRjksVSsyMEFCfUBmb250LWZhY2V7Zm9udC1mYW1pbHk6XFxcIk9wZW4gU2FucyBDb25kZW5zZWRcXFwiO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OjMwMDtmb250LWRpc3BsYXk6c3dhcDtzcmM6bG9jYWwoXFxcIk9wZW4gU2FucyBDb25kZW5zZWQgTGlnaHRcXFwiKSxsb2NhbChcXFwiT3BlblNhbnNDb25kZW5zZWQtTGlnaHRcXFwiKSx1cmwoaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbS9zL29wZW5zYW5zY29uZGVuc2VkL3YxNS96N05GZFFEbmJUa2FiWkFJT2w5aWxfTzZLSmo3M2U3RmYxR2hEdXZNUjZXUi53b2ZmMikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpO3VuaWNvZGUtcmFuZ2U6VSswMTAwLTAyNEYsVSswMjU5LFUrMUUwMC0xRUZGLFUrMjAyMCxVKzIwQTAtMjBBQixVKzIwQUQtMjBDRixVKzIxMTMsVSsyQzYwLTJDN0YsVStBNzIwLUE3RkZ9QGZvbnQtZmFjZXtmb250LWZhbWlseTpcXFwiT3BlbiBTYW5zIENvbmRlbnNlZFxcXCI7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6MzAwO2ZvbnQtZGlzcGxheTpzd2FwO3NyYzpsb2NhbChcXFwiT3BlbiBTYW5zIENvbmRlbnNlZCBMaWdodFxcXCIpLGxvY2FsKFxcXCJPcGVuU2Fuc0NvbmRlbnNlZC1MaWdodFxcXCIpLHVybChodHRwczovL2ZvbnRzLmdzdGF0aWMuY29tL3Mvb3BlbnNhbnNjb25kZW5zZWQvdjE1L3o3TkZkUURuYlRrYWJaQUlPbDlpbF9PNktKajczZTdGZjFHaER1WE1Sdy53b2ZmMikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpO3VuaWNvZGUtcmFuZ2U6VSswMDAwLTAwRkYsVSswMTMxLFUrMDE1Mi0wMTUzLFUrMDJCQi0wMkJDLFUrMDJDNixVKzAyREEsVSswMkRDLFUrMjAwMC0yMDZGLFUrMjA3NCxVKzIwQUMsVSsyMTIyLFUrMjE5MSxVKzIxOTMsVSsyMjEyLFUrMjIxNSxVK0ZFRkYsVStGRkZEfS5tZGMtdGFiLWJhcnt3aWR0aDoxMDAlfS5tZGMtdGFie2hlaWdodDo0OHB4fS5tZGMtdGFiLS1zdGFja2Vke2hlaWdodDo3MnB4fS5tZGMtdGFiLXNjcm9sbGVye292ZXJmbG93LXk6aGlkZGVufS5tZGMtdGFiLXNjcm9sbGVyLm1kYy10YWItc2Nyb2xsZXItLWFuaW1hdGluZyAubWRjLXRhYi1zY3JvbGxlcl9fc2Nyb2xsLWNvbnRlbnR7dHJhbnNpdGlvbjoyNTBtcyB0cmFuc2Zvcm0gY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKX0ubWRjLXRhYi1zY3JvbGxlcl9fdGVzdHtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6LTk5OTlweDt3aWR0aDoxMDBweDtoZWlnaHQ6MTAwcHg7b3ZlcmZsb3cteDpzY3JvbGx9Lm1kYy10YWItc2Nyb2xsZXJfX3Njcm9sbC1hcmVhey13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOnRvdWNoO2Rpc3BsYXk6ZmxleDtvdmVyZmxvdy14OmhpZGRlbn0ubWRjLXRhYi1zY3JvbGxlcl9fc2Nyb2xsLWFyZWE6Oi13ZWJraXQtc2Nyb2xsYmFyLC5tZGMtdGFiLXNjcm9sbGVyX190ZXN0Ojotd2Via2l0LXNjcm9sbGJhcntkaXNwbGF5Om5vbmV9Lm1kYy10YWItc2Nyb2xsZXJfX3Njcm9sbC1hcmVhLS1zY3JvbGx7b3ZlcmZsb3cteDpzY3JvbGx9Lm1kYy10YWItc2Nyb2xsZXJfX3Njcm9sbC1jb250ZW50e3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6ZmxleDtmbGV4OjEgMCBhdXRvO3RyYW5zZm9ybTpub25lO3dpbGwtY2hhbmdlOnRyYW5zZm9ybX0ubWRjLXRhYi1zY3JvbGxlci0tYWxpZ24tc3RhcnQgLm1kYy10YWItc2Nyb2xsZXJfX3Njcm9sbC1jb250ZW50e2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0fS5tZGMtdGFiLXNjcm9sbGVyLS1hbGlnbi1lbmQgLm1kYy10YWItc2Nyb2xsZXJfX3Njcm9sbC1jb250ZW50e2p1c3RpZnktY29udGVudDpmbGV4LWVuZH0ubWRjLXRhYi1zY3JvbGxlci0tYWxpZ24tY2VudGVyIC5tZGMtdGFiLXNjcm9sbGVyX19zY3JvbGwtY29udGVudHtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5tZGMtdGFiLXNjcm9sbGVyLS1hbmltYXRpbmcgLm1kYy10YWItc2Nyb2xsZXJfX3Njcm9sbC1hcmVhey13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOmF1dG99Lm1kYy10YWItaW5kaWNhdG9ye2Rpc3BsYXk6ZmxleDtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7anVzdGlmeS1jb250ZW50OmNlbnRlcjt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3BvaW50ZXItZXZlbnRzOm5vbmU7ei1pbmRleDoxfS5tZGMtdGFiLWluZGljYXRvciAubWRjLXRhYi1pbmRpY2F0b3JfX2NvbnRlbnQtLXVuZGVybGluZXtib3JkZXItY29sb3I6IzYyMDBlZTtib3JkZXItY29sb3I6dmFyKC0tbWRjLXRoZW1lLXByaW1hcnksICM2MjAwZWUpfS5tZGMtdGFiLWluZGljYXRvciAubWRjLXRhYi1pbmRpY2F0b3JfX2NvbnRlbnQtLWljb257Y29sb3I6IzAxODc4Njtjb2xvcjp2YXIoLS1tZGMtdGhlbWUtc2Vjb25kYXJ5LCAjMDE4Nzg2KX0ubWRjLXRhYi1pbmRpY2F0b3IgLm1kYy10YWItaW5kaWNhdG9yX19jb250ZW50LS11bmRlcmxpbmV7Ym9yZGVyLXRvcC13aWR0aDoycHh9Lm1kYy10YWItaW5kaWNhdG9yIC5tZGMtdGFiLWluZGljYXRvcl9fY29udGVudC0taWNvbntoZWlnaHQ6MzRweDtmb250LXNpemU6MzRweH0ubWRjLXRhYi1pbmRpY2F0b3JfX2NvbnRlbnR7dHJhbnNmb3JtLW9yaWdpbjpsZWZ0O29wYWNpdHk6MH0ubWRjLXRhYi1pbmRpY2F0b3JfX2NvbnRlbnQtLXVuZGVybGluZXthbGlnbi1zZWxmOmZsZXgtZW5kO2JveC1zaXppbmc6Ym9yZGVyLWJveDt3aWR0aDoxMDAlO2JvcmRlci10b3Atc3R5bGU6c29saWR9Lm1kYy10YWItaW5kaWNhdG9yX19jb250ZW50LS1pY29ue2FsaWduLXNlbGY6Y2VudGVyO21hcmdpbjowIGF1dG99Lm1kYy10YWItaW5kaWNhdG9yLS1hY3RpdmUgLm1kYy10YWItaW5kaWNhdG9yX19jb250ZW50e29wYWNpdHk6MX0ubWRjLXRhYi1pbmRpY2F0b3IgLm1kYy10YWItaW5kaWNhdG9yX19jb250ZW50e3RyYW5zaXRpb246MjUwbXMgdHJhbnNmb3JtIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSl9Lm1kYy10YWItaW5kaWNhdG9yLS1uby10cmFuc2l0aW9uIC5tZGMtdGFiLWluZGljYXRvcl9fY29udGVudHt0cmFuc2l0aW9uOm5vbmV9Lm1kYy10YWItaW5kaWNhdG9yLS1mYWRlIC5tZGMtdGFiLWluZGljYXRvcl9fY29udGVudHt0cmFuc2l0aW9uOjE1MG1zIG9wYWNpdHkgbGluZWFyfS5tZGMtdGFiLWluZGljYXRvci0tYWN0aXZlLm1kYy10YWItaW5kaWNhdG9yLS1mYWRlIC5tZGMtdGFiLWluZGljYXRvcl9fY29udGVudHt0cmFuc2l0aW9uLWRlbGF5OjEwMG1zfS5tZGMtdGFiey1tb3otb3N4LWZvbnQtc21vb3RoaW5nOmdyYXlzY2FsZTstd2Via2l0LWZvbnQtc21vb3RoaW5nOmFudGlhbGlhc2VkO2ZvbnQtZmFtaWx5OlJvYm90bywgc2Fucy1zZXJpZjtmb250LWZhbWlseTp2YXIoLS1tZGMtdHlwb2dyYXBoeS1idXR0b24tZm9udC1mYW1pbHksIHZhcigtLW1kYy10eXBvZ3JhcGh5LWZvbnQtZmFtaWx5LCBSb2JvdG8sIHNhbnMtc2VyaWYpKTtmb250LXNpemU6MC44NzVyZW07Zm9udC1zaXplOnZhcigtLW1kYy10eXBvZ3JhcGh5LWJ1dHRvbi1mb250LXNpemUsIDAuODc1cmVtKTtsaW5lLWhlaWdodDoyLjI1cmVtO2xpbmUtaGVpZ2h0OnZhcigtLW1kYy10eXBvZ3JhcGh5LWJ1dHRvbi1saW5lLWhlaWdodCwgMi4yNXJlbSk7Zm9udC13ZWlnaHQ6NTAwO2ZvbnQtd2VpZ2h0OnZhcigtLW1kYy10eXBvZ3JhcGh5LWJ1dHRvbi1mb250LXdlaWdodCwgNTAwKTtsZXR0ZXItc3BhY2luZzowLjA4OTI4NTcxNDNlbTtsZXR0ZXItc3BhY2luZzp2YXIoLS1tZGMtdHlwb2dyYXBoeS1idXR0b24tbGV0dGVyLXNwYWNpbmcsIDAuMDg5Mjg1NzE0M2VtKTt0ZXh0LWRlY29yYXRpb246bm9uZTt0ZXh0LWRlY29yYXRpb246dmFyKC0tbWRjLXR5cG9ncmFwaHktYnV0dG9uLXRleHQtZGVjb3JhdGlvbiwgbm9uZSk7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO3RleHQtdHJhbnNmb3JtOnZhcigtLW1kYy10eXBvZ3JhcGh5LWJ1dHRvbi10ZXh0LXRyYW5zZm9ybSwgdXBwZXJjYXNlKTtwYWRkaW5nLXJpZ2h0OjI0cHg7cGFkZGluZy1sZWZ0OjI0cHg7cG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpmbGV4O2ZsZXg6MSAwIGF1dG87anVzdGlmeS1jb250ZW50OmNlbnRlcjtib3gtc2l6aW5nOmJvcmRlci1ib3g7bWFyZ2luOjA7cGFkZGluZy10b3A6MDtwYWRkaW5nLWJvdHRvbTowO2JvcmRlcjpub25lO291dGxpbmU6bm9uZTtiYWNrZ3JvdW5kOm5vbmU7dGV4dC1hbGlnbjpjZW50ZXI7d2hpdGUtc3BhY2U6bm93cmFwO2N1cnNvcjpwb2ludGVyOy13ZWJraXQtYXBwZWFyYW5jZTpub25lO3otaW5kZXg6MX0ubWRjLXRhYiAubWRjLXRhYl9fdGV4dC1sYWJlbHtjb2xvcjpyZ2JhKDAsMCwwLC42KX0ubWRjLXRhYiAubWRjLXRhYl9faWNvbntjb2xvcjpyZ2JhKDAsMCwwLC41NCk7ZmlsbDpjdXJyZW50Q29sb3J9Lm1kYy10YWI6Oi1tb3otZm9jdXMtaW5uZXJ7cGFkZGluZzowO2JvcmRlcjowfS5tZGMtdGFiLS1taW4td2lkdGh7ZmxleDowIDEgYXV0b30ubWRjLXRhYl9fY29udGVudHtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7aGVpZ2h0OmluaGVyaXQ7cG9pbnRlci1ldmVudHM6bm9uZX0ubWRjLXRhYl9fdGV4dC1sYWJlbHt0cmFuc2l0aW9uOjE1MG1zIGNvbG9yIGxpbmVhcjtkaXNwbGF5OmlubGluZS1ibG9jaztsaW5lLWhlaWdodDoxO3otaW5kZXg6Mn0ubWRjLXRhYl9faWNvbnt0cmFuc2l0aW9uOjE1MG1zIGNvbG9yIGxpbmVhcjt3aWR0aDoyNHB4O2hlaWdodDoyNHB4O2ZvbnQtc2l6ZToyNHB4O3otaW5kZXg6Mn0ubWRjLXRhYi0tc3RhY2tlZCAubWRjLXRhYl9fY29udGVudHtmbGV4LWRpcmVjdGlvbjpjb2x1bW47YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXJ9Lm1kYy10YWItLXN0YWNrZWQgLm1kYy10YWJfX3RleHQtbGFiZWx7cGFkZGluZy10b3A6NnB4O3BhZGRpbmctYm90dG9tOjRweH0ubWRjLXRhYi0tYWN0aXZlIC5tZGMtdGFiX190ZXh0LWxhYmVse2NvbG9yOiM2MjAwZWU7Y29sb3I6dmFyKC0tbWRjLXRoZW1lLXByaW1hcnksICM2MjAwZWUpfS5tZGMtdGFiLS1hY3RpdmUgLm1kYy10YWJfX2ljb257Y29sb3I6IzYyMDBlZTtjb2xvcjp2YXIoLS1tZGMtdGhlbWUtcHJpbWFyeSwgIzYyMDBlZSk7ZmlsbDpjdXJyZW50Q29sb3J9Lm1kYy10YWItLWFjdGl2ZSAubWRjLXRhYl9fdGV4dC1sYWJlbCwubWRjLXRhYi0tYWN0aXZlIC5tZGMtdGFiX19pY29ue3RyYW5zaXRpb24tZGVsYXk6MTAwbXN9Lm1kYy10YWI6bm90KC5tZGMtdGFiLS1zdGFja2VkKSAubWRjLXRhYl9faWNvbisubWRjLXRhYl9fdGV4dC1sYWJlbHtwYWRkaW5nLWxlZnQ6OHB4O3BhZGRpbmctcmlnaHQ6MH1bZGlyPXJ0bF0gLm1kYy10YWI6bm90KC5tZGMtdGFiLS1zdGFja2VkKSAubWRjLXRhYl9faWNvbisubWRjLXRhYl9fdGV4dC1sYWJlbCwubWRjLXRhYjpub3QoLm1kYy10YWItLXN0YWNrZWQpIC5tZGMtdGFiX19pY29uKy5tZGMtdGFiX190ZXh0LWxhYmVsW2Rpcj1ydGxde3BhZGRpbmctbGVmdDowO3BhZGRpbmctcmlnaHQ6OHB4fUBrZXlmcmFtZXMgbWRjLXJpcHBsZS1mZy1yYWRpdXMtaW57ZnJvbXthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSk7dHJhbnNmb3JtOnRyYW5zbGF0ZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXRyYW5zbGF0ZS1zdGFydCwgMCkpIHNjYWxlKDEpfXRve3RyYW5zZm9ybTp0cmFuc2xhdGUodmFyKC0tbWRjLXJpcHBsZS1mZy10cmFuc2xhdGUtZW5kLCAwKSkgc2NhbGUodmFyKC0tbWRjLXJpcHBsZS1mZy1zY2FsZSwgMSkpfX1Aa2V5ZnJhbWVzIG1kYy1yaXBwbGUtZmctb3BhY2l0eS1pbntmcm9te2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyO29wYWNpdHk6MH10b3tvcGFjaXR5OnZhcigtLW1kYy1yaXBwbGUtZmctb3BhY2l0eSwgMCl9fUBrZXlmcmFtZXMgbWRjLXJpcHBsZS1mZy1vcGFjaXR5LW91dHtmcm9te2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyO29wYWNpdHk6dmFyKC0tbWRjLXJpcHBsZS1mZy1vcGFjaXR5LCAwKX10b3tvcGFjaXR5OjB9fS5tZGMtdGFiX19yaXBwbGV7LS1tZGMtcmlwcGxlLWZnLXNpemU6IDA7LS1tZGMtcmlwcGxlLWxlZnQ6IDA7LS1tZGMtcmlwcGxlLXRvcDogMDstLW1kYy1yaXBwbGUtZmctc2NhbGU6IDE7LS1tZGMtcmlwcGxlLWZnLXRyYW5zbGF0ZS1lbmQ6IDA7LS1tZGMtcmlwcGxlLWZnLXRyYW5zbGF0ZS1zdGFydDogMDstd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6cmdiYSgwLDAsMCwwKTtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtvdmVyZmxvdzpoaWRkZW59Lm1kYy10YWJfX3JpcHBsZTo6YmVmb3JlLC5tZGMtdGFiX19yaXBwbGU6OmFmdGVye3Bvc2l0aW9uOmFic29sdXRlO2JvcmRlci1yYWRpdXM6NTAlO29wYWNpdHk6MDtwb2ludGVyLWV2ZW50czpub25lO2NvbnRlbnQ6XFxcIlxcXCJ9Lm1kYy10YWJfX3JpcHBsZTo6YmVmb3Jle3RyYW5zaXRpb246b3BhY2l0eSAxNW1zIGxpbmVhcixiYWNrZ3JvdW5kLWNvbG9yIDE1bXMgbGluZWFyO3otaW5kZXg6MX0ubWRjLXRhYl9fcmlwcGxlLm1kYy1yaXBwbGUtdXBncmFkZWQ6OmJlZm9yZXt0cmFuc2Zvcm06c2NhbGUodmFyKC0tbWRjLXJpcHBsZS1mZy1zY2FsZSwgMSkpfS5tZGMtdGFiX19yaXBwbGUubWRjLXJpcHBsZS11cGdyYWRlZDo6YWZ0ZXJ7dG9wOjA7bGVmdDowO3RyYW5zZm9ybTpzY2FsZSgwKTt0cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBjZW50ZXJ9Lm1kYy10YWJfX3JpcHBsZS5tZGMtcmlwcGxlLXVwZ3JhZGVkLS11bmJvdW5kZWQ6OmFmdGVye3RvcDp2YXIoLS1tZGMtcmlwcGxlLXRvcCwgMCk7bGVmdDp2YXIoLS1tZGMtcmlwcGxlLWxlZnQsIDApfS5tZGMtdGFiX19yaXBwbGUubWRjLXJpcHBsZS11cGdyYWRlZC0tZm9yZWdyb3VuZC1hY3RpdmF0aW9uOjphZnRlcnthbmltYXRpb246bWRjLXJpcHBsZS1mZy1yYWRpdXMtaW4gMjI1bXMgZm9yd2FyZHMsbWRjLXJpcHBsZS1mZy1vcGFjaXR5LWluIDc1bXMgZm9yd2FyZHN9Lm1kYy10YWJfX3JpcHBsZS5tZGMtcmlwcGxlLXVwZ3JhZGVkLS1mb3JlZ3JvdW5kLWRlYWN0aXZhdGlvbjo6YWZ0ZXJ7YW5pbWF0aW9uOm1kYy1yaXBwbGUtZmctb3BhY2l0eS1vdXQgMTUwbXM7dHJhbnNmb3JtOnRyYW5zbGF0ZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXRyYW5zbGF0ZS1lbmQsIDApKSBzY2FsZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXNjYWxlLCAxKSl9Lm1kYy10YWJfX3JpcHBsZTo6YmVmb3JlLC5tZGMtdGFiX19yaXBwbGU6OmFmdGVye3RvcDpjYWxjKDUwJSAtIDEwMCUpO2xlZnQ6Y2FsYyg1MCUgLSAxMDAlKTt3aWR0aDoyMDAlO2hlaWdodDoyMDAlfS5tZGMtdGFiX19yaXBwbGUubWRjLXJpcHBsZS11cGdyYWRlZDo6YWZ0ZXJ7d2lkdGg6dmFyKC0tbWRjLXJpcHBsZS1mZy1zaXplLCAxMDAlKTtoZWlnaHQ6dmFyKC0tbWRjLXJpcHBsZS1mZy1zaXplLCAxMDAlKX0ubWRjLXRhYl9fcmlwcGxlOjpiZWZvcmUsLm1kYy10YWJfX3JpcHBsZTo6YWZ0ZXJ7YmFja2dyb3VuZC1jb2xvcjojNjIwMGVlO2JhY2tncm91bmQtY29sb3I6dmFyKC0tbWRjLXRoZW1lLXByaW1hcnksICM2MjAwZWUpfS5tZGMtdGFiX19yaXBwbGU6aG92ZXI6OmJlZm9yZXtvcGFjaXR5Oi4wNH0ubWRjLXRhYl9fcmlwcGxlLm1kYy1yaXBwbGUtdXBncmFkZWQtLWJhY2tncm91bmQtZm9jdXNlZDo6YmVmb3JlLC5tZGMtdGFiX19yaXBwbGU6bm90KC5tZGMtcmlwcGxlLXVwZ3JhZGVkKTpmb2N1czo6YmVmb3Jle3RyYW5zaXRpb24tZHVyYXRpb246NzVtcztvcGFjaXR5Oi4xMn0ubWRjLXRhYl9fcmlwcGxlOm5vdCgubWRjLXJpcHBsZS11cGdyYWRlZCk6OmFmdGVye3RyYW5zaXRpb246b3BhY2l0eSAxNTBtcyBsaW5lYXJ9Lm1kYy10YWJfX3JpcHBsZTpub3QoLm1kYy1yaXBwbGUtdXBncmFkZWQpOmFjdGl2ZTo6YWZ0ZXJ7dHJhbnNpdGlvbi1kdXJhdGlvbjo3NW1zO29wYWNpdHk6LjEyfS5tZGMtdGFiX19yaXBwbGUubWRjLXJpcHBsZS11cGdyYWRlZHstLW1kYy1yaXBwbGUtZmctb3BhY2l0eTogMC4xMn1odG1se2hlaWdodDoxMDAlO3dpZHRoOjEwMCU7Zm9udC1mYW1pbHk6XFxcIk9wZW4gU2FucyBDb25kZW5zZWRcXFwiO2ZvbnQtd2VpZ2h0OmJvbGQ7c2Nyb2xsLWJlaGF2aW9yOnNtb290aH1ib2R5e3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjthbGlnbi1pdGVtczpjZW50ZXJ9Lm1kYy10YWItYmFye3Bvc2l0aW9uOmZpeGVkO3RvcDowO3otaW5kZXg6MTtiYWNrZ3JvdW5kOiNmZmZ9YXJ0aWNsZXtkaXNwbGF5OmZsZXg7Zm9udC1zaXplOjIwcHh9YXJ0aWNsZSBoMntmb250LXNpemU6NDBweH1hcnRpY2xlIGgze2ZvbnQtc2l6ZTozMHB4fWFydGljbGUgcHJle2ZvbnQtZmFtaWx5OlxcXCJPcGVuIFNhbnMgQ29uZGVuc2VkXFxcIn0jY29udGVudHttYXJnaW4tdG9wOjQ4cHg7bWF4LXdpZHRoOjE0MDBweDt3aWR0aDoxMDAlO2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXJ9Lm1kYy10YWJbaWQ9bWRjLXRhYi0xXS5tZGMtdGFiLS1hY3RpdmUgLm1kYy10YWJfX3RleHQtbGFiZWx7Y29sb3I6I2E0MTEwOX0ubWRjLXRhYltpZD1tZGMtdGFiLTFdLm1kYy10YWItLWFjdGl2ZSAubWRjLXRhYl9fcmlwcGxlOjpiZWZvcmUsLm1kYy10YWJbaWQ9bWRjLXRhYi0xXS5tZGMtdGFiLS1hY3RpdmUgLm1kYy10YWJfX3JpcHBsZTo6YWZ0ZXJ7YmFja2dyb3VuZC1jb2xvcjojYTQxMTA5fS5tZGMtdGFiW2lkPW1kYy10YWItMV0ubWRjLXRhYi0tYWN0aXZlIC5tZGMtdGFiX19yaXBwbGU6aG92ZXI6OmJlZm9yZXtvcGFjaXR5Oi4wNH0ubWRjLXRhYltpZD1tZGMtdGFiLTFdLm1kYy10YWItLWFjdGl2ZSAubWRjLXRhYl9fcmlwcGxlLm1kYy1yaXBwbGUtdXBncmFkZWQtLWJhY2tncm91bmQtZm9jdXNlZDo6YmVmb3JlLC5tZGMtdGFiW2lkPW1kYy10YWItMV0ubWRjLXRhYi0tYWN0aXZlIC5tZGMtdGFiX19yaXBwbGU6bm90KC5tZGMtcmlwcGxlLXVwZ3JhZGVkKTpmb2N1czo6YmVmb3Jle3RyYW5zaXRpb24tZHVyYXRpb246NzVtcztvcGFjaXR5Oi4xMn0ubWRjLXRhYltpZD1tZGMtdGFiLTFdLm1kYy10YWItLWFjdGl2ZSAubWRjLXRhYl9fcmlwcGxlOm5vdCgubWRjLXJpcHBsZS11cGdyYWRlZCk6OmFmdGVye3RyYW5zaXRpb246b3BhY2l0eSAxNTBtcyBsaW5lYXJ9Lm1kYy10YWJbaWQ9bWRjLXRhYi0xXS5tZGMtdGFiLS1hY3RpdmUgLm1kYy10YWJfX3JpcHBsZTpub3QoLm1kYy1yaXBwbGUtdXBncmFkZWQpOmFjdGl2ZTo6YWZ0ZXJ7dHJhbnNpdGlvbi1kdXJhdGlvbjo3NW1zO29wYWNpdHk6LjEyfS5tZGMtdGFiW2lkPW1kYy10YWItMV0ubWRjLXRhYi0tYWN0aXZlIC5tZGMtdGFiX19yaXBwbGUubWRjLXJpcHBsZS11cGdyYWRlZHstLW1kYy1yaXBwbGUtZmctb3BhY2l0eTogMC4xMn0ubWRjLXRhYltpZD1tZGMtdGFiLTFdIC5tZGMtdGFiLWluZGljYXRvciAubWRjLXRhYi1pbmRpY2F0b3JfX2NvbnRlbnQtLXVuZGVybGluZXtib3JkZXItY29sb3I6I2E0MTEwOX0ubWRjLXRhYltpZD1tZGMtdGFiLTJdLm1kYy10YWItLWFjdGl2ZSAubWRjLXRhYl9fdGV4dC1sYWJlbHtjb2xvcjojOGYwMDY2fS5tZGMtdGFiW2lkPW1kYy10YWItMl0ubWRjLXRhYi0tYWN0aXZlIC5tZGMtdGFiX19yaXBwbGU6OmJlZm9yZSwubWRjLXRhYltpZD1tZGMtdGFiLTJdLm1kYy10YWItLWFjdGl2ZSAubWRjLXRhYl9fcmlwcGxlOjphZnRlcntiYWNrZ3JvdW5kLWNvbG9yOiM4ZjAwNjZ9Lm1kYy10YWJbaWQ9bWRjLXRhYi0yXS5tZGMtdGFiLS1hY3RpdmUgLm1kYy10YWJfX3JpcHBsZTpob3Zlcjo6YmVmb3Jle29wYWNpdHk6LjA0fS5tZGMtdGFiW2lkPW1kYy10YWItMl0ubWRjLXRhYi0tYWN0aXZlIC5tZGMtdGFiX19yaXBwbGUubWRjLXJpcHBsZS11cGdyYWRlZC0tYmFja2dyb3VuZC1mb2N1c2VkOjpiZWZvcmUsLm1kYy10YWJbaWQ9bWRjLXRhYi0yXS5tZGMtdGFiLS1hY3RpdmUgLm1kYy10YWJfX3JpcHBsZTpub3QoLm1kYy1yaXBwbGUtdXBncmFkZWQpOmZvY3VzOjpiZWZvcmV7dHJhbnNpdGlvbi1kdXJhdGlvbjo3NW1zO29wYWNpdHk6LjEyfS5tZGMtdGFiW2lkPW1kYy10YWItMl0ubWRjLXRhYi0tYWN0aXZlIC5tZGMtdGFiX19yaXBwbGU6bm90KC5tZGMtcmlwcGxlLXVwZ3JhZGVkKTo6YWZ0ZXJ7dHJhbnNpdGlvbjpvcGFjaXR5IDE1MG1zIGxpbmVhcn0ubWRjLXRhYltpZD1tZGMtdGFiLTJdLm1kYy10YWItLWFjdGl2ZSAubWRjLXRhYl9fcmlwcGxlOm5vdCgubWRjLXJpcHBsZS11cGdyYWRlZCk6YWN0aXZlOjphZnRlcnt0cmFuc2l0aW9uLWR1cmF0aW9uOjc1bXM7b3BhY2l0eTouMTJ9Lm1kYy10YWJbaWQ9bWRjLXRhYi0yXS5tZGMtdGFiLS1hY3RpdmUgLm1kYy10YWJfX3JpcHBsZS5tZGMtcmlwcGxlLXVwZ3JhZGVkey0tbWRjLXJpcHBsZS1mZy1vcGFjaXR5OiAwLjEyfS5tZGMtdGFiW2lkPW1kYy10YWItMl0gLm1kYy10YWItaW5kaWNhdG9yIC5tZGMtdGFiLWluZGljYXRvcl9fY29udGVudC0tdW5kZXJsaW5le2JvcmRlci1jb2xvcjojOGYwMDY2fS5tZGMtdGFiW2lkPW1kYy10YWItM10ubWRjLXRhYi0tYWN0aXZlIC5tZGMtdGFiX190ZXh0LWxhYmVse2NvbG9yOiMwMGFlZWZ9Lm1kYy10YWJbaWQ9bWRjLXRhYi0zXS5tZGMtdGFiLS1hY3RpdmUgLm1kYy10YWJfX3JpcHBsZTo6YmVmb3JlLC5tZGMtdGFiW2lkPW1kYy10YWItM10ubWRjLXRhYi0tYWN0aXZlIC5tZGMtdGFiX19yaXBwbGU6OmFmdGVye2JhY2tncm91bmQtY29sb3I6IzAwYWVlZn0ubWRjLXRhYltpZD1tZGMtdGFiLTNdLm1kYy10YWItLWFjdGl2ZSAubWRjLXRhYl9fcmlwcGxlOmhvdmVyOjpiZWZvcmV7b3BhY2l0eTouMDh9Lm1kYy10YWJbaWQ9bWRjLXRhYi0zXS5tZGMtdGFiLS1hY3RpdmUgLm1kYy10YWJfX3JpcHBsZS5tZGMtcmlwcGxlLXVwZ3JhZGVkLS1iYWNrZ3JvdW5kLWZvY3VzZWQ6OmJlZm9yZSwubWRjLXRhYltpZD1tZGMtdGFiLTNdLm1kYy10YWItLWFjdGl2ZSAubWRjLXRhYl9fcmlwcGxlOm5vdCgubWRjLXJpcHBsZS11cGdyYWRlZCk6Zm9jdXM6OmJlZm9yZXt0cmFuc2l0aW9uLWR1cmF0aW9uOjc1bXM7b3BhY2l0eTouMjR9Lm1kYy10YWJbaWQ9bWRjLXRhYi0zXS5tZGMtdGFiLS1hY3RpdmUgLm1kYy10YWJfX3JpcHBsZTpub3QoLm1kYy1yaXBwbGUtdXBncmFkZWQpOjphZnRlcnt0cmFuc2l0aW9uOm9wYWNpdHkgMTUwbXMgbGluZWFyfS5tZGMtdGFiW2lkPW1kYy10YWItM10ubWRjLXRhYi0tYWN0aXZlIC5tZGMtdGFiX19yaXBwbGU6bm90KC5tZGMtcmlwcGxlLXVwZ3JhZGVkKTphY3RpdmU6OmFmdGVye3RyYW5zaXRpb24tZHVyYXRpb246NzVtcztvcGFjaXR5Oi4yNH0ubWRjLXRhYltpZD1tZGMtdGFiLTNdLm1kYy10YWItLWFjdGl2ZSAubWRjLXRhYl9fcmlwcGxlLm1kYy1yaXBwbGUtdXBncmFkZWR7LS1tZGMtcmlwcGxlLWZnLW9wYWNpdHk6IDAuMjR9Lm1kYy10YWJbaWQ9bWRjLXRhYi0zXSAubWRjLXRhYi1pbmRpY2F0b3IgLm1kYy10YWItaW5kaWNhdG9yX19jb250ZW50LS11bmRlcmxpbmV7Ym9yZGVyLWNvbG9yOiMwMGFlZWZ9Lm1kYy10YWJbaWQ9bWRjLXRhYi00XS5tZGMtdGFiLS1hY3RpdmUgLm1kYy10YWJfX3RleHQtbGFiZWx7Y29sb3I6I2RhYzIwMH0ubWRjLXRhYltpZD1tZGMtdGFiLTRdLm1kYy10YWItLWFjdGl2ZSAubWRjLXRhYl9fcmlwcGxlOjpiZWZvcmUsLm1kYy10YWJbaWQ9bWRjLXRhYi00XS5tZGMtdGFiLS1hY3RpdmUgLm1kYy10YWJfX3JpcHBsZTo6YWZ0ZXJ7YmFja2dyb3VuZC1jb2xvcjojZGFjMjAwfS5tZGMtdGFiW2lkPW1kYy10YWItNF0ubWRjLXRhYi0tYWN0aXZlIC5tZGMtdGFiX19yaXBwbGU6aG92ZXI6OmJlZm9yZXtvcGFjaXR5Oi4wOH0ubWRjLXRhYltpZD1tZGMtdGFiLTRdLm1kYy10YWItLWFjdGl2ZSAubWRjLXRhYl9fcmlwcGxlLm1kYy1yaXBwbGUtdXBncmFkZWQtLWJhY2tncm91bmQtZm9jdXNlZDo6YmVmb3JlLC5tZGMtdGFiW2lkPW1kYy10YWItNF0ubWRjLXRhYi0tYWN0aXZlIC5tZGMtdGFiX19yaXBwbGU6bm90KC5tZGMtcmlwcGxlLXVwZ3JhZGVkKTpmb2N1czo6YmVmb3Jle3RyYW5zaXRpb24tZHVyYXRpb246NzVtcztvcGFjaXR5Oi4yNH0ubWRjLXRhYltpZD1tZGMtdGFiLTRdLm1kYy10YWItLWFjdGl2ZSAubWRjLXRhYl9fcmlwcGxlOm5vdCgubWRjLXJpcHBsZS11cGdyYWRlZCk6OmFmdGVye3RyYW5zaXRpb246b3BhY2l0eSAxNTBtcyBsaW5lYXJ9Lm1kYy10YWJbaWQ9bWRjLXRhYi00XS5tZGMtdGFiLS1hY3RpdmUgLm1kYy10YWJfX3JpcHBsZTpub3QoLm1kYy1yaXBwbGUtdXBncmFkZWQpOmFjdGl2ZTo6YWZ0ZXJ7dHJhbnNpdGlvbi1kdXJhdGlvbjo3NW1zO29wYWNpdHk6LjI0fS5tZGMtdGFiW2lkPW1kYy10YWItNF0ubWRjLXRhYi0tYWN0aXZlIC5tZGMtdGFiX19yaXBwbGUubWRjLXJpcHBsZS11cGdyYWRlZHstLW1kYy1yaXBwbGUtZmctb3BhY2l0eTogMC4yNH0ubWRjLXRhYltpZD1tZGMtdGFiLTRdIC5tZGMtdGFiLWluZGljYXRvciAubWRjLXRhYi1pbmRpY2F0b3JfX2NvbnRlbnQtLXVuZGVybGluZXtib3JkZXItY29sb3I6I2RhYzIwMH0ubG9nby1kaXZ7YmFja2dyb3VuZC1zaXplOmNvdmVyO2JhY2tncm91bmQtcG9zaXRpb246Y2VudGVyO3dpZHRoOjUwcHg7aGVpZ2h0OjUwcHg7YWxpZ24tc2VsZjpjZW50ZXI7bWFyZ2luOjElfS5oZXJvLWltYWdle2JhY2tncm91bmQtc2l6ZTpjb3ZlcjtiYWNrZ3JvdW5kLXBvc2l0aW9uOmNlbnRlcjtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MTAwJTtoZWlnaHQ6ODV2aDttYXJnaW4tYm90dG9tOjQlfS5oZXJvLXRleHR7dGV4dC1hbGlnbjpjZW50ZXI7cG9zaXRpb246YWJzb2x1dGU7dG9wOjUwJTtsZWZ0OjUwJTt0cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsIC01MCUpO2NvbG9yOiNmZmY7YmFja2dyb3VuZDpub25lO21hcmdpbi10b3A6MSU7bWFyZ2luLWJvdHRvbToxJX1AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDU2MHB4KXsuaGVyby10ZXh0IGgxe2ZvbnQtc2l6ZToyNHB4fX1mb290ZXJ7ZGlzcGxheTpmbGV4O3dpZHRoOjEwMCU7YmFja2dyb3VuZC1jb2xvcjojNjY2O3BhZGRpbmc6LjUlIDAlfWZvb3RlciBwe3BhZGRpbmctbGVmdDoxJX0uaG91cnMtYXJ0aWNsZXtkaXNwbGF5OmZsZXg7d2lkdGg6MTAwJTtmbGV4LWRpcmVjdGlvbjpyb3c7anVzdGlmeS1jb250ZW50OnNwYWNlLWFyb3VuZH0uaG91cnMtYXJ0aWNsZSAuYXJ0aWNsZS1jYXJke2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47YWxpZ24taXRlbXM6Y2VudGVyfUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTYwcHgpey5ob3Vycy1hcnRpY2xle2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn19Lm1hbmlmZXN0by1hcnRpY2xle2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtmb250LXNpemU6MjBweH0ubWFuaWZlc3RvLWFydGljbGUgaDN7cGFkZGluZy1sZWZ0OjUlO3BhZGRpbmctYm90dG9tOjIlfS5tYW5pZmVzdG8tYXJ0aWNsZSBwe3BhZGRpbmctbGVmdDo1JTtwYWRkaW5nLXJpZ2h0OjUlO3BhZGRpbmctdG9wOjElfS5tYW5pZmVzdG8tYXJ0aWNsZSB1bHtwYWRkaW5nOjElIDUlIDIlIDYlfS5tYW5pZmVzdG8tYXJ0aWNsZSB1bCBsaTo6YmVmb3Jle2NvbnRlbnQ6XFxcIi1cXFwiO2NvbG9yOiMwMGFlZWY7Zm9udC13ZWlnaHQ6Ym9sZGVyO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjFlbX0uY29udGFjdC1hcnRpY2xle2Rpc3BsYXk6ZmxleDt3aWR0aDoxMDAlO2ZsZXgtZGlyZWN0aW9uOnJvdztqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYXJvdW5kfS5jb250YWN0LWFydGljbGUgLmFydGljbGUtY2FyZHtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2FsaWduLWl0ZW1zOmNlbnRlcn0uY29udGFjdC1hcnRpY2xlIHN2Z3t3aWR0aDozMHB4O2hlaWdodDozMHB4O21hcmdpbi10b3A6MiU7bWFyZ2luLWxlZnQ6MSV9LmNvbnRhY3QtZm9ybXtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2p1c3RpZnktY29udGVudDpzcGFjZS1hcm91bmQ7YWxpZ24taXRlbXM6Y2VudGVyO3dpZHRoOjgwJTtoZWlnaHQ6NDB2aH0uY29udGFjdC1mb3JtIGgze2ZvbnQtc2l6ZTozMHB4fS5jb250YWN0LWZvcm0gLmluZm9EaXZ7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1hcm91bmQ7aGVpZ2h0OjUwcHg7d2lkdGg6NjAlfS5jb250YWN0LWZvcm0gLm1lc3NhZ2VEaXZ7ZGlzcGxheTpmbGV4O3dpZHRoOjgwJX0uY29udGFjdC1mb3JtIC5tZXNzYWdlRGl2IC5pbnB1dC1ncm91cHt3aWR0aDo1MCV9LmNvbnRhY3QtZm9ybSAuaW5wdXQtZ3JvdXB7cG9zaXRpb246cmVsYXRpdmU7bWFyZ2luOjQwcHggYXV0bzt3aWR0aDozNSV9LmNvbnRhY3QtZm9ybSAuZm9ybS1jb250cm9se3Bvc2l0aW9uOnJlbGF0aXZlO3otaW5kZXg6MTt3aWR0aDoxMDAlO2hlaWdodDozNXB4O2ZvbnQtc2l6ZToxNnB4O2JvcmRlcjpub25lO2JvcmRlci1ib3R0b206MXB4IHNvbGlkICNkOWQ5ZDk7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudH0uY29udGFjdC1mb3JtIC5mb3JtLWNvbnRyb2wrbGFiZWx7cG9zaXRpb246YWJzb2x1dGU7dG9wOjEwcHg7bGVmdDozcHg7Zm9udC1zaXplOjE2cHg7Y29sb3I6Izk5OTt0cmFuc2l0aW9uOmFsbCAuMnMgZWFzZS1vdXR9LmNvbnRhY3QtZm9ybSAuZm9ybS1jb250cm9sOmZvY3Vze291dGxpbmU6bm9uZTtib3JkZXItd2lkdGg6MnB4O2JvcmRlci1jb2xvcjojZGFjMjAwO3RyYW5zaXRpb246YWxsIC4ycyBlYXNlLW91dH0uY29udGFjdC1mb3JtIC5mb3JtLWNvbnRyb2wuaGFzLXZhbHVlK2xhYmVsLC5jb250YWN0LWZvcm0gLmZvcm0tY29udHJvbDpmb2N1cytsYWJlbHt0b3A6LTE1cHg7Y29sb3I6I2RhYzIwMDtmb250LXNpemU6MTJweH0uY29udGFjdC1mb3JtIC5mb3JtLWNvbnRyb2wuaGFzLXZhbHVlOm5vdCg6Zm9jdXMpK2xhYmVse2NvbG9yOiM5OTl9Lm1hcC1jb250YWluZXJ7d2lkdGg6MTAwJTtoZWlnaHQ6NDB2aDttYXJnaW46MSUgMH0ubWFwLWRpc3BsYXl7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJX0ubWFwLWZyYW1le3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7Ym9yZGVyOjB9QG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMDY1cHgpey5jb250YWN0LWFydGljbGV7ZmxleC1kaXJlY3Rpb246Y29sdW1ufX1AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDU2MHB4KXsuY29udGFjdC1hcnRpY2xlIC5hcnRpY2xlLWNhcmR7ZmxleC1kaXJlY3Rpb246Y29sdW1uO3BhZGRpbmc6MyUgMH0uY29udGFjdC1hcnRpY2xlIHB7bWFyZ2luLWxlZnQ6NSU7bWFyZ2luLXJpZ2h0OjUlfS5jb250YWN0LWZvcm0gaDN7bWFyZ2luLXRvcDotMjVweDttYXJnaW4tYm90dG9tOi01MHB4fS5jb250YWN0LWZvcm0gLmluZm9EaXZ7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0O2hlaWdodDoyMCU7cGFkZGluZzowO21hcmdpbjowfS5jb250YWN0LWZvcm0gLmluZm9EaXYgLmlucHV0LWdyb3Vwe21hcmdpbjozJTt3aWR0aDo4MCV9LmNvbnRhY3QtZm9ybSAuaW5wdXQtZ3JvdXB7bWFyZ2luOjElfS5jb250YWN0LWZvcm0gLm1lc3NhZ2VEaXZ7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2FsaWduLWl0ZW1zOmNlbnRlcn19YnV0dG9ue2JhY2tncm91bmQtY29sb3I6I2RhYzIwMDtjb2xvcjojZmZmO2ZvbnQtc2l6ZToxNHB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTtmb250LXdlaWdodDo1MDA7Ym9yZGVyOjFweCBzb2xpZCAjZGFjMjAwO2hlaWdodDozNnB4O3BhZGRpbmc6MCAxNnB4O2JvcmRlci1yYWRpdXM6MnB4O2JveC1zaGFkb3c6MCAxcHggM3B4ICM5OTl9dGV4dGFyZWEuZm9ybS1jb250cm9se2hlaWdodDoxMjBweH1zZWxlY3R7LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmU7LW1vei1hcHBlYXJhbmNlOm5vbmU7LW1zLWFwcGVhcmFuY2U6bm9uZTthcHBlYXJhbmNlOm5vbmU7b3V0bGluZTowO2JveC1zaGFkb3c6bm9uZTtib3JkZXI6MCAhaW1wb3J0YW50O2JhY2tncm91bmQtaW1hZ2U6bm9uZX1zZWxlY3Q6Oi1tcy1leHBhbmR7ZGlzcGxheTpub25lfS5zZWxlY3R7cG9zaXRpb246cmVsYXRpdmU7dG9wOjYwJTtsZWZ0OjU1MHB4O2Rpc3BsYXk6ZmxleDt3aWR0aDoyMGVtO2hlaWdodDozZW07bGluZS1oZWlnaHQ6MztiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7b3ZlcmZsb3c6aGlkZGVuO2JvcmRlci1yYWRpdXM6LjI1ZW19c2VsZWN0e2ZsZXg6MTtwYWRkaW5nOjAgLjVlbTtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Y3Vyc29yOnBvaW50ZXJ9b3B0aW9ue2JhY2tncm91bmQtY29sb3I6I2ZmZjt0ZXh0LWRlY29yYXRpb24tY29sb3I6IzhmMDA2Nn0uc2VsZWN0OjphZnRlcntjb250ZW50OlxcXCLilrxcXFwiO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO3JpZ2h0OjA7cGFkZGluZzowIDFlbTtiYWNrZ3JvdW5kOiNmZmY7Y3Vyc29yOnBvaW50ZXI7cG9pbnRlci1ldmVudHM6bm9uZTstd2Via2l0LXRyYW5zaXRpb246LjI1cyBhbGwgZWFzZTstby10cmFuc2l0aW9uOi4yNXMgYWxsIGVhc2U7dHJhbnNpdGlvbjouMjVzIGFsbCBlYXNlfS5zZWxlY3Q6aG92ZXI6OmFmdGVye2NvbG9yOiM4ZjAwNjZ9Lm1lbnVzLWFydGljbGV7ZmxleC1kaXJlY3Rpb246Y29sdW1uO3dpZHRoOjEwMCV9Lm1lbnVzLWFydGljbGUgaDJ7Y29sb3I6IzhmMDA2Nn0ubWVudS1ob2xkZXJ7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjthbGlnbi1pdGVtczpjZW50ZXI7d2lkdGg6MTAwJX0ubWVudS1ob2xkZXIgcHtkaXNwbGF5OmZsZXg7d2lkdGg6NzAlO2p1c3RpZnktY29udGVudDpjZW50ZXJ9aHJ7d2lkdGg6MTAwJTtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzhmMDA2Njtib3JkZXItY29sb3I6IzhmMDA2Nn0ubWVudS1kaXZ7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOnJvdztmbGV4LXdyYXA6d3JhcDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjtwYWRkaW5nOjUlfS5tZW51LWl0ZW0tZGl2e2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47d2lkdGg6MzAwcHg7cGFkZGluZzoxJX0ubWVudS1pdGVtLWRpdiBwe2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0fS5tZW51LWl0ZW0tdGl0bGUtZGl2e2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpyb3c7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59Lmx1bmNoLW1lbnUtZGl2e2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47YWxpZ24taXRlbXM6Y2VudGVyO3BhZGRpbmc6MSV9Lmx1bmNoLWl0ZW0taG9sZGVye2Rpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbn1AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEzOTVweCl7LnNlbGVjdHtsZWZ0OjM4JX19QG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMTAwcHgpey5zZWxlY3R7bGVmdDozMiV9fUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogODAwcHgpey5zZWxlY3R7bGVmdDoyNiV9fUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjMwcHgpey5zZWxlY3R7bGVmdDoyMCV9fUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDgwcHgpey5zZWxlY3R7bGVmdDoxNCV9fUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDAwcHgpey5zZWxlY3R7bGVmdDo1JX19XCIsXCIvKiBjeXJpbGxpYy1leHQgKi9cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zIENvbmRlbnNlZCc7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXdlaWdodDogMzAwO1xcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xcbiAgc3JjOiBsb2NhbCgnT3BlbiBTYW5zIENvbmRlbnNlZCBMaWdodCcpLCBsb2NhbCgnT3BlblNhbnNDb25kZW5zZWQtTGlnaHQnKSwgdXJsKGh0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb20vcy9vcGVuc2Fuc2NvbmRlbnNlZC92MTUvejdORmRRRG5iVGthYlpBSU9sOWlsX082S0pqNzNlN0ZmMUdoRHVqTVI2V1Iud29mZjIpIGZvcm1hdCgnd29mZjInKTtcXG4gIHVuaWNvZGUtcmFuZ2U6IFUrMDQ2MC0wNTJGLCBVKzFDODAtMUM4OCwgVSsyMEI0LCBVKzJERTAtMkRGRiwgVStBNjQwLUE2OUYsIFUrRkUyRS1GRTJGO1xcbn1cXG4vKiBjeXJpbGxpYyAqL1xcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6ICdPcGVuIFNhbnMgQ29uZGVuc2VkJztcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxuICBzcmM6IGxvY2FsKCdPcGVuIFNhbnMgQ29uZGVuc2VkIExpZ2h0JyksIGxvY2FsKCdPcGVuU2Fuc0NvbmRlbnNlZC1MaWdodCcpLCB1cmwoaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbS9zL29wZW5zYW5zY29uZGVuc2VkL3YxNS96N05GZFFEbmJUa2FiWkFJT2w5aWxfTzZLSmo3M2U3RmYxR2hEdUhNUjZXUi53b2ZmMikgZm9ybWF0KCd3b2ZmMicpO1xcbiAgdW5pY29kZS1yYW5nZTogVSswNDAwLTA0NUYsIFUrMDQ5MC0wNDkxLCBVKzA0QjAtMDRCMSwgVSsyMTE2O1xcbn1cXG4vKiBncmVlay1leHQgKi9cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zIENvbmRlbnNlZCc7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXdlaWdodDogMzAwO1xcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xcbiAgc3JjOiBsb2NhbCgnT3BlbiBTYW5zIENvbmRlbnNlZCBMaWdodCcpLCBsb2NhbCgnT3BlblNhbnNDb25kZW5zZWQtTGlnaHQnKSwgdXJsKGh0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb20vcy9vcGVuc2Fuc2NvbmRlbnNlZC92MTUvejdORmRRRG5iVGthYlpBSU9sOWlsX082S0pqNzNlN0ZmMUdoRHVuTVI2V1Iud29mZjIpIGZvcm1hdCgnd29mZjInKTtcXG4gIHVuaWNvZGUtcmFuZ2U6IFUrMUYwMC0xRkZGO1xcbn1cXG4vKiBncmVlayAqL1xcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6ICdPcGVuIFNhbnMgQ29uZGVuc2VkJztcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxuICBzcmM6IGxvY2FsKCdPcGVuIFNhbnMgQ29uZGVuc2VkIExpZ2h0JyksIGxvY2FsKCdPcGVuU2Fuc0NvbmRlbnNlZC1MaWdodCcpLCB1cmwoaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbS9zL29wZW5zYW5zY29uZGVuc2VkL3YxNS96N05GZFFEbmJUa2FiWkFJT2w5aWxfTzZLSmo3M2U3RmYxR2hEdWJNUjZXUi53b2ZmMikgZm9ybWF0KCd3b2ZmMicpO1xcbiAgdW5pY29kZS1yYW5nZTogVSswMzcwLTAzRkY7XFxufVxcbi8qIHZpZXRuYW1lc2UgKi9cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zIENvbmRlbnNlZCc7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXdlaWdodDogMzAwO1xcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xcbiAgc3JjOiBsb2NhbCgnT3BlbiBTYW5zIENvbmRlbnNlZCBMaWdodCcpLCBsb2NhbCgnT3BlblNhbnNDb25kZW5zZWQtTGlnaHQnKSwgdXJsKGh0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb20vcy9vcGVuc2Fuc2NvbmRlbnNlZC92MTUvejdORmRRRG5iVGthYlpBSU9sOWlsX082S0pqNzNlN0ZmMUdoRHVyTVI2V1Iud29mZjIpIGZvcm1hdCgnd29mZjInKTtcXG4gIHVuaWNvZGUtcmFuZ2U6IFUrMDEwMi0wMTAzLCBVKzAxMTAtMDExMSwgVSswMTI4LTAxMjksIFUrMDE2OC0wMTY5LCBVKzAxQTAtMDFBMSwgVSswMUFGLTAxQjAsIFUrMUVBMC0xRUY5LCBVKzIwQUI7XFxufVxcbi8qIGxhdGluLWV4dCAqL1xcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6ICdPcGVuIFNhbnMgQ29uZGVuc2VkJztcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxuICBzcmM6IGxvY2FsKCdPcGVuIFNhbnMgQ29uZGVuc2VkIExpZ2h0JyksIGxvY2FsKCdPcGVuU2Fuc0NvbmRlbnNlZC1MaWdodCcpLCB1cmwoaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbS9zL29wZW5zYW5zY29uZGVuc2VkL3YxNS96N05GZFFEbmJUa2FiWkFJT2w5aWxfTzZLSmo3M2U3RmYxR2hEdXZNUjZXUi53b2ZmMikgZm9ybWF0KCd3b2ZmMicpO1xcbiAgdW5pY29kZS1yYW5nZTogVSswMTAwLTAyNEYsIFUrMDI1OSwgVSsxRTAwLTFFRkYsIFUrMjAyMCwgVSsyMEEwLTIwQUIsIFUrMjBBRC0yMENGLCBVKzIxMTMsIFUrMkM2MC0yQzdGLCBVK0E3MjAtQTdGRjtcXG59XFxuLyogbGF0aW4gKi9cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zIENvbmRlbnNlZCc7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXdlaWdodDogMzAwO1xcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xcbiAgc3JjOiBsb2NhbCgnT3BlbiBTYW5zIENvbmRlbnNlZCBMaWdodCcpLCBsb2NhbCgnT3BlblNhbnNDb25kZW5zZWQtTGlnaHQnKSwgdXJsKGh0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb20vcy9vcGVuc2Fuc2NvbmRlbnNlZC92MTUvejdORmRRRG5iVGthYlpBSU9sOWlsX082S0pqNzNlN0ZmMUdoRHVYTVJ3LndvZmYyKSBmb3JtYXQoJ3dvZmYyJyk7XFxuICB1bmljb2RlLXJhbmdlOiBVKzAwMDAtMDBGRiwgVSswMTMxLCBVKzAxNTItMDE1MywgVSswMkJCLTAyQkMsIFUrMDJDNiwgVSswMkRBLCBVKzAyREMsIFUrMjAwMC0yMDZGLCBVKzIwNzQsIFUrMjBBQywgVSsyMTIyLCBVKzIxOTEsIFUrMjE5MywgVSsyMjEyLCBVKzIyMTUsIFUrRkVGRiwgVStGRkZEO1xcbn1cXG5cIixcIi8vXFxuLy8gQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cXG4vL1xcbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcXG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcXFwiU29mdHdhcmVcXFwiKSwgdG8gZGVhbFxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXFxuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcXG4vL1xcbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXFxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXFxuLy9cXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXFxcIkFTIElTXFxcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cXG4vLyBUSEUgU09GVFdBUkUuXFxuLy9cXG5cXG5AdXNlIFxcXCJAbWF0ZXJpYWwvYW5pbWF0aW9uL3ZhcmlhYmxlc1xcXCIgYXMgYW5pbWF0aW9uLXZhcmlhYmxlcztcXG5AdXNlIFxcXCJAbWF0ZXJpYWwvZGVuc2l0eS9mdW5jdGlvbnNcXFwiIGFzIGRlbnNpdHktZnVuY3Rpb25zO1xcbkB1c2UgXFxcIkBtYXRlcmlhbC9mZWF0dXJlLXRhcmdldGluZy9mdW5jdGlvbnNcXFwiIGFzIGZlYXR1cmUtdGFyZ2V0aW5nLWZ1bmN0aW9ucztcXG5AdXNlIFxcXCJAbWF0ZXJpYWwvZmVhdHVyZS10YXJnZXRpbmcvbWl4aW5zXFxcIiBhcyBmZWF0dXJlLXRhcmdldGluZy1taXhpbnM7XFxuQHVzZSBcXFwiQG1hdGVyaWFsL3RhYi1zY3JvbGxlci9taXhpbnNcXFwiIGFzIHRhYi1zY3JvbGxlci1taXhpbnM7XFxuQHVzZSBcXFwiQG1hdGVyaWFsL3RhYi9taXhpbnNcXFwiIGFzIHRhYi1taXhpbnM7XFxuQHVzZSBcXFwiLi92YXJpYWJsZXNcXFwiO1xcblxcbkBtaXhpbiBjb3JlLXN0eWxlcygkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLWZ1bmN0aW9ucy5hbGwoKSkge1xcbiAgLy8gcG9zdGNzcy1iZW0tbGludGVyOiBkZWZpbmUgdGFiLWJhclxcbiAgLm1kYy10YWItYmFyIHtcXG4gICAgQGluY2x1ZGUgd2lkdGgoMTAwJSwgJHF1ZXJ5KTtcXG4gIH1cXG5cXG4gIEBpbmNsdWRlIGRlbnNpdHkodmFyaWFibGVzLiRkZW5zaXR5LXNjYWxlLCAkcXVlcnk6ICRxdWVyeSk7XFxuICBAaW5jbHVkZSBzdGFja2VkLWRlbnNpdHkodmFyaWFibGVzLiRzdGFja2VkLWRlbnNpdHktc2NhbGUsICRxdWVyeTogJHF1ZXJ5KTtcXG4gIC8vIHBvc3Rjc3MtYmVtLWxpbnRlcjogZW5kXFxufVxcblxcbkBtaXhpbiB3aWR0aCgkd2lkdGgsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmctZnVuY3Rpb25zLmFsbCgpKSB7XFxuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLWZ1bmN0aW9ucy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcXG5cXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xcbiAgICB3aWR0aDogJHdpZHRoO1xcbiAgfVxcbn1cXG5cXG4vLy9cXG4vLy8gU2V0cyBkZW5zaXR5IHNjYWxlIHRvIGRlZmF1bHQgdGFiIGJhciB2YXJpYW50LiBVc2UgYG1kYy10YWItYmFyLXN0YWNrZWQtZGVuc2l0eSgpYCBtaXhpbiBmb3Igc3RhY2tlZCB0YWIgYmFyXFxuLy8vIHZhcmlhbnQuXFxuLy8vXFxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkZGVuc2l0eS1zY2FsZSBEZW5zaXR5IHNjYWxlIHZhbHVlLiBTdXBwb3J0ZWQgZGVuc2l0eSBzY2FsZXMgYC00YCwgYC0zYCwgYC0yYCwgYC0xYCBhbmQgYDBgLlxcbi8vL1xcbkBtaXhpbiBkZW5zaXR5KCRkZW5zaXR5LXNjYWxlLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLWZ1bmN0aW9ucy5hbGwoKSkge1xcbiAgJGhlaWdodDogZGVuc2l0eS1mdW5jdGlvbnMucHJvcC12YWx1ZShcXG4gICAgJGRlbnNpdHktY29uZmlnOiB2YXJpYWJsZXMuJGRlbnNpdHktY29uZmlnLFxcbiAgICAkZGVuc2l0eS1zY2FsZTogJGRlbnNpdHktc2NhbGUsXFxuICAgICRwcm9wZXJ0eS1uYW1lOiBoZWlnaHQsXFxuICApO1xcblxcbiAgLm1kYy10YWIge1xcbiAgICBAaW5jbHVkZSB0YWItbWl4aW5zLmhlaWdodCgkaGVpZ2h0LCAkcXVlcnk6ICRxdWVyeSk7XFxuICB9XFxufVxcblxcbi8vL1xcbi8vLyBTZXRzIGRlbnNpdHkgc2NhbGUgdG8gc3RhY2tlZCB0YWIgYmFyIHZhcmlhbnQuXFxuLy8vXFxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkZGVuc2l0eS1zY2FsZSBEZW5zaXR5IHNjYWxlIHZhbHVlLiBTdXBwb3J0ZWQgZGVuc2l0eSBzY2FsZXMgYC00YCwgYC0zYCwgYC0yYCwgYC0xYCBhbmQgYDBgLlxcbi8vL1xcbkBtaXhpbiBzdGFja2VkLWRlbnNpdHkoXFxuICAkZGVuc2l0eS1zY2FsZSxcXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmctZnVuY3Rpb25zLmFsbCgpXFxuKSB7XFxuICAkaGVpZ2h0OiBkZW5zaXR5LWZ1bmN0aW9ucy5wcm9wLXZhbHVlKFxcbiAgICAkZGVuc2l0eS1jb25maWc6IHZhcmlhYmxlcy4kc3RhY2tlZC1kZW5zaXR5LWNvbmZpZyxcXG4gICAgJGRlbnNpdHktc2NhbGU6ICRkZW5zaXR5LXNjYWxlLFxcbiAgICAkcHJvcGVydHktbmFtZTogaGVpZ2h0LFxcbiAgKTtcXG5cXG4gIC5tZGMtdGFiLS1zdGFja2VkIHtcXG4gICAgQGluY2x1ZGUgdGFiLW1peGlucy5oZWlnaHQoJGhlaWdodCwgJHF1ZXJ5OiAkcXVlcnkpO1xcbiAgfVxcbn1cXG5cXG4vLy9cXG4vLy8gU2V0cyB0aGUgQ1NTIHRyYW5zaXRpb24gZm9yIHRoZSB0YWIgc2Nyb2xsaW5nIGFuaW1hdGlvbi4gVGhpcyBtaXhpbiBpcyBhIHByb3h5IHRvIGBtZGMtdGFiLXNjcm9sbGVyLXRyYW5zaXRpb25gXFxuLy8vIG1peGluLlxcbi8vL1xcbi8vLyBAcGFyYW0ge051bWJlciB8IFN0cmluZ30gJGR1cmF0aW9uLW1zIC0gRHVyYXRpb24gKGluIG1zKSBvZiB0aGUgYW5pbWF0aW9uLlxcbi8vLyBAcGFyYW0ge1N0cmluZ30gJHRpbWluZy1mdW5jdGlvbiAtIE9wdGlvbmFsbHkgb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IGFuaW1hdGlvbiB0aW1pbmcgZnVuY3Rpb24uXFxuLy8vXFxuQG1peGluIHRhYi1zY3JvbGxlci10cmFuc2l0aW9uKFxcbiAgJGR1cmF0aW9uLW1zLFxcbiAgJHRpbWluZy1mdW5jdGlvbjogYW5pbWF0aW9uLXZhcmlhYmxlcy4kc3RhbmRhcmQtY3VydmUtdGltaW5nLWZ1bmN0aW9uLFxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy1mdW5jdGlvbnMuYWxsKClcXG4pIHtcXG4gIC5tZGMtdGFiLXNjcm9sbGVyIHtcXG4gICAgQGluY2x1ZGUgdGFiLXNjcm9sbGVyLW1peGlucy50cmFuc2l0aW9uKFxcbiAgICAgICRkdXJhdGlvbi1tcyxcXG4gICAgICAkdGltaW5nLWZ1bmN0aW9uOiAkdGltaW5nLWZ1bmN0aW9uLFxcbiAgICAgICRxdWVyeTogJHF1ZXJ5XFxuICAgICk7XFxuICB9XFxufVxcblwiLFwiLy9cXG4vLyBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxcbi8vXFxuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFxcXCJTb2Z0d2FyZVxcXCIpLCB0byBkZWFsXFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxcbi8vXFxuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cXG4vL1xcbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcXFwiQVMgSVNcXFwiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXFxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXFxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxcbi8vIFRIRSBTT0ZUV0FSRS5cXG4vL1xcblxcbkB1c2UgXFxcIkBtYXRlcmlhbC9hbmltYXRpb24vdmFyaWFibGVzXFxcIiBhcyBhbmltYXRpb24tdmFyaWFibGVzO1xcbkB1c2UgXFxcIkBtYXRlcmlhbC90YWIvbWl4aW5zXFxcIiBhcyB0YWItbWl4aW5zO1xcbkB1c2UgXFxcIkBtYXRlcmlhbC9mZWF0dXJlLXRhcmdldGluZy9mdW5jdGlvbnNcXFwiO1xcbkB1c2UgXFxcIkBtYXRlcmlhbC9mZWF0dXJlLXRhcmdldGluZy9taXhpbnNcXFwiIGFzIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucztcXG5AdXNlIFxcXCIuL3ZhcmlhYmxlc1xcXCI7XFxuXFxuLy8vXFxuLy8vIFNldHMgdGhlIENTUyB0cmFuc2l0aW9uIGZvciB0aGUgdGFiIHNjcm9sbGluZyBhbmltYXRpb24uXFxuLy8vXFxuLy8vIEBwYXJhbSB7TnVtYmVyIHwgU3RyaW5nfSAkZHVyYXRpb24tbXMgLSBEdXJhdGlvbiAoaW4gbXMpIG9mIHRoZSBhbmltYXRpb24uXFxuLy8vIEBwYXJhbSB7U3RyaW5nfSAkdGltaW5nLWZ1bmN0aW9uIC0gT3B0aW9uYWxseSBvdmVycmlkZXMgdGhlIGRlZmF1bHQgYW5pbWF0aW9uIHRpbWluZyBmdW5jdGlvbi5cXG4vLy9cXG5AbWl4aW4gdHJhbnNpdGlvbihcXG4gICRkdXJhdGlvbi1tcyxcXG4gICR0aW1pbmctZnVuY3Rpb246IGFuaW1hdGlvbi12YXJpYWJsZXMuJHN0YW5kYXJkLWN1cnZlLXRpbWluZy1mdW5jdGlvbixcXG4gICRxdWVyeTogZnVuY3Rpb25zLmFsbCgpXFxuKSB7XFxuICAkZmVhdC1hbmltYXRpb246IGZ1bmN0aW9ucy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgYW5pbWF0aW9uKTtcXG5cXG4gICYubWRjLXRhYi1zY3JvbGxlci0tYW5pbWF0aW5nIC5tZGMtdGFiLXNjcm9sbGVyX19zY3JvbGwtY29udGVudCB7XFxuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LWFuaW1hdGlvbikge1xcbiAgICAgIHRyYW5zaXRpb246ICRkdXJhdGlvbi1tcyB0cmFuc2Zvcm0gJHRpbWluZy1mdW5jdGlvbjtcXG4gICAgfVxcbiAgfVxcbn1cXG5cXG5AbWl4aW4gY29yZS1zdHlsZXMoJHF1ZXJ5OiBmdW5jdGlvbnMuYWxsKCkpIHtcXG4gICRmZWF0LXN0cnVjdHVyZTogZnVuY3Rpb25zLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xcbiAgJGZlYXQtYW5pbWF0aW9uOiBmdW5jdGlvbnMuY3JlYXRlLXRhcmdldCgkcXVlcnksIGFuaW1hdGlvbik7XFxuXFxuICAvLyBwb3N0Y3NzLWJlbS1saW50ZXI6IGRlZmluZSB0YWItc2Nyb2xsZXJcXG4gIC5tZGMtdGFiLXNjcm9sbGVyIHtcXG4gICAgQGluY2x1ZGUgdHJhbnNpdGlvbihcXG4gICAgICAkZHVyYXRpb24tbXM6IHZhcmlhYmxlcy4kdHJhbnNpdGlvbi1kdXJhdGlvbixcXG4gICAgICAkcXVlcnk6ICRxdWVyeVxcbiAgICApO1xcblxcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy1taXhpbnMudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcXG4gICAgICBvdmVyZmxvdy15OiBoaWRkZW47XFxuICAgIH1cXG4gIH1cXG5cXG4gIC8vIFNlbGVjdG9yIGZvciB0ZXN0IGVsZW1lbnQgdXNlZCB0byBmZWF0dXJlLWRldGVjdCBob3Jpem9udGFsIHNjcm9sbGJhciBoZWlnaHRcXG4gIC5tZGMtdGFiLXNjcm9sbGVyX190ZXN0IHtcXG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmctbWl4aW5zLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XFxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgIHRvcDogLTk5OTlweDtcXG4gICAgICB3aWR0aDogMTAwcHg7XFxuICAgICAgaGVpZ2h0OiAxMDBweDtcXG4gICAgICBvdmVyZmxvdy14OiBzY3JvbGw7XFxuICAgIH1cXG4gIH1cXG5cXG4gIC5tZGMtdGFiLXNjcm9sbGVyX19zY3JvbGwtYXJlYSB7XFxuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xcbiAgICAgIC13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiB0b3VjaDtcXG4gICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcXG4gICAgfVxcbiAgfVxcblxcbiAgLm1kYy10YWItc2Nyb2xsZXJfX3Njcm9sbC1hcmVhLFxcbiAgLm1kYy10YWItc2Nyb2xsZXJfX3Rlc3Qge1xcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy1taXhpbnMudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcXG4gICAgICAmOjotd2Via2l0LXNjcm9sbGJhciB7XFxuICAgICAgICBkaXNwbGF5OiBub25lO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfVxcblxcbiAgLy8gVGhpcyBtb2RpZmllciBjbGFzcyB3aWxsIGJlIGFkZGVkIGluIEpTIGFmdGVyIGNvbXB1dGluZyB0aGUgT1Mgc2Nyb2xsYmFyIHNpemUgaW4gb3JkZXIgdG8gaGlkZSB0aGUgc2Nyb2xsYmFyLlxcbiAgLm1kYy10YWItc2Nyb2xsZXJfX3Njcm9sbC1hcmVhLS1zY3JvbGwge1xcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy1taXhpbnMudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcXG4gICAgICBvdmVyZmxvdy14OiBzY3JvbGw7XFxuICAgIH1cXG4gIH1cXG5cXG4gIC5tZGMtdGFiLXNjcm9sbGVyX19zY3JvbGwtY29udGVudCB7XFxuICAgIEBpbmNsdWRlIHNjcm9sbC1jb250ZW50XygkcXVlcnkpO1xcbiAgfVxcblxcbiAgLm1kYy10YWItc2Nyb2xsZXItLWFsaWduLXN0YXJ0IC5tZGMtdGFiLXNjcm9sbGVyX19zY3JvbGwtY29udGVudCB7XFxuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xcbiAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXG4gICAgfVxcbiAgfVxcblxcbiAgLm1kYy10YWItc2Nyb2xsZXItLWFsaWduLWVuZCAubWRjLXRhYi1zY3JvbGxlcl9fc2Nyb2xsLWNvbnRlbnQge1xcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy1taXhpbnMudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xcbiAgICB9XFxuICB9XFxuXFxuICAubWRjLXRhYi1zY3JvbGxlci0tYWxpZ24tY2VudGVyIC5tZGMtdGFiLXNjcm9sbGVyX19zY3JvbGwtY29udGVudCB7XFxuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICB9XFxuICB9XFxuXFxuICAubWRjLXRhYi1zY3JvbGxlci0tYW5pbWF0aW5nIHtcXG4gICAgLm1kYy10YWItc2Nyb2xsZXJfX3Njcm9sbC1hcmVhIHtcXG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy1taXhpbnMudGFyZ2V0cygkZmVhdC1hbmltYXRpb24pIHtcXG4gICAgICAgIC13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiBhdXRvO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfVxcblxcbiAgLy8gcG9zdGNzcy1iZW0tbGludGVyOiBlbmRcXG59XFxuXFxuLy9cXG4vLyBQcml2YXRlXFxuLy9cXG5cXG5AbWl4aW4gc2Nyb2xsLWNvbnRlbnRfKCRxdWVyeTogZnVuY3Rpb25zLmFsbCgpKSB7XFxuICAkZmVhdC1zdHJ1Y3R1cmU6IGZ1bmN0aW9ucy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcXG4gICRmZWF0LWFuaW1hdGlvbjogZnVuY3Rpb25zLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBhbmltYXRpb24pO1xcblxcbiAgQGluY2x1ZGUgdGFiLW1peGlucy5wYXJlbnQtcG9zaXRpb25pbmcoJHF1ZXJ5KTtcXG5cXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4OiAxIDAgYXV0bztcXG4gICAgdHJhbnNmb3JtOiBub25lO1xcbiAgfVxcblxcbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmctbWl4aW5zLnRhcmdldHMoJGZlYXQtYW5pbWF0aW9uKSB7XFxuICAgIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm07XFxuICB9XFxufVxcblwiLFwiLy9cXG4vLyBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxcbi8vXFxuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFxcXCJTb2Z0d2FyZVxcXCIpLCB0byBkZWFsXFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxcbi8vXFxuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cXG4vL1xcbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcXFwiQVMgSVNcXFwiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXFxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXFxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxcbi8vIFRIRSBTT0ZUV0FSRS5cXG4vL1xcblxcbkB1c2UgXFxcIkBtYXRlcmlhbC9mZWF0dXJlLXRhcmdldGluZy9mdW5jdGlvbnNcXFwiO1xcbkB1c2UgXFxcIkBtYXRlcmlhbC9mZWF0dXJlLXRhcmdldGluZy9taXhpbnNcXFwiIGFzIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucztcXG5AdXNlIFxcXCJAbWF0ZXJpYWwvcmlwcGxlL21peGluc1xcXCIgYXMgcmlwcGxlLW1peGlucztcXG5AdXNlIFxcXCJAbWF0ZXJpYWwvdGhlbWUvbWl4aW5zXFxcIiBhcyB0aGVtZS1taXhpbnM7XFxuQHVzZSBcXFwiQG1hdGVyaWFsL3R5cG9ncmFwaHkvbWl4aW5zXFxcIiBhcyB0eXBvZ3JhcGh5LW1peGlucztcXG5AdXNlIFxcXCJAbWF0ZXJpYWwvcnRsL21peGluc1xcXCIgYXMgcnRsLW1peGlucztcXG5AdXNlIFxcXCJAbWF0ZXJpYWwvdGFiLWluZGljYXRvci9taXhpbnNcXFwiIGFzIHRhYi1pbmRpY2F0b3ItbWl4aW5zO1xcbkB1c2UgXFxcIi4vdmFyaWFibGVzXFxcIjtcXG5cXG4vLyBQdWJsaWMgbWl4aW5zXFxuXFxuQG1peGluIGNvcmUtc3R5bGVzKCRxdWVyeTogZnVuY3Rpb25zLmFsbCgpKSB7XFxuICBAaW5jbHVkZSB3aXRob3V0LXJpcHBsZSgkcXVlcnkpO1xcbiAgQGluY2x1ZGUgcmlwcGxlKCRxdWVyeSk7XFxufVxcblxcbi8vIFRoaXMgQVBJIGlzIGludGVuZGVkIGZvciB1c2UgYnkgZnJhbWV3b3JrcyB0aGF0IG1heSB3YW50IHRvIHNlcGFyYXRlIHRoZSByaXBwbGUtcmVsYXRlZCBzdHlsZXNcXG4vLyBmcm9tIHRoZSBvdGhlciB0YWggc3R5bGVzLiBJdCBpcyByZWNvbW1lbmRlZCB0aGF0IG1vc3QgdXNlcnMgdXNlIGBtZGMtdGFiLWNvcmUtc3R5bGVzYCBpbnN0ZWFkLlxcbkBtaXhpbiB3aXRob3V0LXJpcHBsZSgkcXVlcnk6IGZ1bmN0aW9ucy5hbGwoKSkge1xcbiAgJGZlYXQtc3RydWN0dXJlOiBmdW5jdGlvbnMuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XFxuICAkZmVhdC1hbmltYXRpb246IGZ1bmN0aW9ucy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgYW5pbWF0aW9uKTtcXG5cXG4gIC8vIHBvc3Rjc3MtYmVtLWxpbnRlcjogZGVmaW5lIHRhYlxcblxcbiAgLm1kYy10YWIge1xcbiAgICBAaW5jbHVkZSBiYXNlXygkcXVlcnkpO1xcbiAgfVxcblxcbiAgLm1kYy10YWItLW1pbi13aWR0aCB7XFxuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xcbiAgICAgIGZsZXg6IDAgMSBhdXRvO1xcbiAgICB9XFxuICB9XFxuXFxuICAubWRjLXRhYl9fY29udGVudCB7XFxuICAgIEBpbmNsdWRlIGNvbnRlbnRfKCRxdWVyeSk7XFxuICB9XFxuXFxuICAubWRjLXRhYl9fdGV4dC1sYWJlbCB7XFxuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LWFuaW1hdGlvbikge1xcbiAgICAgIHRyYW5zaXRpb246IDE1MG1zIGNvbG9yIGxpbmVhcjtcXG4gICAgfVxcblxcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy1taXhpbnMudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgICAgLy8gU2V0dGluZyBsaW5lLWhlaWdodCBoZXJlIG92ZXJyaWRlcyB0aGUgbGluZS1oZWlnaHQgZnJvbSB0aGUgdHlwb2dyYXBoeVxcbiAgICAgIC8vIG1peGluIGFib3ZlLiBUaGUgbGluZS1oZWlnaHQgbmVlZHMgdG8gYmUgb3ZlcnJpZGRlbiBzbyB0aGF0IHRoZSBzcGFjaW5nXFxuICAgICAgLy8gYmV0d2VlbiB0aGUgdGV4dCBsYWJlbCBhbmQgdGhlIGljb24gYXMgd2VsbCBhcyB0aGUgdGV4dCBsYWJlbCBhbmQgdGhlXFxuICAgICAgLy8gYm90dG9tIG9mIHRoZSB0YWIgcmVtYWluIHRoZSBzYW1lLlxcbiAgICAgIGxpbmUtaGVpZ2h0OiAxO1xcbiAgICAgIHotaW5kZXg6IDI7XFxuICAgIH1cXG4gIH1cXG5cXG4gIC5tZGMtdGFiX19pY29uIHtcXG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmctbWl4aW5zLnRhcmdldHMoJGZlYXQtYW5pbWF0aW9uKSB7XFxuICAgICAgdHJhbnNpdGlvbjogMTUwbXMgY29sb3IgbGluZWFyO1xcbiAgICB9XFxuXFxuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xcbiAgICAgIHdpZHRoOiB2YXJpYWJsZXMuJGljb24tc2l6ZTtcXG4gICAgICBoZWlnaHQ6IHZhcmlhYmxlcy4kaWNvbi1zaXplO1xcbiAgICAgIGZvbnQtc2l6ZTogdmFyaWFibGVzLiRpY29uLXNpemU7XFxuICAgICAgei1pbmRleDogMjtcXG4gICAgfVxcbiAgfVxcblxcbiAgLm1kYy10YWItLXN0YWNrZWQge1xcbiAgICBAaW5jbHVkZSBzdGFja2VkXygkcXVlcnkpO1xcbiAgfVxcblxcbiAgLm1kYy10YWItLWFjdGl2ZSB7XFxuICAgIEBpbmNsdWRlIGFjdGl2ZV8oJHF1ZXJ5KTtcXG4gIH1cXG5cXG4gIC5tZGMtdGFiOm5vdCgubWRjLXRhYi0tc3RhY2tlZCkgLm1kYy10YWJfX2ljb24gKyAubWRjLXRhYl9fdGV4dC1sYWJlbCB7XFxuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xcbiAgICAgIEBpbmNsdWRlIHJ0bC1taXhpbnMucmVmbGV4aXZlLWJveChwYWRkaW5nLCBsZWZ0LCA4cHgpO1xcbiAgICB9XFxuICB9XFxuXFxuICAvLyBwb3N0Y3NzLWJlbS1saW50ZXI6IGVuZFxcbn1cXG5cXG4vLyBUaGlzIEFQSSBpcyBpbnRlbmRlZCBmb3IgdXNlIGJ5IGZyYW1ld29ya3MgdGhhdCBtYXkgd2FudCB0byBzZXBhcmF0ZSB0aGUgcmlwcGxlLXJlbGF0ZWQgc3R5bGVzXFxuLy8gZnJvbSB0aGUgb3RoZXIgdGFoIHN0eWxlcy4gSXQgaXMgcmVjb21tZW5kZWQgdGhhdCBtb3N0IHVzZXJzIHVzZSBgbWRjLXRhYi1jb3JlLXN0eWxlc2AgaW5zdGVhZC5cXG5AbWl4aW4gcmlwcGxlKCRxdWVyeTogZnVuY3Rpb25zLmFsbCgpKSB7XFxuICBAaW5jbHVkZSByaXBwbGUtbWl4aW5zLmNvbW1vbigkcXVlcnkpOyAvLyBDT1BZQkFSQV9DT01NRU5UX1RISVNfTElORVxcblxcbiAgLm1kYy10YWJfX3JpcHBsZSB7XFxuICAgIEBpbmNsdWRlIHJpcHBsZV8oJHF1ZXJ5KTtcXG4gIH1cXG59XFxuXFxuQG1peGluIGhvcml6b250YWwtcGFkZGluZygkcGFkZGluZywgJHF1ZXJ5OiBmdW5jdGlvbnMuYWxsKCkpIHtcXG4gICRmZWF0LXN0cnVjdHVyZTogZnVuY3Rpb25zLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xcblxcbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmctbWl4aW5zLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XFxuICAgIHBhZGRpbmctcmlnaHQ6ICRwYWRkaW5nO1xcbiAgICBwYWRkaW5nLWxlZnQ6ICRwYWRkaW5nO1xcbiAgfVxcbn1cXG5cXG5AbWl4aW4gdGV4dC1sYWJlbC1jb2xvcigkY29sb3IsICRxdWVyeTogZnVuY3Rpb25zLmFsbCgpKSB7XFxuICAkZmVhdC1jb2xvcjogZnVuY3Rpb25zLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBjb2xvcik7XFxuXFxuICAubWRjLXRhYl9fdGV4dC1sYWJlbCB7XFxuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LWNvbG9yKSB7XFxuICAgICAgQGluY2x1ZGUgdGhlbWUtbWl4aW5zLnByb3AoY29sb3IsICRjb2xvcik7XFxuICAgIH1cXG4gIH1cXG59XFxuXFxuQG1peGluIGljb24tY29sb3IoJGNvbG9yLCAkcXVlcnk6IGZ1bmN0aW9ucy5hbGwoKSkge1xcbiAgJGZlYXQtY29sb3I6IGZ1bmN0aW9ucy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgY29sb3IpO1xcblxcbiAgLm1kYy10YWJfX2ljb24ge1xcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy1taXhpbnMudGFyZ2V0cygkZmVhdC1jb2xvcikge1xcbiAgICAgIEBpbmNsdWRlIHRoZW1lLW1peGlucy5wcm9wKGNvbG9yLCAkY29sb3IpO1xcblxcbiAgICAgIGZpbGw6IGN1cnJlbnRDb2xvcjtcXG4gICAgfVxcbiAgfVxcbn1cXG5cXG5AbWl4aW4gc3RhdGVzLWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiBmdW5jdGlvbnMuYWxsKCkpIHtcXG4gIC5tZGMtdGFiX19yaXBwbGUge1xcbiAgICBAaW5jbHVkZSByaXBwbGUtbWl4aW5zLnN0YXRlcygkY29sb3IsICRxdWVyeTogJHF1ZXJ5KTtcXG4gIH1cXG59XFxuXFxuQG1peGluIGluay1jb2xvcigkY29sb3IsICRxdWVyeTogZnVuY3Rpb25zLmFsbCgpKSB7XFxuICBAaW5jbHVkZSBpY29uLWNvbG9yKCRjb2xvciwgJHF1ZXJ5KTtcXG4gIEBpbmNsdWRlIHN0YXRlcy1jb2xvcigkY29sb3IsICRxdWVyeSk7XFxuICBAaW5jbHVkZSB0ZXh0LWxhYmVsLWNvbG9yKCRjb2xvciwgJHF1ZXJ5KTtcXG59XFxuXFxuQG1peGluIGFjdGl2ZS10ZXh0LWxhYmVsLWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiBmdW5jdGlvbnMuYWxsKCkpIHtcXG4gICYubWRjLXRhYi0tYWN0aXZlIHtcXG4gICAgQGluY2x1ZGUgdGV4dC1sYWJlbC1jb2xvcigkY29sb3IsICRxdWVyeSk7XFxuICB9XFxufVxcblxcbkBtaXhpbiBhY3RpdmUtaWNvbi1jb2xvcigkY29sb3IsICRxdWVyeTogZnVuY3Rpb25zLmFsbCgpKSB7XFxuICAmLm1kYy10YWItLWFjdGl2ZSB7XFxuICAgIEBpbmNsdWRlIGljb24tY29sb3IoJGNvbG9yLCAkcXVlcnkpO1xcbiAgfVxcbn1cXG5cXG5AbWl4aW4gYWN0aXZlLXN0YXRlcy1jb2xvcigkY29sb3IsICRxdWVyeTogZnVuY3Rpb25zLmFsbCgpKSB7XFxuICAmLm1kYy10YWItLWFjdGl2ZSB7XFxuICAgIEBpbmNsdWRlIHN0YXRlcy1jb2xvcigkY29sb3IsICRxdWVyeSk7XFxuICB9XFxufVxcblxcbkBtaXhpbiBwYXJlbnQtcG9zaXRpb25pbmcoJHF1ZXJ5OiBmdW5jdGlvbnMuYWxsKCkpIHtcXG4gICRmZWF0LXN0cnVjdHVyZTogZnVuY3Rpb25zLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xcblxcbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmctbWl4aW5zLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIH1cXG59XFxuXFxuQG1peGluIGZpeGVkLXdpZHRoKCR3aWR0aCwgJHF1ZXJ5OiBmdW5jdGlvbnMuYWxsKCkpIHtcXG4gICRmZWF0LXN0cnVjdHVyZTogZnVuY3Rpb25zLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xcblxcbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmctbWl4aW5zLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XFxuICAgIGZsZXg6IDAgMSAkd2lkdGg7XFxuICB9XFxufVxcblxcbi8vL1xcbi8vLyBTZXRzIHRhYiBoZWlnaHRcXG4vLy9cXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRoZWlnaHQgSGVpZ2h0IHZhbHVlIGluIGBweGAuXFxuLy8vXFxuQG1peGluIGhlaWdodCgkaGVpZ2h0LCAkcXVlcnk6IGZ1bmN0aW9ucy5hbGwoKSkge1xcbiAgJGZlYXQtc3RydWN0dXJlOiBmdW5jdGlvbnMuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XFxuXFxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy1taXhpbnMudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcXG4gICAgaGVpZ2h0OiAkaGVpZ2h0O1xcbiAgfVxcbn1cXG5cXG4vLy9cXG4vLy8gU2V0cyB0YWIgdGV4dCB0cmFuc2Zvcm1cXG4vLy9cXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICR0cmFuc2Zvcm0gVGhlIHRleHQtdHJhbnNmb3JtIHByb3BlcnR5IHRvIGFwcGx5Llxcbi8vL1xcbkBtaXhpbiB0ZXh0LXRyYW5zZm9ybSgkdHJhbnNmb3JtLCAkcXVlcnk6IGZ1bmN0aW9ucy5hbGwoKSkge1xcbiAgJGZlYXQtc3RydWN0dXJlOiBmdW5jdGlvbnMuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XFxuXFxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy1taXhpbnMudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcXG4gICAgdGV4dC10cmFuc2Zvcm06ICR0cmFuc2Zvcm07XFxuICB9XFxufVxcblxcbi8vXFxuLy8gUHJpdmF0ZVxcbi8vXFxuXFxuQG1peGluIGJhc2VfKCRxdWVyeTogZnVuY3Rpb25zLmFsbCgpKSB7XFxuICAkZmVhdC1zdHJ1Y3R1cmU6IGZ1bmN0aW9ucy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcXG5cXG4gIEBpbmNsdWRlIHR5cG9ncmFwaHktbWl4aW5zLnR5cG9ncmFwaHkoYnV0dG9uLCAkcXVlcnkpO1xcbiAgQGluY2x1ZGUgdGV4dC1sYWJlbC1jb2xvcih2YXJpYWJsZXMuJHRleHQtbGFiZWwtY29sb3ItZGVmYXVsdCwgJHF1ZXJ5KTtcXG4gIEBpbmNsdWRlIGljb24tY29sb3IodmFyaWFibGVzLiRpY29uLWNvbG9yLWRlZmF1bHQsICRxdWVyeSk7XFxuICBAaW5jbHVkZSBob3Jpem9udGFsLXBhZGRpbmcodmFyaWFibGVzLiRob3Jpem9udGFsLXBhZGRpbmcsICRxdWVyeSk7XFxuICBAaW5jbHVkZSB0YWItaW5kaWNhdG9yLW1peGlucy5zdXJmYWNlKCRxdWVyeSk7XFxuXFxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy1taXhpbnMudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleDogMSAwIGF1dG87XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICAvLyBFeHBsaWNpdGx5IHNldHRpbmcgbWFyZ2luIHRvIDAgaXMgdG8gb3ZlcnJpZGUgc2FmYXJpIGRlZmF1bHQgbWFyZ2luIGZvciBidXR0b24gZWxlbWVudHMuXFxuICAgIG1hcmdpbjogMDtcXG4gICAgcGFkZGluZy10b3A6IDA7XFxuICAgIHBhZGRpbmctYm90dG9tOiAwO1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIG91dGxpbmU6IG5vbmU7XFxuICAgIGJhY2tncm91bmQ6IG5vbmU7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XFxuICAgIHotaW5kZXg6IDE7XFxuXFxuICAgIC8vIEZpcmVmb3ggc3RpbGwgZHJhd3MgYSBkb3R0ZWQgYm9yZGVyIGFyb3VuZCBmb2N1c2VkIGJ1dHRvbnMgdW5sZXNzIHNwZWNpZmljYWxseSBvdmVycmlkZGVuLlxcbiAgICAmOjotbW96LWZvY3VzLWlubmVyIHtcXG4gICAgICBwYWRkaW5nOiAwO1xcbiAgICAgIGJvcmRlcjogMDtcXG4gICAgfVxcbiAgfVxcbn1cXG5cXG5AbWl4aW4gcmlwcGxlXygkcXVlcnk6IGZ1bmN0aW9ucy5hbGwoKSkge1xcbiAgJGZlYXQtc3RydWN0dXJlOiBmdW5jdGlvbnMuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XFxuXFxuICBAaW5jbHVkZSByaXBwbGUtbWl4aW5zLnN1cmZhY2UoJHF1ZXJ5KTtcXG4gIEBpbmNsdWRlIHJpcHBsZS1taXhpbnMucmFkaXVzLWJvdW5kZWQoJHF1ZXJ5OiAkcXVlcnkpO1xcbiAgQGluY2x1ZGUgcmlwcGxlLW1peGlucy5zdGF0ZXMoJGNvbG9yOiBwcmltYXJ5LCAkcXVlcnk6ICRxdWVyeSk7XFxuXFxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy1taXhpbnMudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB0b3A6IDA7XFxuICAgIGxlZnQ6IDA7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICB9XFxufVxcblxcbkBtaXhpbiBjb250ZW50XygkcXVlcnk6IGZ1bmN0aW9ucy5hbGwoKSkge1xcbiAgJGZlYXQtc3RydWN0dXJlOiBmdW5jdGlvbnMuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XFxuXFxuICBAaW5jbHVkZSB0YWItaW5kaWNhdG9yLW1peGlucy5zdXJmYWNlKCRxdWVyeSk7XFxuXFxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy1taXhpbnMudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGhlaWdodDogaW5oZXJpdDtcXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICB9XFxufVxcblxcbkBtaXhpbiBzdGFja2VkXygkcXVlcnk6IGZ1bmN0aW9ucy5hbGwoKSkge1xcbiAgJGZlYXQtc3RydWN0dXJlOiBmdW5jdGlvbnMuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XFxuXFxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy1taXhpbnMudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcXG4gICAgLm1kYy10YWJfX2NvbnRlbnQge1xcbiAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgfVxcblxcbiAgICAubWRjLXRhYl9fdGV4dC1sYWJlbCB7XFxuICAgICAgcGFkZGluZy10b3A6IDZweDtcXG4gICAgICBwYWRkaW5nLWJvdHRvbTogNHB4O1xcbiAgICB9XFxuICB9XFxufVxcblxcbkBtaXhpbiBhY3RpdmVfKCRxdWVyeTogZnVuY3Rpb25zLmFsbCgpKSB7XFxuICAkZmVhdC1hbmltYXRpb246IGZ1bmN0aW9ucy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgYW5pbWF0aW9uKTtcXG5cXG4gIEBpbmNsdWRlIHRleHQtbGFiZWwtY29sb3IodmFyaWFibGVzLiR0ZXh0LWxhYmVsLWNvbG9yLWFjdGl2ZSwgJHF1ZXJ5KTtcXG4gIEBpbmNsdWRlIGljb24tY29sb3IodmFyaWFibGVzLiRpY29uLWNvbG9yLWFjdGl2ZSwgJHF1ZXJ5KTtcXG5cXG4gIC5tZGMtdGFiX190ZXh0LWxhYmVsLFxcbiAgLm1kYy10YWJfX2ljb24ge1xcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy1taXhpbnMudGFyZ2V0cygkZmVhdC1hbmltYXRpb24pIHtcXG4gICAgICB0cmFuc2l0aW9uLWRlbGF5OiAxMDBtcztcXG4gICAgfVxcbiAgfVxcbn1cXG5cIixcIi8vXFxuLy8gQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cXG4vL1xcbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcXG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcXFwiU29mdHdhcmVcXFwiKSwgdG8gZGVhbFxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXFxuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcXG4vL1xcbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXFxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXFxuLy9cXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXFxcIkFTIElTXFxcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cXG4vLyBUSEUgU09GVFdBUkUuXFxuLy9cXG5cXG5AdXNlIFxcXCJAbWF0ZXJpYWwvYW5pbWF0aW9uL3ZhcmlhYmxlc1xcXCI7XFxuQHVzZSBcXFwiQG1hdGVyaWFsL3RoZW1lL21peGluc1xcXCIgYXMgdGhlbWUtbWl4aW5zO1xcbkB1c2UgXFxcIkBtYXRlcmlhbC9mZWF0dXJlLXRhcmdldGluZy9mdW5jdGlvbnNcXFwiO1xcbkB1c2UgXFxcIkBtYXRlcmlhbC9mZWF0dXJlLXRhcmdldGluZy9taXhpbnNcXFwiIGFzIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucztcXG5cXG5AbWl4aW4gY29yZS1zdHlsZXMoJHF1ZXJ5OiBmdW5jdGlvbnMuYWxsKCkpIHtcXG4gICRmZWF0LXN0cnVjdHVyZTogZnVuY3Rpb25zLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xcbiAgJGZlYXQtYW5pbWF0aW9uOiBmdW5jdGlvbnMuY3JlYXRlLXRhcmdldCgkcXVlcnksIGFuaW1hdGlvbik7XFxuXFxuICAvLyBwb3N0Y3NzLWJlbS1saW50ZXI6IGRlZmluZSB0YWItaW5kaWNhdG9yXFxuXFxuICAubWRjLXRhYi1pbmRpY2F0b3Ige1xcbiAgICBAaW5jbHVkZSBiYXNlXygkcXVlcnkpO1xcbiAgfVxcblxcbiAgLm1kYy10YWItaW5kaWNhdG9yX19jb250ZW50IHtcXG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmctbWl4aW5zLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XFxuICAgICAgdHJhbnNmb3JtLW9yaWdpbjogbGVmdDtcXG4gICAgICBvcGFjaXR5OiAwO1xcbiAgICB9XFxuICB9XFxuXFxuICAubWRjLXRhYi1pbmRpY2F0b3JfX2NvbnRlbnQtLXVuZGVybGluZSB7XFxuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xcbiAgICAgIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xcbiAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgYm9yZGVyLXRvcC1zdHlsZTogc29saWQ7XFxuICAgIH1cXG4gIH1cXG5cXG4gIC5tZGMtdGFiLWluZGljYXRvcl9fY29udGVudC0taWNvbiB7XFxuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xcbiAgICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcXG4gICAgICBtYXJnaW46IDAgYXV0bztcXG4gICAgfVxcbiAgfVxcblxcbiAgLm1kYy10YWItaW5kaWNhdG9yLS1hY3RpdmUgLm1kYy10YWItaW5kaWNhdG9yX19jb250ZW50IHtcXG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmctbWl4aW5zLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XFxuICAgICAgb3BhY2l0eTogMTtcXG4gICAgfVxcbiAgfVxcblxcbiAgLy8gU2xpZGUgYnkgZGVmYXVsdFxcbiAgLm1kYy10YWItaW5kaWNhdG9yIC5tZGMtdGFiLWluZGljYXRvcl9fY29udGVudCB7XFxuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LWFuaW1hdGlvbikge1xcbiAgICAgIHRyYW5zaXRpb246IDI1MG1zIHRyYW5zZm9ybSB2YXJpYWJsZXMuJHN0YW5kYXJkLWN1cnZlLXRpbWluZy1mdW5jdGlvbjtcXG4gICAgfVxcbiAgfVxcblxcbiAgLy8gLS1uby10cmFuc2l0aW9uIGlzIGFwcGxpZWQgaW4gY2FzZXMgd2hlcmUgc3R5bGVzIG5lZWQgdG8gYmUgYXBwbGllZCBpbW1lZGlhdGVseSB0byBzZXQgdXAgYSB0cmFuc2l0aW9uXFxuICAubWRjLXRhYi1pbmRpY2F0b3ItLW5vLXRyYW5zaXRpb24gLm1kYy10YWItaW5kaWNhdG9yX19jb250ZW50IHtcXG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmctbWl4aW5zLnRhcmdldHMoJGZlYXQtYW5pbWF0aW9uKSB7XFxuICAgICAgdHJhbnNpdGlvbjogbm9uZTtcXG4gICAgfVxcbiAgfVxcblxcbiAgLm1kYy10YWItaW5kaWNhdG9yLS1mYWRlIC5tZGMtdGFiLWluZGljYXRvcl9fY29udGVudCB7XFxuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LWFuaW1hdGlvbikge1xcbiAgICAgIHRyYW5zaXRpb246IDE1MG1zIG9wYWNpdHkgbGluZWFyO1xcbiAgICB9XFxuICB9XFxuXFxuICAvLyBwb3N0Y3NzLWJlbS1saW50ZXI6IGlnbm9yZVxcbiAgLm1kYy10YWItaW5kaWNhdG9yLS1hY3RpdmUubWRjLXRhYi1pbmRpY2F0b3ItLWZhZGVcXG4gICAgLm1kYy10YWItaW5kaWNhdG9yX19jb250ZW50IHtcXG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmctbWl4aW5zLnRhcmdldHMoJGZlYXQtYW5pbWF0aW9uKSB7XFxuICAgICAgdHJhbnNpdGlvbi1kZWxheTogMTAwbXM7XFxuICAgIH1cXG4gIH1cXG5cXG4gIC8vIHBvc3Rjc3MtYmVtLWxpbnRlcjogZW5kXFxufVxcblxcbkBtaXhpbiBzdXJmYWNlKCRxdWVyeTogZnVuY3Rpb25zLmFsbCgpKSB7XFxuICAkZmVhdC1zdHJ1Y3R1cmU6IGZ1bmN0aW9ucy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcXG5cXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB9XFxufVxcblxcbkBtaXhpbiB1bmRlcmxpbmUtY29sb3IoJGNvbG9yLCAkcXVlcnk6IGZ1bmN0aW9ucy5hbGwoKSkge1xcbiAgJGZlYXQtY29sb3I6IGZ1bmN0aW9ucy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgY29sb3IpO1xcblxcbiAgLm1kYy10YWItaW5kaWNhdG9yX19jb250ZW50LS11bmRlcmxpbmUge1xcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy1taXhpbnMudGFyZ2V0cygkZmVhdC1jb2xvcikge1xcbiAgICAgIEBpbmNsdWRlIHRoZW1lLW1peGlucy5wcm9wKGJvcmRlci1jb2xvciwgJGNvbG9yKTtcXG4gICAgfVxcbiAgfVxcbn1cXG5cXG5AbWl4aW4gdW5kZXJsaW5lLWhlaWdodCgkaGVpZ2h0LCAkcXVlcnk6IGZ1bmN0aW9ucy5hbGwoKSkge1xcbiAgJGZlYXQtc3RydWN0dXJlOiBmdW5jdGlvbnMuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XFxuXFxuICAubWRjLXRhYi1pbmRpY2F0b3JfX2NvbnRlbnQtLXVuZGVybGluZSB7XFxuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xcbiAgICAgIGJvcmRlci10b3Atd2lkdGg6ICRoZWlnaHQ7XFxuICAgIH1cXG4gIH1cXG59XFxuXFxuQG1peGluIHVuZGVybGluZS10b3AtY29ybmVyLXJhZGl1cygkcmFkaXVzLCAkcXVlcnk6IGZ1bmN0aW9ucy5hbGwoKSkge1xcbiAgJGZlYXQtc3RydWN0dXJlOiBmdW5jdGlvbnMuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XFxuXFxuICAubWRjLXRhYi1pbmRpY2F0b3JfX2NvbnRlbnQtLXVuZGVybGluZSB7XFxuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xcbiAgICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6ICRyYWRpdXM7XFxuICAgICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6ICRyYWRpdXM7XFxuICAgIH1cXG4gIH1cXG59XFxuXFxuQG1peGluIGljb24tY29sb3IoJGNvbG9yLCAkcXVlcnk6IGZ1bmN0aW9ucy5hbGwoKSkge1xcbiAgJGZlYXQtY29sb3I6IGZ1bmN0aW9ucy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgY29sb3IpO1xcblxcbiAgLm1kYy10YWItaW5kaWNhdG9yX19jb250ZW50LS1pY29uIHtcXG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmctbWl4aW5zLnRhcmdldHMoJGZlYXQtY29sb3IpIHtcXG4gICAgICBAaW5jbHVkZSB0aGVtZS1taXhpbnMucHJvcChjb2xvciwgJGNvbG9yKTtcXG4gICAgfVxcbiAgfVxcbn1cXG5cXG5AbWl4aW4gaWNvbi1oZWlnaHQoJGhlaWdodCwgJHF1ZXJ5OiBmdW5jdGlvbnMuYWxsKCkpIHtcXG4gICRmZWF0LXN0cnVjdHVyZTogZnVuY3Rpb25zLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xcblxcbiAgLm1kYy10YWItaW5kaWNhdG9yX19jb250ZW50LS1pY29uIHtcXG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmctbWl4aW5zLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XFxuICAgICAgaGVpZ2h0OiAkaGVpZ2h0O1xcbiAgICAgIGZvbnQtc2l6ZTogJGhlaWdodDtcXG4gICAgfVxcbiAgfVxcbn1cXG5cXG4vL1xcbi8vIFByaXZhdGVcXG4vL1xcblxcbkBtaXhpbiBiYXNlXygkcXVlcnkpIHtcXG4gICRmZWF0LXN0cnVjdHVyZTogZnVuY3Rpb25zLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xcblxcbiAgQGluY2x1ZGUgdW5kZXJsaW5lLWNvbG9yKHByaW1hcnksICRxdWVyeSk7XFxuICBAaW5jbHVkZSBpY29uLWNvbG9yKHNlY29uZGFyeSwgJHF1ZXJ5KTtcXG4gIEBpbmNsdWRlIHVuZGVybGluZS1oZWlnaHQoMnB4LCAkcXVlcnkpO1xcbiAgQGluY2x1ZGUgaWNvbi1oZWlnaHQoMzRweCwgJHF1ZXJ5KTtcXG5cXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHRvcDogMDtcXG4gICAgbGVmdDogMDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgICB6LWluZGV4OiAxO1xcbiAgfVxcbn1cXG5cIixcIi8vXFxuLy8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cXG4vL1xcbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcXG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcXFwiU29mdHdhcmVcXFwiKSwgdG8gZGVhbFxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXFxuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcXG4vL1xcbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXFxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXFxuLy9cXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXFxcIkFTIElTXFxcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cXG4vLyBUSEUgU09GVFdBUkUuXFxuLy9cXG5cXG5AdXNlIFxcXCJzYXNzOm1hcFxcXCI7XFxuQHVzZSBcXFwiQG1hdGVyaWFsL2ZlYXR1cmUtdGFyZ2V0aW5nL2Z1bmN0aW9uc1xcXCIgYXMgZmVhdHVyZS10YXJnZXRpbmctZnVuY3Rpb25zO1xcbkB1c2UgXFxcIkBtYXRlcmlhbC9mZWF0dXJlLXRhcmdldGluZy9taXhpbnNcXFwiO1xcbkB1c2UgXFxcIi4vY3VzdG9tLXByb3BlcnRpZXNcXFwiO1xcbkB1c2UgXFxcIi4vZ3NzXFxcIjtcXG5AdXNlIFxcXCIuL3ZhcmlhYmxlc1xcXCI7XFxuXFxuQG1peGluIGNvcmUtc3R5bGVzKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmctZnVuY3Rpb25zLmFsbCgpKSB7XFxuICAkZmVhdC1jb2xvcjogZmVhdHVyZS10YXJnZXRpbmctZnVuY3Rpb25zLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBjb2xvcik7XFxuXFxuICA6cm9vdCB7XFxuICAgIEBpbmNsdWRlIG1peGlucy50YXJnZXRzKCRmZWF0LWNvbG9yKSB7XFxuICAgICAgQGVhY2ggJHN0eWxlIGluIG1hcC5rZXlzKHZhcmlhYmxlcy4kcHJvcGVydHktdmFsdWVzKSB7XFxuICAgICAgICAtLW1kYy10aGVtZS0jeyRzdHlsZX06ICN7bWFwLmdldCh2YXJpYWJsZXMuJHByb3BlcnR5LXZhbHVlcywgJHN0eWxlKX07XFxuICAgICAgfVxcbiAgICB9XFxuICB9XFxuXFxuICBAZWFjaCAkc3R5bGUgaW4gbWFwLmtleXModmFyaWFibGVzLiRwcm9wZXJ0eS12YWx1ZXMpIHtcXG4gICAgQGlmICRzdHlsZSAhPSAnYmFja2dyb3VuZCcgYW5kICRzdHlsZSAhPSAnc3VyZmFjZScge1xcbiAgICAgIC5tZGMtdGhlbWUtLSN7JHN0eWxlfSB7XFxuICAgICAgICBAaW5jbHVkZSBtaXhpbnMudGFyZ2V0cygkZmVhdC1jb2xvcikge1xcbiAgICAgICAgICBAaW5jbHVkZSBwcm9wKGNvbG9yLCAkc3R5bGUsIHRydWUpO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgfSBAZWxzZSB7XFxuICAgICAgLm1kYy10aGVtZS0tI3skc3R5bGV9IHtcXG4gICAgICAgIEBpbmNsdWRlIG1peGlucy50YXJnZXRzKCRmZWF0LWNvbG9yKSB7XFxuICAgICAgICAgIEBpbmNsdWRlIHByb3AoYmFja2dyb3VuZC1jb2xvciwgJHN0eWxlKTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH1cXG4gIH1cXG5cXG4gIC8vIENTUyBydWxlcyBmb3IgdXNpbmcgcHJpbWFyeSBhbmQgc2Vjb25kYXJ5IChwbHVzIGxpZ2h0L2RhcmsgdmFyaWFudHMpIGFzIGJhY2tncm91bmQgY29sb3JzLlxcbiAgQGVhY2ggJHN0eWxlIGluICgncHJpbWFyeScsICdzZWNvbmRhcnknKSB7XFxuICAgIC5tZGMtdGhlbWUtLSN7JHN0eWxlfS1iZyB7XFxuICAgICAgQGluY2x1ZGUgbWl4aW5zLnRhcmdldHMoJGZlYXQtY29sb3IpIHtcXG4gICAgICAgIEBpbmNsdWRlIHByb3AoYmFja2dyb3VuZC1jb2xvciwgJHN0eWxlLCB0cnVlKTtcXG4gICAgICB9XFxuICAgIH1cXG4gIH1cXG59XFxuXFxuLy8vIEFwcGxpZXMgYSBkeW5hbWljIHZhbHVlIHRvIHRoZSBzcGVjaWZpZWQgcHJvcGVydHkuIFRoaXMgbWl4aW4gc2hvdWxkIGJlIHVzZWRcXG4vLy8gaW4gdGhlbWUgc3R5bGUgbWl4aW5zIHdoZW4gc2V0dGluZyBwcm9wZXJ0aWVzLlxcbi8vL1xcbi8vLyBUaGUgdmFsdWUgbWF5IGJlIGFueSBvZiB0aGUgZm9sbG93aW5nOlxcbi8vLyAtIGEgc3RhbmRhcmQgQ1NTIHZhbHVlXFxuLy8vIC0gYSBjdXN0b20gcHJvcGVydHkgTWFwLCBlLmcuICh2YXJuYW1lOiAtLW1kYy1mb28sIGZhbGxiYWNrOiBibHVlKVxcbi8vLyAtIGEgTWF0ZXJpYWwgdGhlbWUga2V5IFN0cmluZywgZS5nLiBcXFwicHJpbWFyeVxcXCIsIFxcXCJvbi1wcmltYXJ5XFxcIlxcbi8vL1xcbi8vLyBAcGFyYW0ge1N0cmluZ30gJHByb3BlcnR5IC0gdGhlIG5hbWUgb2YgdGhlIENTUyBwcm9wZXJ0eS5cXG4vLy8gQHBhcmFtIHtTdHJpbmcgfCBOdW1iZXIgfCBDb2xvciB8IExpc3QgfCBNYXB9ICR2YWx1ZSAtIHRoZSBwcm9wZXJ0eSdzIHZhbHVlLlxcbi8vLyBAcGFyYW0ge01hcH0gJGdzcyAtIG9wdGlvbmFsIE1hcCBvZiBHU1MgYW5ub3RhdGlvbnMgdG8gc2V0Llxcbi8vLyBAcGFyYW0ge0Jvb2x9ICRpbXBvcnRhbnQgLSBzZXQgdG8gdHJ1ZSB0byBhZGQgYW4gYCFpbXBvcnRhbnRgIHJ1bGUuIERlZmF1bHRzXFxuLy8vICAgICB0byBmYWxzZS5cXG5AbWl4aW4gcHJvcGVydHkoJHByb3BlcnR5LCAkdmFsdWUsICRnc3M6ICgpLCAkaW1wb3J0YW50OiBmYWxzZSkge1xcbiAgJGltcG9ydGFudC1ydWxlOiBpZigkaW1wb3J0YW50LCAnIWltcG9ydGFudCcsICcnKTtcXG5cXG4gIEBpZiBjdXN0b20tcHJvcGVydGllcy5pcy1jdXN0b20tcHJvcCgkdmFsdWUpIHtcXG4gICAgLy8gJHZhbHVlIGlzIGEgY3VzdG9tIHByb3BlcnR5IE1hcFxcbiAgICBAaW5jbHVkZSBjdXN0b20tcHJvcGVydGllcy5hcHBseShcXG4gICAgICAkcHJvcGVydHksXFxuICAgICAgJHZhbHVlLFxcbiAgICAgICRnc3M6ICRnc3MsXFxuICAgICAgJGltcG9ydGFudDogJGltcG9ydGFudFxcbiAgICApO1xcbiAgfSBAZWxzZSBpZiBtYXAuaGFzLWtleSh2YXJpYWJsZXMuJHByb3BlcnR5LXZhbHVlcywgJHZhbHVlKSB7XFxuICAgIC8vICR2YWx1ZSBpcyBhIHRoZW1lIHByb3BlcnR5IFN0cmluZ1xcbiAgICAkZmFsbGJhY2s6IG1hcC5nZXQodmFyaWFibGVzLiRwcm9wZXJ0eS12YWx1ZXMsICR2YWx1ZSk7XFxuICAgICRjdXN0b20tcHJvcDogY3VzdG9tLXByb3BlcnRpZXMuY3JlYXRlKC0tbWRjLXRoZW1lLSN7JHN0eWxlfSwgJGZhbGxiYWNrKTtcXG4gICAgQGluY2x1ZGUgY3VzdG9tLXByb3BlcnRpZXMuYXBwbHkoXFxuICAgICAgJHByb3BlcnR5LFxcbiAgICAgICRjdXN0b20tcHJvcCxcXG4gICAgICAkZ3NzOiAkZ3NzLFxcbiAgICAgICRpbXBvcnRhbnQ6ICRpbXBvcnRhbnRcXG4gICAgKTtcXG4gIH0gQGVsc2Uge1xcbiAgICAvLyAkdmFsdWUgaXMgYSBzdGFuZGFyZCBDU1MgdmFsdWVcXG4gICAgQGluY2x1ZGUgZ3NzLmFubm90YXRlKCRnc3MpO1xcbiAgICAjeyRwcm9wZXJ0eX06ICR2YWx1ZSAjeyRpbXBvcnRhbnQtcnVsZX07XFxuICB9XFxufVxcblxcbi8vIEFwcGxpZXMgdGhlIGNvcnJlY3QgdGhlbWUgY29sb3Igc3R5bGUgdG8gdGhlIHNwZWNpZmllZCBwcm9wZXJ0eS5cXG4vLyAkcHJvcGVydHkgaXMgdHlwaWNhbGx5IGNvbG9yIG9yIGJhY2tncm91bmQtY29sb3IsIGJ1dCBjYW4gYmUgYW55IENTUyBwcm9wZXJ0eSB0aGF0IGFjY2VwdHMgY29sb3IgdmFsdWVzLlxcbi8vICRzdHlsZSBzaG91bGQgYmUgb25lIG9mIHRoZSBtYXAga2V5cyBpbiAkbWRjLXRoZW1lLXByb3BlcnR5LXZhbHVlcyAoX3ZhcmlhYmxlcy5zY3NzKSwgb3IgYSBjb2xvciB2YWx1ZS5cXG4vLyBAZGVwcmVjYXRlZCB1c2UgdGhlIGBwcm9wZXJ0eSgpYCBtaXhpbiBpbnN0ZWFkXFxuQG1peGluIHByb3AoJHByb3BlcnR5LCAkc3R5bGUsICRpbXBvcnRhbnQ6IGZhbHNlKSB7XFxuICAkaW1wb3J0YW50LXJ1bGU6IGlmKCRpbXBvcnRhbnQsICchaW1wb3J0YW50JywgJycpO1xcblxcbiAgQGlmIGN1c3RvbS1wcm9wZXJ0aWVzLmlzLWN1c3RvbS1wcm9wKCRzdHlsZSkge1xcbiAgICBAaW5jbHVkZSBjdXN0b20tcHJvcGVydGllcy5hcHBseSgkcHJvcGVydHksICRzdHlsZSwgJGltcG9ydGFudDogJGltcG9ydGFudCk7XFxuICB9IEBlbHNlIGlmIHZhcmlhYmxlcy5pcy12YWxpZC10aGVtZS1wcm9wLXZhbHVlXygkc3R5bGUpIHtcXG4gICAgI3skcHJvcGVydHl9OiAkc3R5bGUgI3skaW1wb3J0YW50LXJ1bGV9O1xcbiAgfSBAZWxzZSB7XFxuICAgIEBpZiBub3QgbWFwLmhhcy1rZXkodmFyaWFibGVzLiRwcm9wZXJ0eS12YWx1ZXMsICRzdHlsZSkge1xcbiAgICAgIEBlcnJvciBcXFwiSW52YWxpZCBzdHlsZTogJyN7JHN0eWxlfScuIENob29zZSBvbmUgb2Y6ICN7bWFwLmtleXModmFyaWFibGVzLiRwcm9wZXJ0eS12YWx1ZXMpfVxcXCI7XFxuICAgIH1cXG4gICAgJHZhbHVlOiBtYXAuZ2V0KHZhcmlhYmxlcy4kcHJvcGVydHktdmFsdWVzLCAkc3R5bGUpO1xcblxcbiAgICAjeyRwcm9wZXJ0eX06ICR2YWx1ZSAjeyRpbXBvcnRhbnQtcnVsZX07XFxuICAgIC8qIEBhbHRlcm5hdGUgKi9cXG4gICAgI3skcHJvcGVydHl9OiB2YXIoLS1tZGMtdGhlbWUtI3skc3R5bGV9LCAkdmFsdWUpICN7JGltcG9ydGFudC1ydWxlfTtcXG4gIH1cXG59XFxuXCIsXCIvL1xcbi8vIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXFxuLy9cXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XFxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXFxcIlNvZnR3YXJlXFxcIiksIHRvIGRlYWxcXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXFxuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XFxuLy9cXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxcbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxcbi8vXFxuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFxcXCJBUyBJU1xcXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXFxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXFxuLy8gVEhFIFNPRlRXQVJFLlxcbi8vXFxuXFxuQHVzZSBcXFwic2FzczpsaXN0XFxcIjtcXG5AdXNlIFxcXCJzYXNzOm1hcFxcXCI7XFxuQHVzZSBcXFwic2FzczpzdHJpbmdcXFwiO1xcbkB1c2UgXFxcIkBtYXRlcmlhbC9mZWF0dXJlLXRhcmdldGluZy9mdW5jdGlvbnNcXFwiIGFzIGZlYXR1cmUtdGFyZ2V0aW5nLWZ1bmN0aW9ucztcXG5AdXNlIFxcXCJAbWF0ZXJpYWwvZmVhdHVyZS10YXJnZXRpbmcvbWl4aW5zXFxcIiBhcyBmZWF0dXJlLXRhcmdldGluZy1taXhpbnM7XFxuQHVzZSBcXFwiQG1hdGVyaWFsL3RoZW1lL21peGluc1xcXCIgYXMgdGhlbWUtbWl4aW5zO1xcbkB1c2UgXFxcIi4vdmFyaWFibGVzXFxcIjtcXG5cXG5AbWl4aW4gY29yZS1zdHlsZXMoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy1mdW5jdGlvbnMuYWxsKCkpIHtcXG4gIC5tZGMtdHlwb2dyYXBoeSB7XFxuICAgIEBpbmNsdWRlIGJhc2UoJHF1ZXJ5OiAkcXVlcnkpO1xcbiAgfVxcblxcbiAgQGVhY2ggJHN0eWxlIGluIG1hcC5rZXlzKHZhcmlhYmxlcy4kc3R5bGVzKSB7XFxuICAgIC5tZGMtdHlwb2dyYXBoeS0tI3skc3R5bGV9IHtcXG4gICAgICBAaW5jbHVkZSB0eXBvZ3JhcGh5KCRzdHlsZSwgJHF1ZXJ5OiAkcXVlcnkpO1xcbiAgICB9XFxuICB9XFxufVxcblxcbkBtaXhpbiBiYXNlKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmctZnVuY3Rpb25zLmFsbCgpKSB7XFxuICAkZmVhdC10eXBvZ3JhcGh5OiBmZWF0dXJlLXRhcmdldGluZy1mdW5jdGlvbnMuY3JlYXRlLXRhcmdldChcXG4gICAgJHF1ZXJ5LFxcbiAgICB0eXBvZ3JhcGh5XFxuICApO1xcblxcbiAgQGluY2x1ZGUgc21vb3RoLWZvbnQoJHF1ZXJ5OiAkcXVlcnkpO1xcbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmctbWl4aW5zLnRhcmdldHMoJGZlYXQtdHlwb2dyYXBoeSkge1xcbiAgICBAaW5jbHVkZSB0aGVtZS1taXhpbnMucHJvcChcXG4gICAgICBmb250LWZhbWlseSxcXG4gICAgICAoXFxuICAgICAgICB2YXJuYW1lOiAtLW1kYy10eXBvZ3JhcGh5LWZvbnQtZmFtaWx5LFxcbiAgICAgICAgZmFsbGJhY2s6IG1hcC5nZXQodmFyaWFibGVzLiRiYXNlLCAnZm9udC1mYW1pbHknKSxcXG4gICAgICApXFxuICAgICk7XFxuICB9XFxufVxcblxcbkBtaXhpbiB0eXBvZ3JhcGh5KFxcbiAgJHN0eWxlLFxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy1mdW5jdGlvbnMuYWxsKCksXFxuICAkZXhjbHVkZS1wcm9wczogKClcXG4pIHtcXG4gICRmZWF0LXR5cG9ncmFwaHk6IGZlYXR1cmUtdGFyZ2V0aW5nLWZ1bmN0aW9ucy5jcmVhdGUtdGFyZ2V0KFxcbiAgICAkcXVlcnksXFxuICAgIHR5cG9ncmFwaHlcXG4gICk7XFxuICAkc3R5bGUtcHJvcHM6IG1hcC5nZXQodmFyaWFibGVzLiRzdHlsZXMsICRzdHlsZSk7XFxuXFxuICBAaWYgbm90IG1hcC5oYXMta2V5KHZhcmlhYmxlcy4kc3R5bGVzLCAkc3R5bGUpIHtcXG4gICAgQGVycm9yIFxcXCJJbnZhbGlkIHN0eWxlIHNwZWNpZmllZCEgI3skc3R5bGV9IGRvZXNuJ3QgZXhpc3QuIENob29zZSBvbmUgb2YgI3ttYXAua2V5cyh2YXJpYWJsZXMuJHN0eWxlcyl9XFxcIjtcXG4gIH1cXG5cXG4gIEBpbmNsdWRlIHNtb290aC1mb250KCRxdWVyeTogJHF1ZXJ5KTtcXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LXR5cG9ncmFwaHkpIHtcXG4gICAgQGVhY2ggJGtleSwgJHZhbHVlIGluICRzdHlsZS1wcm9wcyB7XFxuICAgICAgQGlmIGxpc3QuaW5kZXgoJGV4Y2x1ZGUtcHJvcHMsICRrZXkpID09IG51bGwge1xcbiAgICAgICAgJGZhbGxiYWNrOiAkdmFsdWU7XFxuICAgICAgICBAaWYgJGtleSA9PSAnZm9udC1mYW1pbHknIHtcXG4gICAgICAgICAgLy8gRWFjaCBzdHlsZSBoYXMgaXRzIG93biBmb250LWZhbWlseSBjdXN0b20gcHJvcGVydHksIGJ1dCBzaG91bGRcXG4gICAgICAgICAgLy8gZmFsbGJhY2sgdG8gYSBnZW5lcmljIGZvbnQtZmFtaWx5IHByb3BlcnR5LiBUaGlzIGFsbG93c1xcbiAgICAgICAgICAvLyBjdXN0b21pemluZyB0aGUgZm9udC1mYW1pbHkgZm9yIGFsbCBzdHlsZXMgb3Igb25seSBzcGVjaWZpYyBvbmVzLlxcbiAgICAgICAgICAkZmFsbGJhY2s6IChcXG4gICAgICAgICAgICB2YXJuYW1lOiAtLW1kYy10eXBvZ3JhcGh5LWZvbnQtZmFtaWx5LFxcbiAgICAgICAgICAgIGZhbGxiYWNrOiAkZmFsbGJhY2ssXFxuICAgICAgICAgICk7XFxuICAgICAgICB9XFxuXFxuICAgICAgICBAaW5jbHVkZSB0aGVtZS1taXhpbnMucHJvcChcXG4gICAgICAgICAgJGtleSxcXG4gICAgICAgICAgKFxcbiAgICAgICAgICAgIHZhcm5hbWU6IC0tbWRjLXR5cG9ncmFwaHktI3skc3R5bGV9LSN7JGtleX0sXFxuICAgICAgICAgICAgZmFsbGJhY2s6ICRmYWxsYmFjayxcXG4gICAgICAgICAgKVxcbiAgICAgICAgKTtcXG4gICAgICB9XFxuICAgIH1cXG4gIH1cXG59XFxuXFxuLy8vIEFwcGxpZXMgYW50aWFsaWFzaW5nIHZpYSBmb250LXNtb290aGluZyB0byB0ZXh0LlxcbkBtaXhpbiBzbW9vdGgtZm9udCgkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLWZ1bmN0aW9ucy5hbGwoKSkge1xcbiAgJGZlYXQtdHlwb2dyYXBoeTogZmVhdHVyZS10YXJnZXRpbmctZnVuY3Rpb25zLmNyZWF0ZS10YXJnZXQoXFxuICAgICRxdWVyeSxcXG4gICAgdHlwb2dyYXBoeVxcbiAgKTtcXG5cXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LXR5cG9ncmFwaHkpIHtcXG4gICAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcXG4gICAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XFxuICB9XFxufVxcblxcbi8vIEVsZW1lbnQgbXVzdCBiZSBgZGlzcGxheTogYmxvY2tgIG9yIGBkaXNwbGF5OiBpbmxpbmUtYmxvY2tgIGZvciB0aGlzIHRvIHdvcmsuXFxuQG1peGluIG92ZXJmbG93LWVsbGlwc2lzKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmctZnVuY3Rpb25zLmFsbCgpKSB7XFxuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLWZ1bmN0aW9ucy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcXG5cXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIH1cXG59XFxuXFxuLy8vIFNldHMgYSBjb250YWluZXIncyBiYXNlbGluZSB0aGF0IHRleHQgY29udGVudCB3aWxsIGFsaWduIHRvLlxcbi8vL1xcbi8vLyBJZiB0aGUgYCRkaXNwbGF5YCBpcyBzZXQgdG8gYSBmbGV4Ym94IGRpc3BsYXksIG9ubHkgYCR0b3BgIGJhc2VsaW5lIG1heSBiZVxcbi8vLyBzZXQuIEEgc2VwYXJhdGUgZWxlbWVudCBtdXN0IGJlIGFkZGVkIGFzIGEgY2hpbGQgb2YgdGhlIGNvbnRhaW5lciB3aXRoIGFcXG4vLy8gYCRib3R0b21gIGJhc2VsaW5lLlxcbi8vL1xcbi8vLyBAcGFyYW0ge051bWJlcn0gJHRvcCAtIHRoZSBkaXN0YW5jZSBmcm9tIHRoZSB0b3Agb2YgdGhlIGNvbnRhaW5lciB0byB0aGVcXG4vLy8gICAgIHRleHQncyBiYXNlbGluZS5cXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRib3R0b20gLSB0aGUgZGlzdGFuY2UgZnJvbSB0aGUgdGV4dCdzIGJhc2VsaW5lIHRvIHRoZVxcbi8vLyAgICAgYm90dG9tIG9mIHRoZSBjb250YWluZXIuXFxuLy8vIEBwYXJhbSB7U3RyaW5nfSAkZGlzcGxheSAtIHRoZSBkaXNwbGF5IHR5cGUgb2YgdGhlIGNvbnRhaW5lci4gTWF5IGJlIGBmbGV4YCxcXG4vLy8gICAgIGBpbmxpbmUtZmxleGAsIGBibG9ja2AsIG9yIGBpbmxpbmUtYmxvY2tgLlxcbkBtaXhpbiBiYXNlbGluZShcXG4gICR0b3A6IDAsXFxuICAkYm90dG9tOiAwLFxcbiAgJGRpc3BsYXk6IGJsb2NrLFxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy1mdW5jdGlvbnMuYWxsKClcXG4pIHtcXG4gICR2YWxpZERpc3BsYXlUeXBlczogKGZsZXgsIGlubGluZS1mbGV4LCBibG9jaywgaW5saW5lLWJsb2NrKTtcXG5cXG4gIEBpZiBsaXN0LmluZGV4KCR2YWxpZERpc3BsYXlUeXBlcywgJGRpc3BsYXkpID09IG51bGwge1xcbiAgICBAZXJyb3IgXFxcIm1kYy10eXBvZ3JhcGh5OiBpbnZhbGlkIGRpc3BsYXkgc3BlY2lmaWVkISAjeyRkaXNwbGF5fSBtdXN0IGJlIG9uZSBvZiAjeyR2YWxpZERpc3BsYXlUeXBlc31cXFwiO1xcbiAgfVxcblxcbiAgJGlzRmxleGJveDogJGRpc3BsYXkgPT0gJ2ZsZXgnIG9yICRkaXNwbGF5ID09ICdpbmxpbmUtZmxleCc7XFxuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLWZ1bmN0aW9ucy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcXG5cXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xcbiAgICBkaXNwbGF5OiAkZGlzcGxheTtcXG5cXG4gICAgQGlmICRpc0ZsZXhib3gge1xcbiAgICAgIGFsaWduLWl0ZW1zOiBiYXNlbGluZTtcXG4gICAgfVxcbiAgfVxcblxcbiAgQGlmICR0b3AgPiAwIHtcXG4gICAgQGluY2x1ZGUgYmFzZWxpbmUtdG9wKCR0b3AsICRxdWVyeTogJHF1ZXJ5KTtcXG4gIH1cXG5cXG4gIEBpZiAkYm90dG9tID4gMCB7XFxuICAgIEBpZiAkaXNGbGV4Ym94IHtcXG4gICAgICBAZXJyb3IgXFxcIm1kYy10eXBvZ3JhcGh5OiBpbnZhbGlkIGJhc2VsaW5lIHdpdGggZGlzcGxheSB0eXBlLiAjeyRkaXNwbGF5fSBjYW5ub3Qgc3BlY2lmaXkgJGJvdHRvbS4gQWRkIGEgc2VwYXJhdGUgY2hpbGQgZWxlbWVudCB3aXRoIGl0cyBvd24gJGJvdHRvbS5cXFwiO1xcbiAgICB9XFxuXFxuICAgIEBpbmNsdWRlIGJhc2VsaW5lLWJvdHRvbSgkYm90dG9tLCAkcXVlcnk6ICRxdWVyeSk7XFxuICB9XFxufVxcblxcbi8vLyBTZXRzIHRoZSBiYXNlbGluZSBvZiBmbG93IHRleHQgY29udGVudC5cXG4vLy9cXG4vLy8gU2VwYXJhdGUgYCR0b3BgIGFuZCBgJGJvdHRvbWAgYmFzZWxpbmVzIG1heSBiZSBzcGVjaWZpZWQuIFlvdSBzaG91bGQgZW5zdXJlXFxuLy8vIHRoYXQgdGhlIGAkdG9wYCBiYXNlbGluZSBtYXRjaGVzIHRoZSBwcmV2aW91cyB0ZXh0IGNvbnRlbnQncyAkYm90dG9tXFxuLy8vIGJhc2VsaW5lIHRvIGVuc3VyZSB0ZXh0IGlzIHBvc2l0aW9uZWQgYXBwcm9wcmlhdGVseS5cXG4vLy9cXG4vLy8gU2VlIGdvL2Nzcy1iYXNlbGluZSBmb3IgcmVmZXJlbmNlIG9uIGhvdyB0aGlzIG1peGluIHdvcmtzLlxcbi8vL1xcbi8vLyBUaGlzIGlzIGludGVuZGVkIGZvciB0ZXh0IGZsb3cgY29udGVudCBvbmx5IChlLmcuIGA8aDE+YCwgYDxwPmAsIGA8c3Bhbj5gLFxcbi8vLyBvciBgPGRpdj5gIHdpdGggb25seSB0ZXh0IGNvbnRlbnQpLiBVc2UgYGJhc2VsaW5lKClgIHRvIHNldCB0aGUgYmFzZWxpbmUgb2ZcXG4vLy8gY29udGFpbmVycyB0aGF0IGFyZSBmbGV4Ym94IG9yIGhhdmUgbm9uLWZsb3cgY29udGVudCBjaGlsZHJlbi5cXG4vLy9cXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICR0b3AgLSB0aGUgZGlzdGFuY2UgZnJvbSB0aGUgdG9wIG9mIHRoZSBjb250YWluZXIgdG8gdGhlXFxuLy8vICAgICB0ZXh0J3MgYmFzZWxpbmUuXFxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkYm90dG9tIC0gdGhlIGRpc3RhbmNlIGZyb20gdGhlIHRleHQncyBiYXNlbGluZSB0byB0aGVcXG4vLy8gICAgIGJvdHRvbSBvZiB0aGUgY29udGFpbmVyLlxcbi8vLyBAcGFyYW0ge0Jvb2xlYW59ICRsaW5lSGVpZ2h0IC0gdGhlIGxpbmUtaGVpZ2h0IHRvIHVzZSBmb3IgdGhlIHRleHQuIFRoaXNcXG4vLy8gICAgIGlzIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIGJhc2VsaW5lcyBvZiBtdWx0aXBsZSBsaW5lcyBvZiB0ZXh0Llxcbi8vLyBAcGFyYW0ge1N0cmluZ30gJGRpc3BsYXkgLSB0aGUgZGlzcGxheSB0eXBlIG9mIHRoZSBjb250YWluZXIuIE1heSBiZSBgYmxvY2tgXFxuLy8vICAgICBvciBgaW5saW5lLWJsb2NrYC5cXG5AbWl4aW4gdGV4dC1iYXNlbGluZShcXG4gICR0b3A6IDAsXFxuICAkYm90dG9tOiAwLFxcbiAgJGRpc3BsYXk6IGJsb2NrLFxcbiAgJGxpbmVIZWlnaHQ6IG5vcm1hbCxcXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmctZnVuY3Rpb25zLmFsbCgpXFxuKSB7XFxuICAkdmFsaWREaXNwbGF5VHlwZXM6IChibG9jaywgaW5saW5lLWJsb2NrKTtcXG5cXG4gIEBpZiBsaXN0LmluZGV4KCR2YWxpZERpc3BsYXlUeXBlcywgJGRpc3BsYXkpID09IG51bGwge1xcbiAgICBAZXJyb3IgXFxcIm1kYy10eXBvZ3JhcGh5OiBpbnZhbGlkIGRpc3BsYXkgc3BlY2lmaWVkISAjeyRkaXNwbGF5fSBtdXN0IGJlIG9uZSBvZiAjeyR2YWxpZERpc3BsYXlUeXBlc31cXFwiO1xcbiAgfVxcblxcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy1mdW5jdGlvbnMuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XFxuXFxuICBAaW5jbHVkZSBiYXNlbGluZShcXG4gICAgJGRpc3BsYXk6ICRkaXNwbGF5LFxcbiAgICAkdG9wOiAkdG9wLFxcbiAgICAkYm90dG9tOiAkYm90dG9tLFxcbiAgICAkcXVlcnk6ICRxdWVyeVxcbiAgKTtcXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xcbiAgICBAaWYgJHRvcCA+IDAge1xcbiAgICAgIG1hcmdpbi10b3A6IDA7XFxuICAgICAgLyogQGFsdGVybmF0ZSAqL1xcbiAgICAgIGxpbmUtaGVpZ2h0OiAjeyRsaW5lSGVpZ2h0fTtcXG4gICAgfVxcblxcbiAgICBAaWYgJGJvdHRvbSA+IDAge1xcbiAgICAgIG1hcmdpbi1ib3R0b206IC0xICogJGJvdHRvbTtcXG4gICAgfVxcbiAgfVxcbn1cXG5cXG4vLy8gQ3JlYXRlcyBhIGJhc2VsaW5lIHN0cnV0IGZyb20gdGhlIHRvcCBvZiBhIGNvbnRhaW5lci4gVGhpcyBtaXhpbiBpcyBmb3JcXG4vLy8gYWR2YW5jZWQgdXNlcnMsIHByZWZlciBgYmFzZWxpbmUoKWAuXFxuLy8vXFxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkZGlzdGFuY2UgLSBUaGUgZGlzdGFuY2UgZnJvbSB0aGUgdG9wIG9mIHRoZSBjb250YWluZXIgdG9cXG4vLy8gICAgIHRoZSB0ZXh0J3MgYmFzZWxpbmUuXFxuQG1peGluIGJhc2VsaW5lLXRvcCgkZGlzdGFuY2UsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmctZnVuY3Rpb25zLmFsbCgpKSB7XFxuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLWZ1bmN0aW9ucy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcXG5cXG4gICY6OmJlZm9yZSB7XFxuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xcbiAgICAgIEBpbmNsdWRlIGJhc2VsaW5lLXN0cnV0XygkZGlzdGFuY2UpO1xcblxcbiAgICAgIHZlcnRpY2FsLWFsaWduOiAwO1xcbiAgICB9XFxuICB9XFxufVxcblxcbi8vLyBDcmVhdGVzIGEgYmFzZWxpbmUgc3RydXQgZnJvbSB0aGUgYmFzZWxpbmUgdG8gdGhlIGJvdHRvbSBvZiBhIGNvbnRhaW5lci5cXG4vLy8gVGhpcyBtaXhpbiBpcyBmb3IgYWR2YW5jZWQgdXNlcnMsIHByZWZlciBgYmFzZWxpbmUoKWAuXFxuLy8vXFxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkZGlzdGFuY2UgLSBUaGUgZGlzdGFuY2UgZnJvbSB0aGUgdGV4dCdzIGJhc2VsaW5lIHRvIHRoZVxcbi8vLyAgICAgYm90dG9tIG9mIHRoZSBjb250YWluZXIuXFxuQG1peGluIGJhc2VsaW5lLWJvdHRvbSgkZGlzdGFuY2UsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmctZnVuY3Rpb25zLmFsbCgpKSB7XFxuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLWZ1bmN0aW9ucy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcXG5cXG4gICY6OmFmdGVyIHtcXG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmctbWl4aW5zLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XFxuICAgICAgQGluY2x1ZGUgYmFzZWxpbmUtc3RydXRfKCRkaXN0YW5jZSk7XFxuXFxuICAgICAgdmVydGljYWwtYWxpZ246IC0xICogJGRpc3RhbmNlO1xcbiAgICB9XFxuICB9XFxufVxcblxcbi8vLyBBZGRzIGFuIGludmlzaWJsZSwgemVyby13aWR0aCBwcmVmaXggdG8gYSBjb250YWluZXIncyB0ZXh0Llxcbi8vLyBUaGlzIGVuc3VyZXMgdGhhdCB0aGUgYmFzZWxpbmUgaXMgYWx3YXlzIHdoZXJlIHRoZSB0ZXh0IHdvdWxkIGJlLCBpbnN0ZWFkXFxuLy8vIG9mIGRlZmF1bHRpbmcgdG8gdGhlIGNvbnRhaW5lciBib3R0b20gd2hlbiB0ZXh0IGlzIGVtcHR5LiBEbyBub3QgdXNlIHRoaXNcXG4vLy8gbWl4aW4gaWYgdGhlIGBiYXNlbGluZWAgbWl4aW4gaXMgYWxyZWFkeSBhcHBsaWVkLlxcbkBtaXhpbiB6ZXJvLXdpZHRoLXByZWZpeCgkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLWZ1bmN0aW9ucy5hbGwoKSkge1xcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy1mdW5jdGlvbnMuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XFxuXFxuICAmOjpiZWZvcmUge1xcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy1taXhpbnMudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcXG4gICAgICBjb250ZW50OiAnXFxcXDIwMGInO1xcbiAgICB9XFxuICB9XFxufVxcblxcbkBtaXhpbiBiYXNlbGluZS1zdHJ1dF8oJGRpc3RhbmNlKSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aWR0aDogMDtcXG4gIGhlaWdodDogJGRpc3RhbmNlO1xcbiAgY29udGVudDogJyc7XFxufVxcblwiLFwiLy9cXG4vLyBDb3B5cmlnaHQgMjAyMCBHb29nbGUgSW5jLlxcbi8vXFxuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFxcXCJTb2Z0d2FyZVxcXCIpLCB0byBkZWFsXFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxcbi8vXFxuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cXG4vL1xcbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcXFwiQVMgSVNcXFwiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXFxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXFxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxcbi8vIFRIRSBTT0ZUV0FSRS5cXG4vL1xcbkB1c2UgXFxcInNhc3M6bWFwXFxcIjtcXG5AdXNlIFxcXCJzYXNzOm1ldGFcXFwiO1xcbkB1c2UgXFxcIi4vZ3NzXFxcIjtcXG5cXG4vLy8gV2hlbiB0cnVlLCBhZGQgYW4gYWRkaXRpb25hbCBwcm9wZXJ0eS92YWx1ZSBkZWNsYXJhdGlvbiBiZWZvcmUgYSBjdXN0b21cXG4vLy8gcHJvcGVydHkncyBgdmFyKClgIHRvIHN1cHBvcnQgSUUuIENvbmZpZ3VyZVxcbi8vLyBgQG1hdGVyaWFsL3RoZW1lL2N1c3RvbS1wcm9wZXJ0aWVzYCB3aXRoIHRoaXMgdmFyaWFibGUgc2V0IHRvIGZhbHNlIHRvXFxuLy8vIGRpc2FibGUgSUUgZmFsbGJhY2sgdmFsdWVzIGZvciBjdXN0b20gcHJvcGVydGllcy5cXG4kaWUtZmFsbGJhY2s6IHRydWUgIWRlZmF1bHQ7XFxuXFxuLy8vIFJldHVybnMgdHJ1ZSBpZiB0aGUgcGFyYW1ldGVyIGlzIGEgY3VzdG9tIHByb3BlcnR5IE1hcC5cXG4vLy9cXG4vLy8gQHBhcmFtIHsqfSAkdmFsdWUgLSB0aGUgdmFsdWUgdG8gdGVzdC5cXG4vLy8gQHJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBpcyBhIGN1c3RvbSBwcm9wZXJ0eSBNYXAsIG9yIGZhbHNlIGlmIG5vdC5cXG5AZnVuY3Rpb24gaXMtY3VzdG9tLXByb3AoJHZhbHVlKSB7XFxuICBAcmV0dXJuIG1ldGEudHlwZS1vZigkdmFsdWUpID09ICdtYXAnIGFuZCBtYXAuaGFzLWtleSgkdmFsdWUsICd2YXJuYW1lJyk7XFxufVxcblxcbi8vLyBSZXR1cm5zIHRydWUgaWYgJHByb3AxJ3MgdmFybmFtZSBhbmQgZmFsbGJhY2sgdmFsdWVzIGFyZSBkZWVwbHkgZXF1YWwgdG9cXG4vLy8gJHByb3AyJ3MgdmFybmFtZSBhbmQgZmFsbGJhY2sgdmFsdWVzLlxcbi8vL1xcbi8vLyBAcGFyYW0ge01hcH0gJHByb3AxIC0gdGhlIGZpcnN0IHZhbHVlIHRvIHRlc3QuXFxuLy8vIEBwYXJhbSB7TWFwfSAkcHJvcDIgLSB0aGUgc2Vjb25kIHZhbHVlIHRvIHRlc3QuXFxuLy8vIEByZXR1cm4gdHJ1ZSBpZiBib3RoIHByb3BlcnRpZXMgYXJlIGRlZXBseSBlcXVhbFxcbkBmdW5jdGlvbiBhcmUtZXF1YWwoJHByb3AxLCAkcHJvcDIpIHtcXG4gIEByZXR1cm4gY3JlYXRlLXZhcigkcHJvcDEpID09IGNyZWF0ZS12YXIoJHByb3AyKTtcXG59XFxuXFxuLy8vIENyZWF0ZXMgYSBjdXN0b20gcHJvcGVydHkgTWFwLlxcbi8vL1xcbi8vLyBAcGFyYW0ge1N0cmluZ30gJHZhcm5hbWUgLSB0aGUgY3VzdG9tIHByb3BlcnR5IG5hbWUuXFxuLy8vIEBwYXJhbSB7U3RyaW5nIHwgTnVtYmVyIHwgTWFwfSAtIHRoZSBmYWxsYmFjayB2YWx1ZSAobWF5IGJlIGFub3RoZXIgY3VzdG9tXFxuLy8vICAgICBwcm9wZXJ0eSBNYXApLiBNYXkgYmUgbnVsbC5cXG4vLy8gQHJldHVybiBhIGN1c3RvbSBwcm9wZXJ0eSBNYXAuXFxuQGZ1bmN0aW9uIGNyZWF0ZSgkdmFybmFtZSwgJGZhbGxiYWNrOiBudWxsKSB7XFxuICBAcmV0dXJuICh2YXJuYW1lOiAkdmFybmFtZSwgZmFsbGJhY2s6ICRmYWxsYmFjayk7XFxufVxcblxcbi8vLyBSZXR1cm5zIHRoZSBjdXN0b20gcHJvcGVydHkgdmFyaWFibGUgbmFtZSBvZiBhIGN1c3RvbSBwcm9wZXJ0eSBNYXAuXFxuLy8vXFxuLy8vIEBwYXJhbSB7TWFwfSAkY3VzdG9tLXByb3AgLSBhIGN1c3RvbSBwcm9wZXJ0eSBNYXAuXFxuLy8vIEByZXR1cm4gdGhlIGN1c3RvbSBwcm9wZXJ0eSB2YXJpYWJsZSBuYW1lIGRlZmluZWQgYnkgdGhlIE1hcC5cXG5AZnVuY3Rpb24gZ2V0LXZhcm5hbWUoJGN1c3RvbS1wcm9wKSB7XFxuICBAcmV0dXJuIG1hcC5nZXQoJGN1c3RvbS1wcm9wLCAndmFybmFtZScpO1xcbn1cXG5cXG4vLy8gUmV0dXJucyB0aGUgZmFsbGJhY2sgdmFsdWUgb2YgYSBjdXN0b20gcHJvcGVydHkgTWFwLiBNYXkgYmUgbnVsbCBpZiB0aGVcXG4vLy8gY3VzdG9tIHByb3BlcnR5IGRvZXMgbm90IGhhdmUgYSBmYWxsYmFjay5cXG4vLy9cXG4vLy8gQHBhcmFtIHtNYXB9ICRjdXN0b20tcHJvcCAtIGEgY3VzdG9tIHByb3BlcnR5IE1hcC5cXG4vLy8gQHBhcmFtIHtCb29sfSAkc2hhbGxvdyAtIGlmIHRydWUsIHJldHVybiB0aGUgZmlyc3QgZmFsbGJhY2sgdmFsdWUsIHdoaWNoXFxuLy8vICAgICBtYXkgYmUgYW5vdGhlciBjdXN0b20gcHJvcGVydHkgTWFwLiBEZWZhdWx0cyB0byBmYWxzZSwgd2hpY2ggd2lsbCByZXR1cm5cXG4vLy8gICAgIHRoZSBkZWVwIGZpbmFsIGZhbGxiYWNrIHZhbHVlLlxcbi8vLyBAcmV0dXJuIHRoZSBmYWxsYmFjayB2YWx1ZSBvZiBhIGN1c3RvbSBwcm9wZXJ0eSBNYXAuIE1heSBiZSBudWxsLlxcbkBmdW5jdGlvbiBnZXQtZmFsbGJhY2soJGN1c3RvbS1wcm9wLCAkc2hhbGxvdzogZmFsc2UpIHtcXG4gICRmYWxsYmFjazogbWFwLmdldCgkY3VzdG9tLXByb3AsICdmYWxsYmFjaycpO1xcbiAgQGlmIGlzLWN1c3RvbS1wcm9wKCRmYWxsYmFjaykgYW5kIG5vdCAkc2hhbGxvdyB7XFxuICAgIEByZXR1cm4gZ2V0LWZhbGxiYWNrKCRmYWxsYmFjayk7XFxuICB9XFxuXFxuICBAcmV0dXJuICRmYWxsYmFjaztcXG59XFxuXFxuLy8vIENyZWF0ZXMgYSBuZXcgY3VzdG9tIHByb3BlcnR5IE1hcCBhbmQgcmV0dXJucyBpdCB3aXRoIHRoZSBzcGVjaWZpZWQgbmV3XFxuLy8vIGZhbGxiYWNrIHZhbHVlLlxcbi8vL1xcbi8vLyBAcGFyYW0ge01hcH0gJGN1c3RvbS1wcm9wIC0gdGhlIGN1c3RvbSBwcm9wZXJ0eSBNYXAgdG8gY29weS5cXG4vLy8gQHBhcmFtIHtTdHJpbmcgfCBOdW1iZXIgfCBNYXB9ICRuZXctZmFsbGJhY2sgLSB0aGUgbmV3IGZhbGxiYWNrIHZhbHVlIG9mIHRoZVxcbi8vLyAgICAgY3VzdG9tIHByb3BlcnR5IE1hcC4gTWF5IGJlIG51bGwuXFxuLy8vIEBwYXJhbSB7Qm9vbH0gJHNoYWxsb3cgLSBpZiB0cnVlLCBzZXQgdGhlIGZpcnN0IGZhbGxiYWNrIHZhbHVlLiBEZWZhdWx0cyB0b1xcbi8vLyAgICAgZmFsc2UsIHdoaWNoIHdpbGwgc2V0IHRoZSBkZWVwIGZpbmFsIGZhbGxiYWNrIHZhbHVlLlxcbi8vLyBAcmV0dXJuIGEgbmV3IGN1c3RvbSBwcm9wZXJ0eSBNYXAgd2l0aCB0aGUgbmV3IGZhbGxiYWNrIHZhbHVlLlxcbkBmdW5jdGlvbiBzZXQtZmFsbGJhY2soJGN1c3RvbS1wcm9wLCAkbmV3LWZhbGxiYWNrLCAkc2hhbGxvdzogZmFsc2UpIHtcXG4gICR2YXJuYW1lOiBnZXQtdmFybmFtZSgkY3VzdG9tLXByb3ApO1xcbiAgJGZpcnN0LWZhbGxiYWNrOiBnZXQtZmFsbGJhY2soJGN1c3RvbS1wcm9wLCAkc2hhbGxvdzogdHJ1ZSk7XFxuXFxuICBAaWYgaXMtY3VzdG9tLXByb3AoJGZpcnN0LWZhbGxiYWNrKSBhbmQgbm90ICRzaGFsbG93IHtcXG4gICAgLy8gVGhlIGZpcnN0IGZhbGxiYWNrIGlzIGEgY3VzdG9tIHByb3BlcnR5IGFuZCAkc2hhbGxvdyBpcyBmYWxzZS4gRGVlcGx5XFxuICAgIC8vIHNldCB0aGUgZmFsbGJhY2sgdmFsdWUgb2YgdGhlIGN1c3RvbSBwcm9wZXJ0eSBhbmQgZ2V0IHRoZSBuZXcgY3VzdG9tXFxuICAgIC8vIHByb3BlcnR5IE1hcCByZXR1cm5lZC5cXG4gICAgJG5ldy1mYWxsYmFjazogc2V0LWZhbGxiYWNrKCRmaXJzdC1mYWxsYmFjaywgJG5ldy1mYWxsYmFjayk7XFxuICB9XFxuXFxuICBAcmV0dXJuIGNyZWF0ZSgkdmFybmFtZSwgJG5ldy1mYWxsYmFjayk7XFxufVxcblxcbi8vLyBDcmVhdGVzIGFuZCByZXR1cm5zIGEgYHZhcigpYCBmdW5jdGlvbiBkZWNsYXJhdGlvbiByZXByZXNlbnRlZCBieSB0aGVcXG4vLy8gcHJvdmlkZWQgY3VzdG9tIHByb3BlcnR5IE1hcC5cXG4vLy9cXG4vLy8gQHBhcmFtIHtNYXB9ICRjdXN0b20tcHJvcCAtIGEgY3VzdG9tIHByb3BlcnR5IE1hcC5cXG4vLy8gQHJldHVybiBhIGB2YXIoKWAgZnVuY3Rpb24gZGVjbGFyYXRpb24gdXNpbmcgdGhlIGN1c3RvbSBwcm9wZXJ0eSBNYXAnc1xcbi8vLyAgICAgdmFybmFtZSBhbmQgZmFsbGJhY2sgdmFsdWUuXFxuQGZ1bmN0aW9uIGNyZWF0ZS12YXIoJGN1c3RvbS1wcm9wKSB7XFxuICAkdmFybmFtZTogZ2V0LXZhcm5hbWUoJGN1c3RvbS1wcm9wKTtcXG4gICRmYWxsYmFjazogZ2V0LWZhbGxiYWNrKCRjdXN0b20tcHJvcCwgJHNoYWxsb3c6IHRydWUpO1xcblxcbiAgQGlmIGlzLWN1c3RvbS1wcm9wKCRmYWxsYmFjaykge1xcbiAgICBAcmV0dXJuIHZhcigkdmFybmFtZSwgY3JlYXRlLXZhcigkZmFsbGJhY2spKTtcXG4gIH0gQGVsc2UgaWYgJGZhbGxiYWNrICE9IG51bGwge1xcbiAgICBAcmV0dXJuIHZhcigkdmFybmFtZSwgJGZhbGxiYWNrKTtcXG4gIH0gQGVsc2Uge1xcbiAgICBAcmV0dXJuIHZhcigkdmFybmFtZSk7XFxuICB9XFxufVxcblxcbi8vLyBBcHBsaWVzIGEgY3VzdG9tIHByb3BlcnR5IHZhbHVlIHRvIHRoZSBzcGVjaWZpZWQgcHJvcGVydHkuXFxuLy8vXFxuLy8vIEBwYXJhbSB7U3RyaW5nfSAkcHJvcGVydHkgLSB0aGUgbmFtZSBvZiB0aGUgQ1NTIHByb3BlcnR5Llxcbi8vLyBAcGFyYW0ge01hcH0gJGN1c3RvbS1wcm9wIC0gYSBjdXN0b20gcHJvcGVydHkgTWFwIGZvciB0aGUgcHJvcGVydHkncyB2YWx1ZS5cXG4vLy8gQHBhcmFtIHtNYXB9ICRnc3MgLSBvcHRpb25hbCBNYXAgb2YgR1NTIGFubm90YXRpb25zIHRvIHNldC5cXG4vLy8gQHBhcmFtIHtCb29sfSAkaW1wb3J0YW50IC0gc2V0IHRvIHRydWUgdG8gYWRkIGFuIGAhaW1wb3J0YW50YCBydWxlLiBEZWZhdWx0c1xcbi8vLyAgICAgdG8gZmFsc2UuXFxuQG1peGluIGFwcGx5KCRwcm9wZXJ0eSwgJGN1c3RvbS1wcm9wLCAkZ3NzOiAoKSwgJGltcG9ydGFudDogZmFsc2UpIHtcXG4gIEBpZiBub3QgaXMtY3VzdG9tLXByb3AoJGN1c3RvbS1wcm9wKSB7XFxuICAgIEBlcnJvciBcXFwibWRjLXRoZW1lOiBJbnZhbGlkIGN1c3RvbSBwcm9wZXJ0eTogI3skY3VzdG9tLXByb3B9LiBNdXN0IGJlIGEgTWFwIHdpdGggJ3Zhcm5hbWUnIGFuZCAnZmFsbGJhY2snLlxcXCI7XFxuICB9XFxuXFxuICAkaW1wb3J0YW50LXJ1bGU6IGlmKCRpbXBvcnRhbnQsICchaW1wb3J0YW50JywgJycpO1xcblxcbiAgJGZhbGxiYWNrOiBnZXQtZmFsbGJhY2soJGN1c3RvbS1wcm9wKTtcXG4gIEBpZiAkaWUtZmFsbGJhY2sgYW5kICRmYWxsYmFjayAhPSBudWxsIHtcXG4gICAgQGluY2x1ZGUgZ3NzLmFubm90YXRlKCRnc3MpO1xcbiAgICAjeyRwcm9wZXJ0eX06ICN7JGZhbGxiYWNrfSAjeyRpbXBvcnRhbnQtcnVsZX07XFxuXFxuICAgIC8vIGFkZCBAYWx0ZXJuYXRlIHRvIGFubm90YXRpb25zXFxuICAgICRnc3M6IG1hcC5tZXJnZShcXG4gICAgICAkZ3NzLFxcbiAgICAgIChcXG4gICAgICAgIGFsdGVybmF0ZTogdHJ1ZSxcXG4gICAgICApXFxuICAgICk7XFxuICB9XFxuXFxuICBAaW5jbHVkZSBnc3MuYW5ub3RhdGUoJGdzcyk7XFxuICAjeyRwcm9wZXJ0eX06IGNyZWF0ZS12YXIoJGN1c3RvbS1wcm9wKSAjeyRpbXBvcnRhbnQtcnVsZX07XFxufVxcblwiLFwiLy9cXG4vLyBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxcbi8vXFxuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFxcXCJTb2Z0d2FyZVxcXCIpLCB0byBkZWFsXFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxcbi8vXFxuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cXG4vL1xcbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcXFwiQVMgSVNcXFwiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXFxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXFxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxcbi8vIFRIRSBTT0ZUV0FSRS5cXG4vL1xcblxcbkB1c2UgXFxcIkBtYXRlcmlhbC90aGVtZS92YXJpYWJsZXNcXFwiOyAvLyBmb3IgbWRjLXRoZW1lLXByb3AtdmFsdWUoKVxcblxcbiRpY29uLXNpemU6IDI0cHggIWRlZmF1bHQ7XFxuJGhlaWdodDogNDhweCAhZGVmYXVsdDtcXG4kc3RhY2tlZC1oZWlnaHQ6IDcycHggIWRlZmF1bHQ7XFxuJGhvcml6b250YWwtcGFkZGluZzogMjRweCAhZGVmYXVsdDtcXG4kdGV4dC1sYWJlbC1vcGFjaXR5OiAwLjYgIWRlZmF1bHQ7XFxuJGljb24tb3BhY2l0eTogMC41NCAhZGVmYXVsdDtcXG4kdGV4dC1sYWJlbC1jb2xvci1kZWZhdWx0OiByZ2JhKFxcbiAgdmFyaWFibGVzLnByb3AtdmFsdWUob24tc3VyZmFjZSksXFxuICAkdGV4dC1sYWJlbC1vcGFjaXR5XFxuKSAhZGVmYXVsdDtcXG4kaWNvbi1jb2xvci1kZWZhdWx0OiByZ2JhKFxcbiAgdmFyaWFibGVzLnByb3AtdmFsdWUob24tc3VyZmFjZSksXFxuICAkaWNvbi1vcGFjaXR5XFxuKSAhZGVmYXVsdDtcXG4kdGV4dC1sYWJlbC1jb2xvci1hY3RpdmU6IHByaW1hcnkgIWRlZmF1bHQ7XFxuJGljb24tY29sb3ItYWN0aXZlOiBwcmltYXJ5ICFkZWZhdWx0O1xcblwiLFwiLy9cXG4vLyBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxcbi8vXFxuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFxcXCJTb2Z0d2FyZVxcXCIpLCB0byBkZWFsXFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxcbi8vXFxuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cXG4vL1xcbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcXFwiQVMgSVNcXFwiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXFxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXFxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxcbi8vIFRIRSBTT0ZUV0FSRS5cXG4vL1xcblxcbkB1c2UgXFxcInNhc3M6bGlzdFxcXCI7XFxuQHVzZSBcXFwiQG1hdGVyaWFsL3RoZW1lL21peGluc1xcXCIgYXMgdGhlbWU7XFxuQHVzZSBcXFwiLi92YXJpYWJsZXNcXFwiO1xcblxcbi8vIENyZWF0ZXMgYSBydWxlIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHdoZW4gYW4gTURDIFdlYiBjb21wb25lbnQgaXMgd2l0aGluIHRoZSBjb250ZXh0IG9mIGFuIFJUTCBsYXlvdXQuXFxuLy9cXG4vLyBVc2FnZSBFeGFtcGxlOlxcbi8vXFxuLy8gYGBgc2Nzc1xcbi8vIC5tZGMtZm9vIHtcXG4vLyAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4vLyAgIGxlZnQ6IDA7XFxuLy9cXG4vLyAgIEBpbmNsdWRlIHJ0bCB7XFxuLy8gICAgIGxlZnQ6IGF1dG87XFxuLy8gICAgIHJpZ2h0OiAwO1xcbi8vICAgfVxcbi8vXFxuLy8gICAmX19iYXIge1xcbi8vICAgICBtYXJnaW4tbGVmdDogNHB4O1xcbi8vICAgICBAaW5jbHVkZSBydGwoXFxcIi5tZGMtZm9vXFxcIikge1xcbi8vICAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbi8vICAgICAgIG1hcmdpbi1yaWdodDogNHB4O1xcbi8vICAgICB9XFxuLy8gICB9XFxuLy8gfVxcbi8vXFxuLy8gLm1kYy1mb28tLW1vZCB7XFxuLy8gICBwYWRkaW5nLWxlZnQ6IDRweDtcXG4vL1xcbi8vICAgQGluY2x1ZGUgcnRsIHtcXG4vLyAgICAgcGFkZGluZy1sZWZ0OiBhdXRvO1xcbi8vICAgICBwYWRkaW5nLXJpZ2h0OiA0cHg7XFxuLy8gICB9XFxuLy8gfVxcbi8vIGBgYFxcbi8vXFxuLy8gTm90ZSB0aGF0IHRoaXMgbWl4aW4gd29ya3MgYnkgY2hlY2tpbmcgZm9yIGFuIGFuY2VzdG9yIGVsZW1lbnQgd2l0aCBgW2Rpcj1cXFwicnRsXFxcIl1gLlxcbi8vIEFzIGEgcmVzdWx0LCBuZXN0ZWQgYGRpcmAgdmFsdWVzIGFyZSBub3Qgc3VwcG9ydGVkOlxcbi8vXFxuLy8gYGBgaHRtbFxcbi8vIDxodG1sIGRpcj1cXFwicnRsXFxcIj5cXG4vLyAgIDwhLS0gLi4uIC0tPlxcbi8vICAgPGRpdiBkaXI9XFxcImx0clxcXCI+XFxuLy8gICAgIDxkaXYgY2xhc3M9XFxcIm1kYy1mb29cXFwiPlN0eWxlZCBpbmNvcnJlY3RseSBhcyBSVEwhPC9kaXY+XFxuLy8gICA8L2Rpdj5cXG4vLyA8L2h0bWw+XFxuLy8gYGBgXFxuLy9cXG4vLyBJbiB0aGUgZnV0dXJlLCBzZWxlY3RvcnMgc3VjaCBhcyB0aGUgYDpkaXJgIHBzZXVkby1jbGFzcyAoaHR0cDovL21kbi5pby9jc3MvOmRpcikgd2lsbCBoZWxwIHVzIG1pdGlnYXRlIHRoaXMuXFxuQG1peGluIHJ0bCgkcm9vdC1zZWxlY3RvcjogbnVsbCkge1xcbiAgQGlmICh2YXJpYWJsZXMuJGluY2x1ZGUpIHtcXG4gICAgQGlmICgkcm9vdC1zZWxlY3Rvcikge1xcbiAgICAgIEBhdC1yb290IHtcXG4gICAgICAgICN7JHJvb3Qtc2VsZWN0b3J9W2Rpcj0ncnRsJ10gJixcXG4gICAgICAgIFtkaXI9J3J0bCddICN7JHJvb3Qtc2VsZWN0b3J9ICYge1xcbiAgICAgICAgICBAY29udGVudDtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH0gQGVsc2Uge1xcbiAgICAgIFtkaXI9J3J0bCddICYsXFxuICAgICAgJltkaXI9J3J0bCddIHtcXG4gICAgICAgIEBjb250ZW50O1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfVxcbn1cXG5cXG4vLyBUYWtlcyBhIGJhc2UgYm94LW1vZGVsIHByb3BlcnR5IG5hbWUgKGBtYXJnaW5gLCBgYm9yZGVyYCwgYHBhZGRpbmdgLCBldGMuKSBhbG9uZyB3aXRoIGFcXG4vLyBkZWZhdWx0IGRpcmVjdGlvbiAoYGxlZnRgIG9yIGByaWdodGApIGFuZCB2YWx1ZSwgYW5kIGVtaXRzIHJ1bGVzIHdoaWNoIGFwcGx5IHRoZSBnaXZlbiB2YWx1ZSB0byB0aGVcXG4vLyBzcGVjaWZpZWQgZGlyZWN0aW9uIGJ5IGRlZmF1bHQgYW5kIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24gaW4gUlRMLlxcbi8vXFxuLy8gRm9yIGV4YW1wbGU6XFxuLy9cXG4vLyBgYGBzY3NzXFxuLy8gLm1kYy1mb28ge1xcbi8vICAgQGluY2x1ZGUgcnRsLXJlZmxleGl2ZS1ib3gobWFyZ2luLCBsZWZ0LCA4cHgpO1xcbi8vIH1cXG4vLyBgYGBcXG4vL1xcbi8vIGlzIGVxdWl2YWxlbnQgdG86XFxuLy9cXG4vLyBgYGBzY3NzXFxuLy8gLm1kYy1mb28ge1xcbi8vICAgbWFyZ2luLWxlZnQ6IDhweDtcXG4vLyAgIG1hcmdpbi1yaWdodDogMDtcXG4vL1xcbi8vICAgQGluY2x1ZGUgcnRsIHtcXG4vLyAgICAgbWFyZ2luLWxlZnQ6IDA7XFxuLy8gICAgIG1hcmdpbi1yaWdodDogOHB4O1xcbi8vICAgfVxcbi8vIH1cXG4vLyBgYGBcXG4vL1xcbi8vIHdoZXJlYXM6XFxuLy9cXG4vLyBgYGBzY3NzXFxuLy8gLm1kYy1mb28ge1xcbi8vICAgQGluY2x1ZGUgcnRsLXJlZmxleGl2ZS1ib3gobWFyZ2luLCByaWdodCwgOHB4KTtcXG4vLyB9XFxuLy8gYGBgXFxuLy9cXG4vLyBpcyBlcXVpdmFsZW50IHRvOlxcbi8vXFxuLy8gYGBgc2Nzc1xcbi8vIC5tZGMtZm9vIHtcXG4vLyAgIG1hcmdpbi1sZWZ0OiAwO1xcbi8vICAgbWFyZ2luLXJpZ2h0OiA4cHg7XFxuLy9cXG4vLyAgIEBpbmNsdWRlIHJ0bCB7XFxuLy8gICAgIG1hcmdpbi1sZWZ0OiA4cHg7XFxuLy8gICAgIG1hcmdpbi1yaWdodDogMDtcXG4vLyAgIH1cXG4vLyB9XFxuLy8gYGBgXFxuLy9cXG4vLyBZb3UgY2FuIGFsc28gcGFzcyBhbiBvcHRpb25hbCA0dGggYCRyb290LXNlbGVjdG9yYCBhcmd1bWVudCB3aGljaCB3aWxsIGJlIGZvcndhcmRlZCB0byBgbWRjLXJ0bGAsXFxuLy8gZS5nLiBgQGluY2x1ZGUgcnRsLXJlZmxleGl2ZS1ib3gobWFyZ2luLCBsZWZ0LCA4cHgsIFxcXCIubWRjLWNvbXBvbmVudFxcXCIpYC5cXG4vL1xcbi8vIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIHdpbGwgYWx3YXlzIHplcm8gb3V0IHRoZSBvcmlnaW5hbCB2YWx1ZSBpbiBhbiBSVEwgY29udGV4dC5cXG4vLyBJZiB5b3UncmUgdHJ5aW5nIHRvIGZsaXAgdGhlIHZhbHVlcywgdXNlIGBtZGMtcnRsLXJlZmxleGl2ZS1wcm9wZXJ0eSgpYCBpbnN0ZWFkLlxcbkBtaXhpbiByZWZsZXhpdmUtYm94KFxcbiAgJGJhc2UtcHJvcGVydHksXFxuICAkZGVmYXVsdC1kaXJlY3Rpb24sXFxuICAkdmFsdWUsXFxuICAkcm9vdC1zZWxlY3RvcjogbnVsbFxcbikge1xcbiAgQGlmIChsaXN0LmluZGV4KChyaWdodCwgbGVmdCksICRkZWZhdWx0LWRpcmVjdGlvbikgPT0gbnVsbCkge1xcbiAgICBAZXJyb3IgXFxcIkludmFsaWQgZGVmYXVsdCBkaXJlY3Rpb246ICcjeyRkZWZhdWx0LWRpcmVjdGlvbn0nLiBQbGVhc2Ugc3BlY2lmaXkgZWl0aGVyICdyaWdodCcgb3IgJ2xlZnQnLlxcXCI7XFxuICB9XFxuXFxuICAkbGVmdC12YWx1ZTogJHZhbHVlO1xcbiAgJHJpZ2h0LXZhbHVlOiAwO1xcblxcbiAgQGlmICgkZGVmYXVsdC1kaXJlY3Rpb24gPT0gcmlnaHQpIHtcXG4gICAgJGxlZnQtdmFsdWU6IDA7XFxuICAgICRyaWdodC12YWx1ZTogJHZhbHVlO1xcbiAgfVxcblxcbiAgQGluY2x1ZGUgcmVmbGV4aXZlLXByb3BlcnR5KFxcbiAgICAkYmFzZS1wcm9wZXJ0eSxcXG4gICAgJGxlZnQtdmFsdWUsXFxuICAgICRyaWdodC12YWx1ZSxcXG4gICAgJHJvb3Qtc2VsZWN0b3JcXG4gICk7XFxufVxcblxcbi8vIFRha2VzIGEgYmFzZSBwcm9wZXJ0eSBhbmQgZW1pdHMgcnVsZXMgdGhhdCBhc3NpZ24gPGJhc2UtcHJvcGVydHk+LWxlZnQgdG8gPGxlZnQtdmFsdWU+IGFuZFxcbi8vIDxiYXNlLXByb3BlcnR5Pi1yaWdodCB0byA8cmlnaHQtdmFsdWU+IGluIGEgTFRSIGNvbnRleHQsIGFuZCB2aWNlIHZlcnNhIGluIGEgUlRMIGNvbnRleHQuXFxuLy8gRm9yIGV4YW1wbGU6XFxuLy9cXG4vLyBgYGBzY3NzXFxuLy8gLm1kYy1mb28ge1xcbi8vICAgQGluY2x1ZGUgcnRsLXJlZmxleGl2ZS1wcm9wZXJ0eShtYXJnaW4sIGF1dG8sIDEycHgpO1xcbi8vIH1cXG4vLyBgYGBcXG4vL1xcbi8vIGlzIGVxdWl2YWxlbnQgdG86XFxuLy9cXG4vLyBgYGBzY3NzXFxuLy8gLm1kYy1mb28ge1xcbi8vICAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuLy8gICBtYXJnaW4tcmlnaHQ6IDEycHg7XFxuLy9cXG4vLyAgIEBpbmNsdWRlIHJ0bCB7XFxuLy8gICAgIG1hcmdpbi1sZWZ0OiAxMnB4O1xcbi8vICAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XFxuLy8gICB9XFxuLy8gfVxcbi8vIGBgYFxcbi8vXFxuLy8gQW4gb3B0aW9uYWwgNHRoIGAkcm9vdC1zZWxlY3RvcmAgYXJndW1lbnQgY2FuIGJlIGdpdmVuLCB3aGljaCB3aWxsIGJlIHBhc3NlZCB0byBgbWRjLXJ0bGAuXFxuQG1peGluIHJlZmxleGl2ZS1wcm9wZXJ0eShcXG4gICRiYXNlLXByb3BlcnR5LFxcbiAgJGxlZnQtdmFsdWUsXFxuICAkcmlnaHQtdmFsdWUsXFxuICAkcm9vdC1zZWxlY3RvcjogbnVsbFxcbikge1xcbiAgJHByb3AtbGVmdDogI3skYmFzZS1wcm9wZXJ0eX0tbGVmdDtcXG4gICRwcm9wLXJpZ2h0OiAjeyRiYXNlLXByb3BlcnR5fS1yaWdodDtcXG5cXG4gIEBpbmNsdWRlIHJlZmxleGl2ZShcXG4gICAgJHByb3AtbGVmdCxcXG4gICAgJGxlZnQtdmFsdWUsXFxuICAgICRwcm9wLXJpZ2h0LFxcbiAgICAkcmlnaHQtdmFsdWUsXFxuICAgICRyb290LXNlbGVjdG9yXFxuICApO1xcbn1cXG5cXG4vLyBUYWtlcyBhbiBhcmd1bWVudCBzcGVjaWZ5aW5nIGEgaG9yaXpvbnRhbCBwb3NpdGlvbiBwcm9wZXJ0eSAoZWl0aGVyIFxcXCJsZWZ0XFxcIiBvciBcXFwicmlnaHRcXFwiKSBhcyB3ZWxsXFxuLy8gYXMgYSB2YWx1ZSwgYW5kIGFwcGxpZXMgdGhhdCB2YWx1ZSB0byB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uIGluIGEgTFRSIGNvbnRleHQsIGFuZCBmbGlwcyBpdCBpbiBhXFxuLy8gUlRMIGNvbnRleHQuIEZvciBleGFtcGxlOlxcbi8vXFxuLy8gYGBgc2Nzc1xcbi8vIC5tZGMtZm9vIHtcXG4vLyAgIEBpbmNsdWRlIHJ0bC1yZWZsZXhpdmUtcG9zaXRpb24obGVmdCwgMCk7XFxuLy8gfVxcbi8vIGBgYFxcbi8vXFxuLy8gaXMgZXF1aXZhbGVudCB0bzpcXG4vL1xcbi8vIGBgYHNjc3NcXG4vLyAubWRjLWZvbyB7XFxuLy8gICBsZWZ0OiAwO1xcbi8vICAgcmlnaHQ6IGluaXRpYWw7XFxuLy9cXG4vLyAgIEBpbmNsdWRlIHJ0bCB7XFxuLy8gICAgIGxlZnQ6IGluaXRpYWw7XFxuLy8gICAgIHJpZ2h0OiAwO1xcbi8vICAgfVxcbi8vIH1cXG4vLyBgYGBcXG4vL1xcbi8vIEFuIG9wdGlvbmFsIHRoaXJkICRyb290LXNlbGVjdG9yIGFyZ3VtZW50IG1heSBhbHNvIGJlIGdpdmVuLCB3aGljaCBpcyBwYXNzZWQgdG8gYG1kYy1ydGxgLlxcbkBtaXhpbiByZWZsZXhpdmUtcG9zaXRpb24oJHBvc2l0aW9uLXByb3BlcnR5LCAkdmFsdWUsICRyb290LXNlbGVjdG9yOiBudWxsKSB7XFxuICBAaWYgKGxpc3QuaW5kZXgoKHJpZ2h0LCBsZWZ0KSwgJHBvc2l0aW9uLXByb3BlcnR5KSA9PSBudWxsKSB7XFxuICAgIEBlcnJvciBcXFwiSW52YWxpZCBwb3NpdGlvbiAje3Bvc2l0aW9uLXByb3BlcnR5fS4gUGxlYXNlIHNwZWNpZml5IGVpdGhlciByaWdodCBvciBsZWZ0XFxcIjtcXG4gIH1cXG5cXG4gIC8vIFRPRE86IFxcXCJpbml0aWFsXFxcIiBpcyBub3Qgc3VwcG9ydGVkIGluIElFIDExLiBodHRwczovL2Nhbml1c2UuY29tLyNmZWF0PWNzcy1pbml0aWFsLXZhbHVlXFxuICAkbGVmdC12YWx1ZTogJHZhbHVlO1xcbiAgJHJpZ2h0LXZhbHVlOiBpbml0aWFsO1xcblxcbiAgQGlmICgkcG9zaXRpb24tcHJvcGVydHkgPT0gcmlnaHQpIHtcXG4gICAgJHJpZ2h0LXZhbHVlOiAkdmFsdWU7XFxuICAgICRsZWZ0LXZhbHVlOiBpbml0aWFsO1xcbiAgfVxcblxcbiAgQGluY2x1ZGUgcmVmbGV4aXZlKGxlZnQsICRsZWZ0LXZhbHVlLCByaWdodCwgJHJpZ2h0LXZhbHVlLCAkcm9vdC1zZWxlY3Rvcik7XFxufVxcblxcbi8vIFRha2VzIHBhaXIgb2YgcHJvcGVydGllcyB3aXRoIHZhbHVlcyBhcyBhcmd1bWVudHMgYW5kIGZsaXBzIGl0IGluIFJUTCBjb250ZXh0Llxcbi8vIEZvciBleGFtcGxlOlxcbi8vXFxuLy8gYGBgc2Nzc1xcbi8vIC5tZGMtZm9vIHtcXG4vLyAgIEBpbmNsdWRlIHJ0bC1yZWZsZXhpdmUobGVmdCwgMnB4LCByaWdodCwgNXB4KTtcXG4vLyB9XFxuLy8gYGBgXFxuLy9cXG4vLyBpcyBlcXVpdmFsZW50IHRvOlxcbi8vXFxuLy8gYGBgc2Nzc1xcbi8vIC5tZGMtZm9vIHtcXG4vLyAgIGxlZnQ6IDJweDtcXG4vLyAgIHJpZ2h0OiA1cHg7XFxuLy9cXG4vLyAgIEBpbmNsdWRlIHJ0bCB7XFxuLy8gICAgIHJpZ2h0OiAycHg7XFxuLy8gICAgIGxlZnQ6IDVweDtcXG4vLyAgIH1cXG4vLyB9XFxuLy8gYGBgXFxuLy9cXG4vLyBBbiBvcHRpb25hbCBmaWZ0aCBgJHJvb3Qtc2VsZWN0b3JgIGFyZ3VtZW50IG1heSBhbHNvIGJlIGdpdmVuLCB3aGljaCBpcyBwYXNzZWQgdG8gYG1kYy1ydGxgLlxcbkBtaXhpbiByZWZsZXhpdmUoXFxuICAkbGVmdC1wcm9wZXJ0eSxcXG4gICRsZWZ0LXZhbHVlLFxcbiAgJHJpZ2h0LXByb3BlcnR5LFxcbiAgJHJpZ2h0LXZhbHVlLFxcbiAgJHJvb3Qtc2VsZWN0b3I6IG51bGxcXG4pIHtcXG4gIEBpbmNsdWRlIHByb3BlcnR5XygkbGVmdC1wcm9wZXJ0eSwgJGxlZnQtdmFsdWUpO1xcbiAgQGluY2x1ZGUgcHJvcGVydHlfKCRyaWdodC1wcm9wZXJ0eSwgJHJpZ2h0LXZhbHVlKTtcXG5cXG4gIEBpbmNsdWRlIHJ0bCgkcm9vdC1zZWxlY3Rvcikge1xcbiAgICBAaW5jbHVkZSBwcm9wZXJ0eV8oJGxlZnQtcHJvcGVydHksICRyaWdodC12YWx1ZSk7XFxuICAgIEBpbmNsdWRlIHByb3BlcnR5XygkcmlnaHQtcHJvcGVydHksICRsZWZ0LXZhbHVlKTtcXG4gIH1cXG59XFxuXFxuLy8vXFxuLy8vIEFkZHMgYEBub2ZsaXBgIGFubm90YXRpb24gd2hlbiBgJG1kYy1ydGwtaW5jbHVkZWAgaXMgdHJ1ZS5cXG4vLy9cXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRwcm9wZXJ0eVxcbi8vLyBAcGFyYW0ge1N0cmluZ30gJHZhbHVlXFxuLy8vIEBhY2Nlc3MgcHJpdmF0ZVxcbi8vL1xcbkBtaXhpbiBwcm9wZXJ0eV8oJHByb3BlcnR5LCAkdmFsdWUpIHtcXG4gIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KFxcbiAgICAkcHJvcGVydHksXFxuICAgICR2YWx1ZSxcXG4gICAgJGdzczogKG5vZmxpcDogdmFyaWFibGVzLiRpbmNsdWRlKVxcbiAgKTtcXG59XFxuXCIsXCIvL1xcbi8vIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXFxuLy9cXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XFxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXFxcIlNvZnR3YXJlXFxcIiksIHRvIGRlYWxcXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXFxuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XFxuLy9cXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxcbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxcbi8vXFxuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFxcXCJBUyBJU1xcXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXFxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXFxuLy8gVEhFIFNPRlRXQVJFLlxcbi8vXFxuXFxuLy8gTURDIFJpcHBsZSBrZXlmcmFtZXMgYXJlIHNwbGl0IGludG8gdGhlaXIgb3duIGZpbGUgc28gdGhhdCBfbWl4aW5zLnNjc3MgY2FuIHJlbHkgb24gdGhlbS5cXG5cXG5AdXNlIFxcXCJAbWF0ZXJpYWwvYW5pbWF0aW9uL3ZhcmlhYmxlc1xcXCI7XFxuQHVzZSBcXFwiLi92YXJpYWJsZXNcXFwiIGFzIHZhcmlhYmxlczI7XFxuXFxuQG1peGluIGtleWZyYW1lc18ge1xcbiAgQGtleWZyYW1lcyBtZGMtcmlwcGxlLWZnLXJhZGl1cy1pbiB7XFxuICAgIGZyb20ge1xcbiAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IHZhcmlhYmxlcy4kc3RhbmRhcmQtY3VydmUtdGltaW5nLWZ1bmN0aW9uO1xcbiAgICAgIC8vIE5PVEU6IEZvciB0aGVzZSBrZXlmcmFtZXMsIHdlIGRvIG5vdCBuZWVkIGN1c3RvbSBwcm9wZXJ0eSBmYWxsYmFja3MgYmVjYXVzZSB0aGV5IGFyZSBvbmx5XFxuICAgICAgLy8gdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGAubWRjLXJpcHBsZS11cGdyYWRlZGAuIFNpbmNlIE1EQ1JpcHBsZUZvdW5kYXRpb24gY2hlY2tzIHRvIGVuc3VyZVxcbiAgICAgIC8vIHRoYXQgY3VzdG9tIHByb3BlcnRpZXMgYXJlIHN1cHBvcnRlZCB3aXRoaW4gdGhlIGJyb3dzZXIgYmVmb3JlIGFkZGluZyB0aGlzIGNsYXNzLCB3ZSBjYW5cXG4gICAgICAvLyBzYWZlbHkgdXNlIHRoZW0gd2l0aG91dCBhIGZhbGxiYWNrLlxcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKHZhcigtLW1kYy1yaXBwbGUtZmctdHJhbnNsYXRlLXN0YXJ0LCAwKSkgc2NhbGUoMSk7XFxuICAgIH1cXG5cXG4gICAgdG8ge1xcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKHZhcigtLW1kYy1yaXBwbGUtZmctdHJhbnNsYXRlLWVuZCwgMCkpXFxuICAgICAgICBzY2FsZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXNjYWxlLCAxKSk7XFxuICAgIH1cXG4gIH1cXG5cXG4gIEBrZXlmcmFtZXMgbWRjLXJpcHBsZS1mZy1vcGFjaXR5LWluIHtcXG4gICAgZnJvbSB7XFxuICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogbGluZWFyO1xcbiAgICAgIG9wYWNpdHk6IDA7XFxuICAgIH1cXG5cXG4gICAgdG8ge1xcbiAgICAgIG9wYWNpdHk6IHZhcigtLW1kYy1yaXBwbGUtZmctb3BhY2l0eSwgMCk7XFxuICAgIH1cXG4gIH1cXG5cXG4gIEBrZXlmcmFtZXMgbWRjLXJpcHBsZS1mZy1vcGFjaXR5LW91dCB7XFxuICAgIGZyb20ge1xcbiAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGxpbmVhcjtcXG4gICAgICBvcGFjaXR5OiB2YXIoLS1tZGMtcmlwcGxlLWZnLW9wYWNpdHksIDApO1xcbiAgICB9XFxuXFxuICAgIHRvIHtcXG4gICAgICBvcGFjaXR5OiAwO1xcbiAgICB9XFxuICB9XFxufVxcblwiLFwiLy9cXG4vLyBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxcbi8vXFxuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFxcXCJTb2Z0d2FyZVxcXCIpLCB0byBkZWFsXFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxcbi8vXFxuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cXG4vL1xcbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcXFwiQVMgSVNcXFwiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXFxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXFxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxcbi8vIFRIRSBTT0ZUV0FSRS5cXG4vL1xcblxcbiRkZWNlbGVyYXRpb24tY3VydmUtdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMCwgMCwgMC4yLCAxKSAhZGVmYXVsdDtcXG4kc3RhbmRhcmQtY3VydmUtdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpICFkZWZhdWx0O1xcbiRhY2NlbGVyYXRpb24tY3VydmUtdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC40LCAwLCAxLCAxKSAhZGVmYXVsdDtcXG4kc2hhcnAtY3VydmUtdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjYsIDEpICFkZWZhdWx0O1xcblwiLFwiLy9cXG4vLyBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLlxcbi8vXFxuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFxcXCJTb2Z0d2FyZVxcXCIpLCB0byBkZWFsXFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxcbi8vXFxuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cXG4vL1xcbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcXFwiQVMgSVNcXFwiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXFxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXFxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxcbi8vIFRIRSBTT0ZUV0FSRS5cXG4vL1xcblxcbkB1c2UgXFxcInNhc3M6Y29sb3JcXFwiO1xcbkB1c2UgXFxcInNhc3M6bWFwXFxcIjtcXG5AdXNlIFxcXCJAbWF0ZXJpYWwvYW5pbWF0aW9uL2Z1bmN0aW9uc1xcXCIgYXMgZnVuY3Rpb25zMjtcXG5AdXNlIFxcXCJAbWF0ZXJpYWwvYW5pbWF0aW9uL3ZhcmlhYmxlc1xcXCIgYXMgdmFyaWFibGVzMjtcXG5AdXNlIFxcXCJAbWF0ZXJpYWwvYmFzZS9taXhpbnNcXFwiIGFzIGJhc2UtbWl4aW5zO1xcbkB1c2UgXFxcIkBtYXRlcmlhbC9mZWF0dXJlLXRhcmdldGluZy9mdW5jdGlvbnNcXFwiIGFzIGZlYXR1cmUtdGFyZ2V0aW5nLWZ1bmN0aW9ucztcXG5AdXNlIFxcXCJAbWF0ZXJpYWwvZmVhdHVyZS10YXJnZXRpbmcvbWl4aW5zXFxcIiBhcyBmZWF0dXJlLXRhcmdldGluZy1taXhpbnM7XFxuQHVzZSBcXFwiQG1hdGVyaWFsL3RoZW1lL21peGluc1xcXCIgYXMgdGhlbWUtbWl4aW5zO1xcbkB1c2UgXFxcIi4vZnVuY3Rpb25zXFxcIjtcXG5AdXNlIFxcXCIuL2tleWZyYW1lc1xcXCI7XFxuQHVzZSBcXFwiLi92YXJpYWJsZXNcXFwiO1xcbkB1c2UgXFxcIkBtYXRlcmlhbC90aGVtZS92YXJpYWJsZXNcXFwiIGFzIHRoZW1lLXZhcmlhYmxlcztcXG5cXG5AbWl4aW4gY29yZS1zdHlsZXMoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy1mdW5jdGlvbnMuYWxsKCkpIHtcXG4gIC8vIHBvc3Rjc3MtYmVtLWxpbnRlcjogZGVmaW5lIHJpcHBsZS1zdXJmYWNlXFxuXFxuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLWZ1bmN0aW9ucy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcXG5cXG4gIC5tZGMtcmlwcGxlLXN1cmZhY2Uge1xcbiAgICBAaW5jbHVkZSBzdXJmYWNlKCRxdWVyeTogJHF1ZXJ5KTtcXG4gICAgQGluY2x1ZGUgc3RhdGVzKCRxdWVyeTogJHF1ZXJ5KTtcXG4gICAgQGluY2x1ZGUgcmFkaXVzLWJvdW5kZWQoJHF1ZXJ5OiAkcXVlcnkpO1xcblxcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy1taXhpbnMudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgb3V0bGluZTogbm9uZTtcXG4gICAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICB9XFxuXFxuICAgICZbZGF0YS1tZGMtcmlwcGxlLWlzLXVuYm91bmRlZF0ge1xcbiAgICAgIEBpbmNsdWRlIHJhZGl1cy11bmJvdW5kZWQoJHF1ZXJ5OiAkcXVlcnkpO1xcblxcbiAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xcbiAgICAgICAgb3ZlcmZsb3c6IHZpc2libGU7XFxuICAgICAgfVxcbiAgICB9XFxuXFxuICAgICYtLXByaW1hcnkge1xcbiAgICAgIEBpbmNsdWRlIHN0YXRlcyhwcmltYXJ5LCAkcXVlcnk6ICRxdWVyeSk7XFxuICAgIH1cXG5cXG4gICAgJi0tYWNjZW50IHtcXG4gICAgICBAaW5jbHVkZSBzdGF0ZXMoc2Vjb25kYXJ5LCAkcXVlcnk6ICRxdWVyeSk7XFxuICAgIH1cXG4gIH1cXG5cXG4gIC8vIHBvc3Rjc3MtYmVtLWxpbnRlcjogZW5kXFxufVxcblxcbkBtaXhpbiBjb21tb24oJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy1mdW5jdGlvbnMuYWxsKCkpIHtcXG4gICRmZWF0LWFuaW1hdGlvbjogZmVhdHVyZS10YXJnZXRpbmctZnVuY3Rpb25zLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBhbmltYXRpb24pO1xcblxcbiAgLy8gRW5zdXJlIHRoYXQgc3R5bGVzIG5lZWRlZCBieSBhbnkgY29tcG9uZW50IHVzaW5nIE1EQyBSaXBwbGUgYXJlIGVtaXR0ZWQsIGJ1dCBvbmx5IG9uY2UuXFxuICAvLyAoRXZlcnkgY29tcG9uZW50IHVzaW5nIE1EQyBSaXBwbGUgaW1wb3J0cyB0aGVzZSBtaXhpbnMsIGJ1dCBkb2Vzbid0IG5lY2Vzc2FyaWx5IGltcG9ydFxcbiAgLy8gbWRjLXJpcHBsZS5zY3NzLilcXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LWFuaW1hdGlvbikge1xcbiAgICBAaW5jbHVkZSBiYXNlLW1peGlucy5lbWl0LW9uY2UoJ21kYy1yaXBwbGUvY29tbW9uL2FuaW1hdGlvbicpIHtcXG4gICAgICBAaW5jbHVkZSBrZXlmcmFtZXMua2V5ZnJhbWVzXztcXG4gICAgfVxcbiAgfVxcbn1cXG5cXG5AbWl4aW4gc3VyZmFjZSgkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLWZ1bmN0aW9ucy5hbGwoKSwgJHJpcHBsZS10YXJnZXQ6ICcmJykge1xcbiAgJGZlYXQtYW5pbWF0aW9uOiBmZWF0dXJlLXRhcmdldGluZy1mdW5jdGlvbnMuY3JlYXRlLXRhcmdldCgkcXVlcnksIGFuaW1hdGlvbik7XFxuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLWZ1bmN0aW9ucy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcXG5cXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xcbiAgICAtLW1kYy1yaXBwbGUtZmctc2l6ZTogMDtcXG4gICAgLS1tZGMtcmlwcGxlLWxlZnQ6IDA7XFxuICAgIC0tbWRjLXJpcHBsZS10b3A6IDA7XFxuICAgIC0tbWRjLXJpcHBsZS1mZy1zY2FsZTogMTtcXG4gICAgLS1tZGMtcmlwcGxlLWZnLXRyYW5zbGF0ZS1lbmQ6IDA7XFxuICAgIC0tbWRjLXJpcHBsZS1mZy10cmFuc2xhdGUtc3RhcnQ6IDA7XFxuXFxuICAgIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwKTtcXG4gICAgLy8gISFETyBOT1QgUkVNT1ZFISEgbWRjLXJpcHBsZS13aWxsLWNoYW5nZS1yZXBsYWNlclxcbiAgfVxcblxcbiAgI3skcmlwcGxlLXRhcmdldH06OmJlZm9yZSxcXG4gICN7JHJpcHBsZS10YXJnZXR9OjphZnRlciB7XFxuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICAgICAgb3BhY2l0eTogMDtcXG4gICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gICAgICBjb250ZW50OiAnJztcXG4gICAgfVxcbiAgfVxcblxcbiAgI3skcmlwcGxlLXRhcmdldH06OmJlZm9yZSB7XFxuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LWFuaW1hdGlvbikge1xcbiAgICAgIC8vIEFsc28gdHJhbnNpdGlvbiBiYWNrZ3JvdW5kLWNvbG9yIHRvIGF2b2lkIHVubmF0dXJhbCBjb2xvciBmbGFzaGVzIHdoZW4gdG9nZ2xpbmcgYWN0aXZhdGVkL3NlbGVjdGVkIHN0YXRlXFxuICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSB2YXJpYWJsZXMuJHN0YXRlcy13YXNoLWR1cmF0aW9uIGxpbmVhcixcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3IgdmFyaWFibGVzLiRzdGF0ZXMtd2FzaC1kdXJhdGlvbiBsaW5lYXI7XFxuICAgIH1cXG5cXG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmctbWl4aW5zLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XFxuICAgICAgei1pbmRleDogMTsgLy8gRW5zdXJlIHRoYXQgdGhlIHJpcHBsZSB3YXNoIGZvciBob3Zlci9mb2N1cyBzdGF0ZXMgaXMgZGlzcGxheWVkIG9uIHRvcCBvZiBwb3NpdGlvbmVkIGNoaWxkIGVsZW1lbnRzXFxuICAgIH1cXG4gIH1cXG5cXG4gIC8vIENvbW1vbiBzdHlsZXMgZm9yIHVwZ3JhZGVkIHN1cmZhY2VzIChzb21lIG9mIHRoZXNlIGRlcGVuZCBvbiBjdXN0b20gcHJvcGVydGllcyBzZXQgdmlhIEpTIG9yIG90aGVyIG1peGlucylcXG5cXG4gICYubWRjLXJpcHBsZS11cGdyYWRlZCB7XFxuICAgICN7JHJpcHBsZS10YXJnZXR9OjpiZWZvcmUge1xcbiAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xcbiAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXNjYWxlLCAxKSk7XFxuICAgICAgfVxcbiAgICB9XFxuXFxuICAgICN7JHJpcHBsZS10YXJnZXR9OjphZnRlciB7XFxuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmctbWl4aW5zLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XFxuICAgICAgICB0b3A6IDA7XFxuICAgICAgICAvKiBAbm9mbGlwICovXFxuICAgICAgICBsZWZ0OiAwO1xcbiAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwKTtcXG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciBjZW50ZXI7XFxuICAgICAgfVxcbiAgICB9XFxuICB9XFxuXFxuICAmLm1kYy1yaXBwbGUtdXBncmFkZWQtLXVuYm91bmRlZCB7XFxuICAgICN7JHJpcHBsZS10YXJnZXR9OjphZnRlciB7XFxuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmctbWl4aW5zLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XFxuICAgICAgICB0b3A6IHZhcigtLW1kYy1yaXBwbGUtdG9wLCAwKTtcXG4gICAgICAgIC8qIEBub2ZsaXAgKi9cXG4gICAgICAgIGxlZnQ6IHZhcigtLW1kYy1yaXBwbGUtbGVmdCwgMCk7XFxuICAgICAgfVxcbiAgICB9XFxuICB9XFxuXFxuICAmLm1kYy1yaXBwbGUtdXBncmFkZWQtLWZvcmVncm91bmQtYWN0aXZhdGlvbiB7XFxuICAgICN7JHJpcHBsZS10YXJnZXR9OjphZnRlciB7XFxuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmctbWl4aW5zLnRhcmdldHMoJGZlYXQtYW5pbWF0aW9uKSB7XFxuICAgICAgICBhbmltYXRpb246IG1kYy1yaXBwbGUtZmctcmFkaXVzLWluIHZhcmlhYmxlcy4kdHJhbnNsYXRlLWR1cmF0aW9uXFxuICAgICAgICAgICAgZm9yd2FyZHMsXFxuICAgICAgICAgIG1kYy1yaXBwbGUtZmctb3BhY2l0eS1pbiB2YXJpYWJsZXMuJGZhZGUtaW4tZHVyYXRpb24gZm9yd2FyZHM7XFxuICAgICAgfVxcbiAgICB9XFxuICB9XFxuXFxuICAmLm1kYy1yaXBwbGUtdXBncmFkZWQtLWZvcmVncm91bmQtZGVhY3RpdmF0aW9uIHtcXG4gICAgI3skcmlwcGxlLXRhcmdldH06OmFmdGVyIHtcXG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy1taXhpbnMudGFyZ2V0cygkZmVhdC1hbmltYXRpb24pIHtcXG4gICAgICAgIGFuaW1hdGlvbjogbWRjLXJpcHBsZS1mZy1vcGFjaXR5LW91dCB2YXJpYWJsZXMuJGZhZGUtb3V0LWR1cmF0aW9uO1xcbiAgICAgIH1cXG5cXG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy1taXhpbnMudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcXG4gICAgICAgIC8vIFJldGFpbiB0cmFuc2Zvcm0gZnJvbSBtZGMtcmlwcGxlLWZnLXJhZGl1cy1pbiBhY3RpdmF0aW9uXFxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXRyYW5zbGF0ZS1lbmQsIDApKVxcbiAgICAgICAgICBzY2FsZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXNjYWxlLCAxKSk7XFxuICAgICAgfVxcbiAgICB9XFxuICB9XFxufVxcblxcbkBtaXhpbiBzdGF0ZXMtYmFzZS1jb2xvcihcXG4gICRjb2xvcixcXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmctZnVuY3Rpb25zLmFsbCgpLFxcbiAgJHJpcHBsZS10YXJnZXQ6ICcmJ1xcbikge1xcbiAgJGZlYXQtY29sb3I6IGZlYXR1cmUtdGFyZ2V0aW5nLWZ1bmN0aW9ucy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgY29sb3IpO1xcblxcbiAgI3skcmlwcGxlLXRhcmdldH06OmJlZm9yZSxcXG4gICN7JHJpcHBsZS10YXJnZXR9OjphZnRlciB7XFxuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LWNvbG9yKSB7XFxuICAgICAgQGlmIGNvbG9yLmFscGhhKHRoZW1lLXZhcmlhYmxlcy5wcm9wLXZhbHVlKCRjb2xvcikpID4gMCB7XFxuICAgICAgICBAaW5jbHVkZSB0aGVtZS1taXhpbnMucHJvcChiYWNrZ3JvdW5kLWNvbG9yLCAkY29sb3IpO1xcbiAgICAgIH0gQGVsc2Uge1xcbiAgICAgICAgLy8gSWYgYSBjb2xvciB3aXRoIDAgYWxwaGEgaXMgc3BlY2lmaWVkLCBkb24ndCByZW5kZXIgdGhlIHJpcHBsZSBwc2V1ZG8tZWxlbWVudHMgYXQgYWxsLlxcbiAgICAgICAgLy8gVGhpcyBhdm9pZHMgdW5uZWNlc3NhcnkgdHJhbnNpdGlvbnMgYW5kIG92ZXJmbG93LlxcbiAgICAgICAgY29udGVudDogbm9uZTtcXG4gICAgICB9XFxuICAgIH1cXG4gIH1cXG59XFxuXFxuLy8vXFxuLy8vIEN1c3RvbWl6ZXMgcmlwcGxlIG9wYWNpdGllcyBpbiBgaG92ZXJgLCBgZm9jdXNgLCBvciBgcHJlc3NgIHN0YXRlc1xcbi8vLyBAcGFyYW0ge21hcH0gJG9wYWNpdHktbWFwIC0gbWFwIHNwZWNpZnlpbmcgY3VzdG9tIG9wYWNpdHkgb2YgemVybyBvciBtb3JlIHN0YXRlc1xcbi8vLyBAcGFyYW0ge2Jvb2x9ICRoYXMtbmVzdGVkLWZvY3VzYWJsZS1lbGVtZW50IC0gd2hldGhlciB0aGUgY29tcG9uZW50IGNvbnRhaW5zIGEgZm9jdXNhYmxlIGVsZW1lbnQgaW4gdGhlIHJvb3RcXG4vLy8gQHBhcmFtIHtzdHJpbmd9ICRyaXBwbGUtdGFyZ2V0IC0gdGhlIG9wdGlvbmFsIHNlbGVjdG9yIGZvciB0aGUgcmlwcGxlIGVsZW1lbnRcXG4vLy9cXG5AbWl4aW4gc3RhdGVzLW9wYWNpdGllcyhcXG4gICRvcGFjaXR5LW1hcDogKCksXFxuICAkaGFzLW5lc3RlZC1mb2N1c2FibGUtZWxlbWVudDogZmFsc2UsXFxuICAkcmlwcGxlLXRhcmdldDogJyYnLFxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy1mdW5jdGlvbnMuYWxsKClcXG4pIHtcXG4gIC8vIEVuc3VyZSBzdWZmaWNpZW50IHNwZWNpZmljaXR5IHRvIG92ZXJyaWRlIGJhc2Ugc3RhdGUgb3BhY2l0aWVzXFxuICBAaWYgbWFwLmhhcy1rZXkoJG9wYWNpdHktbWFwLCBob3Zlcikge1xcbiAgICBAaW5jbHVkZSBzdGF0ZXMtaG92ZXItb3BhY2l0eShcXG4gICAgICBtYXAuZ2V0KCRvcGFjaXR5LW1hcCwgaG92ZXIpLFxcbiAgICAgICRyaXBwbGUtdGFyZ2V0OiAkcmlwcGxlLXRhcmdldCxcXG4gICAgICAkcXVlcnk6ICRxdWVyeVxcbiAgICApO1xcbiAgfVxcblxcbiAgQGlmIG1hcC5oYXMta2V5KCRvcGFjaXR5LW1hcCwgZm9jdXMpIHtcXG4gICAgQGluY2x1ZGUgc3RhdGVzLWZvY3VzLW9wYWNpdHkoXFxuICAgICAgbWFwLmdldCgkb3BhY2l0eS1tYXAsIGZvY3VzKSxcXG4gICAgICAkcmlwcGxlLXRhcmdldDogJHJpcHBsZS10YXJnZXQsXFxuICAgICAgJGhhcy1uZXN0ZWQtZm9jdXNhYmxlLWVsZW1lbnQ6ICRoYXMtbmVzdGVkLWZvY3VzYWJsZS1lbGVtZW50LFxcbiAgICAgICRxdWVyeTogJHF1ZXJ5XFxuICAgICk7XFxuICB9XFxuXFxuICBAaWYgbWFwLmhhcy1rZXkoJG9wYWNpdHktbWFwLCBwcmVzcykge1xcbiAgICBAaW5jbHVkZSBzdGF0ZXMtcHJlc3Mtb3BhY2l0eShcXG4gICAgICBtYXAuZ2V0KCRvcGFjaXR5LW1hcCwgcHJlc3MpLFxcbiAgICAgICRyaXBwbGUtdGFyZ2V0OiAkcmlwcGxlLXRhcmdldCxcXG4gICAgICAkcXVlcnk6ICRxdWVyeVxcbiAgICApO1xcbiAgfVxcbn1cXG5cXG5AbWl4aW4gc3RhdGVzLWhvdmVyLW9wYWNpdHkoXFxuICAkb3BhY2l0eSxcXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmctZnVuY3Rpb25zLmFsbCgpLFxcbiAgJHJpcHBsZS10YXJnZXQ6ICcmJ1xcbikge1xcbiAgJGZlYXQtY29sb3I6IGZlYXR1cmUtdGFyZ2V0aW5nLWZ1bmN0aW9ucy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgY29sb3IpO1xcblxcbiAgLy8gQmFja2dyb3VuZCB3YXNoIHN0eWxlcywgZm9yIGJvdGggQ1NTLW9ubHkgYW5kIHVwZ3JhZGVkIHN0YXRlZnVsIHN1cmZhY2VzXFxuICAmOmhvdmVyIHtcXG4gICAgI3skcmlwcGxlLXRhcmdldH06OmJlZm9yZSB7XFxuICAgICAgLy8gT3BhY2l0eSBmYWxscyB1bmRlciBjb2xvciBiZWNhdXNlIHRoZSBjaG9zZW4gb3BhY2l0eSBpcyBjb2xvci1kZXBlbmRlbnQgaW4gdHlwaWNhbCB1c2FnZVxcbiAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LWNvbG9yKSB7XFxuICAgICAgICBvcGFjaXR5OiAkb3BhY2l0eTtcXG4gICAgICB9XFxuICAgIH1cXG4gIH1cXG59XFxuXFxuQG1peGluIHN0YXRlcy1mb2N1cy1vcGFjaXR5KFxcbiAgJG9wYWNpdHksXFxuICAkaGFzLW5lc3RlZC1mb2N1c2FibGUtZWxlbWVudDogZmFsc2UsXFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLWZ1bmN0aW9ucy5hbGwoKSxcXG4gICRyaXBwbGUtdGFyZ2V0OiAnJidcXG4pIHtcXG4gIC8vIEZvY3VzIG92ZXJyaWRlcyBob3ZlciBieSByZXVzaW5nIHRoZSA6OmJlZm9yZSBwc2V1ZG8tZWxlbWVudC5cXG4gIC8vIDpmb2N1cy13aXRoaW4gZ2VuZXJhbGx5IHdvcmtzIG9uIG5vbi1NUyBicm93c2VycyBhbmQgbWF0Y2hlcyB3aGVuIGEgKmNoaWxkKiBvZiB0aGUgZWxlbWVudCBoYXMgZm9jdXMuXFxuICAvLyBJdCBpcyB1c2VmdWwgZm9yIGNhc2VzIHdoZXJlIGEgY29tcG9uZW50IGhhcyBhIGZvY3VzYWJsZSBlbGVtZW50IHdpdGhpbiB0aGUgcm9vdCBub2RlLCBlLmcuIHRleHQgZmllbGQsXFxuICAvLyBidXQgdW5kZXNpcmFibGUgaW4gZ2VuZXJhbCBpbiBjYXNlIG9mIG5lc3RlZCBzdGF0ZWZ1bCBjb21wb25lbnRzLlxcbiAgLy8gV2UgdXNlIGEgbW9kaWZpZXIgY2xhc3MgZm9yIEpTLWVuYWJsZWQgc3VyZmFjZXMgdG8gc3VwcG9ydCBhbGwgdXNlIGNhc2VzIGluIGFsbCBicm93c2Vycy5cXG4gIEBpZiAkaGFzLW5lc3RlZC1mb2N1c2FibGUtZWxlbWVudCB7XFxuICAgIC8vIEpTLWVuYWJsZWQgc2VsZWN0b3JzLlxcbiAgICAmLm1kYy1yaXBwbGUtdXBncmFkZWQtLWJhY2tncm91bmQtZm9jdXNlZCxcXG4gICAgJi5tZGMtcmlwcGxlLXVwZ3JhZGVkOmZvY3VzLXdpdGhpbixcXG4gICAgLy8gQ1NTLW9ubHkgc2VsZWN0b3JzLlxcbiAgICAmOm5vdCgubWRjLXJpcHBsZS11cGdyYWRlZCk6Zm9jdXMsXFxuICAgICY6bm90KC5tZGMtcmlwcGxlLXVwZ3JhZGVkKTpmb2N1cy13aXRoaW4ge1xcbiAgICAgICN7JHJpcHBsZS10YXJnZXR9OjpiZWZvcmUge1xcbiAgICAgICAgQGluY2x1ZGUgc3RhdGVzLWZvY3VzLW9wYWNpdHktcHJvcGVydGllc18oXFxuICAgICAgICAgICRvcGFjaXR5OiAkb3BhY2l0eSxcXG4gICAgICAgICAgJHF1ZXJ5OiAkcXVlcnlcXG4gICAgICAgICk7XFxuICAgICAgfVxcbiAgICB9XFxuICB9IEBlbHNlIHtcXG4gICAgLy8gSlMtZW5hYmxlZCBzZWxlY3RvcnMuXFxuICAgICYubWRjLXJpcHBsZS11cGdyYWRlZC0tYmFja2dyb3VuZC1mb2N1c2VkLFxcbiAgICAvLyBDU1Mtb25seSBzZWxlY3RvcnMuXFxuICAgICY6bm90KC5tZGMtcmlwcGxlLXVwZ3JhZGVkKTpmb2N1cyB7XFxuICAgICAgI3skcmlwcGxlLXRhcmdldH06OmJlZm9yZSB7XFxuICAgICAgICBAaW5jbHVkZSBzdGF0ZXMtZm9jdXMtb3BhY2l0eS1wcm9wZXJ0aWVzXyhcXG4gICAgICAgICAgJG9wYWNpdHk6ICRvcGFjaXR5LFxcbiAgICAgICAgICAkcXVlcnk6ICRxdWVyeVxcbiAgICAgICAgKTtcXG4gICAgICB9XFxuICAgIH1cXG4gIH1cXG59XFxuXFxuQG1peGluIHN0YXRlcy1mb2N1cy1vcGFjaXR5LXByb3BlcnRpZXNfKCRvcGFjaXR5LCAkcXVlcnkpIHtcXG4gICRmZWF0LWFuaW1hdGlvbjogZmVhdHVyZS10YXJnZXRpbmctZnVuY3Rpb25zLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBhbmltYXRpb24pO1xcbiAgLy8gT3BhY2l0eSBmYWxscyB1bmRlciBjb2xvciBiZWNhdXNlIHRoZSBjaG9zZW4gb3BhY2l0eSBpcyBjb2xvci1kZXBlbmRlbnQgaW4gdHlwaWNhbCB1c2FnZVxcbiAgJGZlYXQtY29sb3I6IGZlYXR1cmUtdGFyZ2V0aW5nLWZ1bmN0aW9ucy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgY29sb3IpO1xcblxcbiAgLy8gTm90ZSB0aGF0IHRoaXMgZHVyYXRpb24gaXMgb25seSBlZmZlY3RpdmUgb24gZm9jdXMsIG5vdCBibHVyXFxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy1taXhpbnMudGFyZ2V0cygkZmVhdC1hbmltYXRpb24pIHtcXG4gICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogNzVtcztcXG4gIH1cXG5cXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LWNvbG9yKSB7XFxuICAgIG9wYWNpdHk6ICRvcGFjaXR5O1xcbiAgfVxcbn1cXG5cXG5AbWl4aW4gc3RhdGVzLXByZXNzLW9wYWNpdHkoXFxuICAkb3BhY2l0eSxcXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmctZnVuY3Rpb25zLmFsbCgpLFxcbiAgJHJpcHBsZS10YXJnZXQ6ICcmJ1xcbikge1xcbiAgJGZlYXQtYW5pbWF0aW9uOiBmZWF0dXJlLXRhcmdldGluZy1mdW5jdGlvbnMuY3JlYXRlLXRhcmdldCgkcXVlcnksIGFuaW1hdGlvbik7XFxuICAkZmVhdC1jb2xvcjogZmVhdHVyZS10YXJnZXRpbmctZnVuY3Rpb25zLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBjb2xvcik7XFxuXFxuICAvLyBTdHlsZXMgZm9yIG5vbi11cGdyYWRlZCAoQ1NTLW9ubHkpIHN0YXRlZnVsIHN1cmZhY2VzXFxuXFxuICAmOm5vdCgubWRjLXJpcHBsZS11cGdyYWRlZCkge1xcbiAgICAvLyBBcHBseSBwcmVzcyBhZGRpdGl2ZWx5IGJ5IHVzaW5nIHRoZSA6OmFmdGVyIHBzZXVkby1lbGVtZW50XFxuICAgICN7JHJpcHBsZS10YXJnZXR9OjphZnRlciB7XFxuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmctbWl4aW5zLnRhcmdldHMoJGZlYXQtYW5pbWF0aW9uKSB7XFxuICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IHZhcmlhYmxlcy4kZmFkZS1vdXQtZHVyYXRpb24gbGluZWFyO1xcbiAgICAgIH1cXG4gICAgfVxcblxcbiAgICAmOmFjdGl2ZSB7XFxuICAgICAgI3skcmlwcGxlLXRhcmdldH06OmFmdGVyIHtcXG4gICAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LWFuaW1hdGlvbikge1xcbiAgICAgICAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiB2YXJpYWJsZXMuJGZhZGUtaW4tZHVyYXRpb247XFxuICAgICAgICB9XFxuXFxuICAgICAgICAvLyBPcGFjaXR5IGZhbGxzIHVuZGVyIGNvbG9yIGJlY2F1c2UgdGhlIGNob3NlbiBvcGFjaXR5IGlzIGNvbG9yLWRlcGVuZGVudCBpbiB0eXBpY2FsIHVzYWdlXFxuICAgICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy1taXhpbnMudGFyZ2V0cygkZmVhdC1jb2xvcikge1xcbiAgICAgICAgICBvcGFjaXR5OiAkb3BhY2l0eTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH1cXG4gIH1cXG5cXG4gICYubWRjLXJpcHBsZS11cGdyYWRlZCB7XFxuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LWNvbG9yKSB7XFxuICAgICAgLS1tZGMtcmlwcGxlLWZnLW9wYWNpdHk6ICN7JG9wYWNpdHl9O1xcbiAgICB9XFxuICB9XFxufVxcblxcbi8vIFNpbXBsZSBtaXhpbiBmb3IgYmFzZSBzdGF0ZXMgd2hpY2ggYXV0b21hdGljYWxseSBzZWxlY3RzIG9wYWNpdHkgdmFsdWVzIGJhc2VkIG9uIHdoZXRoZXIgdGhlIGluayBjb2xvciBpc1xcbi8vIGxpZ2h0IG9yIGRhcmsuXFxuQG1peGluIHN0YXRlcyhcXG4gICRjb2xvcjogdGhlbWUtdmFyaWFibGVzLnByb3AtdmFsdWUob24tc3VyZmFjZSksXFxuICAkaGFzLW5lc3RlZC1mb2N1c2FibGUtZWxlbWVudDogZmFsc2UsXFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLWZ1bmN0aW9ucy5hbGwoKSxcXG4gICRyaXBwbGUtdGFyZ2V0OiAnJidcXG4pIHtcXG4gIEBpbmNsdWRlIHN0YXRlcy1pbnRlcmFjdGlvbnNfKFxcbiAgICAkY29sb3I6ICRjb2xvcixcXG4gICAgJGhhcy1uZXN0ZWQtZm9jdXNhYmxlLWVsZW1lbnQ6ICRoYXMtbmVzdGVkLWZvY3VzYWJsZS1lbGVtZW50LFxcbiAgICAkcXVlcnk6ICRxdWVyeSxcXG4gICAgJHJpcHBsZS10YXJnZXQ6ICRyaXBwbGUtdGFyZ2V0XFxuICApO1xcbn1cXG5cXG4vLyBTaW1wbGUgbWl4aW4gZm9yIGFjdGl2YXRlZCBzdGF0ZXMgd2hpY2ggYXV0b21hdGljYWxseSBzZWxlY3RzIG9wYWNpdHkgdmFsdWVzIGJhc2VkIG9uIHdoZXRoZXIgdGhlIGluayBjb2xvciBpc1xcbi8vIGxpZ2h0IG9yIGRhcmsuXFxuQG1peGluIHN0YXRlcy1hY3RpdmF0ZWQoXFxuICAkY29sb3IsXFxuICAkaGFzLW5lc3RlZC1mb2N1c2FibGUtZWxlbWVudDogZmFsc2UsXFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLWZ1bmN0aW9ucy5hbGwoKSxcXG4gICRyaXBwbGUtdGFyZ2V0OiAnJidcXG4pIHtcXG4gICRmZWF0LWNvbG9yOiBmZWF0dXJlLXRhcmdldGluZy1mdW5jdGlvbnMuY3JlYXRlLXRhcmdldCgkcXVlcnksIGNvbG9yKTtcXG4gICRhY3RpdmF0ZWQtb3BhY2l0eTogZnVuY3Rpb25zLnN0YXRlcy1vcGFjaXR5KCRjb2xvciwgYWN0aXZhdGVkKTtcXG5cXG4gICYtLWFjdGl2YXRlZCB7XFxuICAgIC8vIFN0eWxlbGludCBzZWVtcyB0byB0aGluayB0aGF0ICcmJyBxdWFsaWZpZXMgYXMgYSB0eXBlIHNlbGVjdG9yIGhlcmU/XFxuICAgIC8vIHN0eWxlbGludC1kaXNhYmxlLW5leHQtbGluZSBzZWxlY3Rvci1tYXgtdHlwZVxcbiAgICAjeyRyaXBwbGUtdGFyZ2V0fTo6YmVmb3JlIHtcXG4gICAgICAvLyBPcGFjaXR5IGZhbGxzIHVuZGVyIGNvbG9yIGJlY2F1c2UgdGhlIGNob3NlbiBvcGFjaXR5IGlzIGNvbG9yLWRlcGVuZGVudC5cXG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy1taXhpbnMudGFyZ2V0cygkZmVhdC1jb2xvcikge1xcbiAgICAgICAgb3BhY2l0eTogJGFjdGl2YXRlZC1vcGFjaXR5O1xcbiAgICAgIH1cXG4gICAgfVxcblxcbiAgICBAaW5jbHVkZSBzdGF0ZXMtaW50ZXJhY3Rpb25zXyhcXG4gICAgICAkY29sb3I6ICRjb2xvcixcXG4gICAgICAkaGFzLW5lc3RlZC1mb2N1c2FibGUtZWxlbWVudDogJGhhcy1uZXN0ZWQtZm9jdXNhYmxlLWVsZW1lbnQsXFxuICAgICAgJG9wYWNpdHktbW9kaWZpZXI6ICRhY3RpdmF0ZWQtb3BhY2l0eSxcXG4gICAgICAkcXVlcnk6ICRxdWVyeSxcXG4gICAgICAkcmlwcGxlLXRhcmdldDogJHJpcHBsZS10YXJnZXRcXG4gICAgKTtcXG4gIH1cXG59XFxuXFxuLy8gU2ltcGxlIG1peGluIGZvciBzZWxlY3RlZCBzdGF0ZXMgd2hpY2ggYXV0b21hdGljYWxseSBzZWxlY3RzIG9wYWNpdHkgdmFsdWVzIGJhc2VkIG9uIHdoZXRoZXIgdGhlIGluayBjb2xvciBpc1xcbi8vIGxpZ2h0IG9yIGRhcmsuXFxuQG1peGluIHN0YXRlcy1zZWxlY3RlZChcXG4gICRjb2xvcixcXG4gICRoYXMtbmVzdGVkLWZvY3VzYWJsZS1lbGVtZW50OiBmYWxzZSxcXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmctZnVuY3Rpb25zLmFsbCgpLFxcbiAgJHJpcHBsZS10YXJnZXQ6ICcmJ1xcbikge1xcbiAgJGZlYXQtY29sb3I6IGZlYXR1cmUtdGFyZ2V0aW5nLWZ1bmN0aW9ucy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgY29sb3IpO1xcbiAgJHNlbGVjdGVkLW9wYWNpdHk6IGZ1bmN0aW9ucy5zdGF0ZXMtb3BhY2l0eSgkY29sb3IsIHNlbGVjdGVkKTtcXG5cXG4gICYtLXNlbGVjdGVkIHtcXG4gICAgLy8gc3R5bGVsaW50LWRpc2FibGUtbmV4dC1saW5lIHNlbGVjdG9yLW1heC10eXBlXFxuICAgICN7JHJpcHBsZS10YXJnZXR9OjpiZWZvcmUge1xcbiAgICAgIC8vIE9wYWNpdHkgZmFsbHMgdW5kZXIgY29sb3IgYmVjYXVzZSB0aGUgY2hvc2VuIG9wYWNpdHkgaXMgY29sb3ItZGVwZW5kZW50LlxcbiAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLW1peGlucy50YXJnZXRzKCRmZWF0LWNvbG9yKSB7XFxuICAgICAgICBvcGFjaXR5OiAkc2VsZWN0ZWQtb3BhY2l0eTtcXG4gICAgICB9XFxuICAgIH1cXG5cXG4gICAgQGluY2x1ZGUgc3RhdGVzLWludGVyYWN0aW9uc18oXFxuICAgICAgJGNvbG9yOiAkY29sb3IsXFxuICAgICAgJGhhcy1uZXN0ZWQtZm9jdXNhYmxlLWVsZW1lbnQ6ICRoYXMtbmVzdGVkLWZvY3VzYWJsZS1lbGVtZW50LFxcbiAgICAgICRvcGFjaXR5LW1vZGlmaWVyOiAkc2VsZWN0ZWQtb3BhY2l0eSxcXG4gICAgICAkcXVlcnk6ICRxdWVyeSxcXG4gICAgICAkcmlwcGxlLXRhcmdldDogJHJpcHBsZS10YXJnZXRcXG4gICAgKTtcXG4gIH1cXG59XFxuXFxuQG1peGluIHJhZGl1cy1ib3VuZGVkKFxcbiAgJHJhZGl1czogMTAwJSxcXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmctZnVuY3Rpb25zLmFsbCgpLFxcbiAgJHJpcHBsZS10YXJnZXQ6ICcmJ1xcbikge1xcbiAgJGZlYXQtc3RydXR1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLWZ1bmN0aW9ucy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcXG5cXG4gICN7JHJpcHBsZS10YXJnZXR9OjpiZWZvcmUsXFxuICAjeyRyaXBwbGUtdGFyZ2V0fTo6YWZ0ZXIge1xcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy1taXhpbnMudGFyZ2V0cygkZmVhdC1zdHJ1dHVyZSkge1xcbiAgICAgIHRvcDogY2FsYyg1MCUgLSAjeyRyYWRpdXN9KTtcXG4gICAgICAvKiBAbm9mbGlwICovXFxuICAgICAgbGVmdDogY2FsYyg1MCUgLSAjeyRyYWRpdXN9KTtcXG4gICAgICB3aWR0aDogJHJhZGl1cyAqIDI7XFxuICAgICAgaGVpZ2h0OiAkcmFkaXVzICogMjtcXG4gICAgfVxcbiAgfVxcblxcbiAgJi5tZGMtcmlwcGxlLXVwZ3JhZGVkIHtcXG4gICAgI3skcmlwcGxlLXRhcmdldH06OmFmdGVyIHtcXG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy1taXhpbnMudGFyZ2V0cygkZmVhdC1zdHJ1dHVyZSkge1xcbiAgICAgICAgd2lkdGg6IHZhcigtLW1kYy1yaXBwbGUtZmctc2l6ZSwgJHJhZGl1cyk7XFxuICAgICAgICBoZWlnaHQ6IHZhcigtLW1kYy1yaXBwbGUtZmctc2l6ZSwgJHJhZGl1cyk7XFxuICAgICAgfVxcbiAgICB9XFxuICB9XFxufVxcblxcbkBtaXhpbiByYWRpdXMtdW5ib3VuZGVkKFxcbiAgJHJhZGl1czogMTAwJSxcXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmctZnVuY3Rpb25zLmFsbCgpLFxcbiAgJHJpcHBsZS10YXJnZXQ6ICcmJ1xcbikge1xcbiAgJGZlYXQtc3RydXR1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLWZ1bmN0aW9ucy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcXG5cXG4gICN7JHJpcHBsZS10YXJnZXR9OjpiZWZvcmUsXFxuICAjeyRyaXBwbGUtdGFyZ2V0fTo6YWZ0ZXIge1xcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy1taXhpbnMudGFyZ2V0cygkZmVhdC1zdHJ1dHVyZSkge1xcbiAgICAgIHRvcDogY2FsYyg1MCUgLSAjeyRyYWRpdXMgLyAyfSk7XFxuICAgICAgLyogQG5vZmxpcCAqL1xcbiAgICAgIGxlZnQ6IGNhbGMoNTAlIC0gI3skcmFkaXVzIC8gMn0pO1xcbiAgICAgIHdpZHRoOiAkcmFkaXVzO1xcbiAgICAgIGhlaWdodDogJHJhZGl1cztcXG4gICAgfVxcbiAgfVxcblxcbiAgJi5tZGMtcmlwcGxlLXVwZ3JhZGVkIHtcXG4gICAgI3skcmlwcGxlLXRhcmdldH06OmJlZm9yZSxcXG4gICAgI3skcmlwcGxlLXRhcmdldH06OmFmdGVyIHtcXG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy1taXhpbnMudGFyZ2V0cygkZmVhdC1zdHJ1dHVyZSkge1xcbiAgICAgICAgdG9wOiB2YXIoLS1tZGMtcmlwcGxlLXRvcCwgY2FsYyg1MCUgLSAjeyRyYWRpdXMgLyAyfSkpO1xcbiAgICAgICAgLyogQG5vZmxpcCAqL1xcbiAgICAgICAgbGVmdDogdmFyKC0tbWRjLXJpcHBsZS1sZWZ0LCBjYWxjKDUwJSAtICN7JHJhZGl1cyAvIDJ9KSk7XFxuICAgICAgICB3aWR0aDogdmFyKC0tbWRjLXJpcHBsZS1mZy1zaXplLCAkcmFkaXVzKTtcXG4gICAgICAgIGhlaWdodDogdmFyKC0tbWRjLXJpcHBsZS1mZy1zaXplLCAkcmFkaXVzKTtcXG4gICAgICB9XFxuICAgIH1cXG5cXG4gICAgI3skcmlwcGxlLXRhcmdldH06OmFmdGVyIHtcXG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy1taXhpbnMudGFyZ2V0cygkZmVhdC1zdHJ1dHVyZSkge1xcbiAgICAgICAgd2lkdGg6IHZhcigtLW1kYy1yaXBwbGUtZmctc2l6ZSwgJHJhZGl1cyk7XFxuICAgICAgICBoZWlnaHQ6IHZhcigtLW1kYy1yaXBwbGUtZmctc2l6ZSwgJHJhZGl1cyk7XFxuICAgICAgfVxcbiAgICB9XFxuICB9XFxufVxcblxcbkBtaXhpbiBzdGF0ZXMtaW50ZXJhY3Rpb25zXyhcXG4gICRjb2xvcixcXG4gICRoYXMtbmVzdGVkLWZvY3VzYWJsZS1lbGVtZW50LFxcbiAgJG9wYWNpdHktbW9kaWZpZXI6IDAsXFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLWZ1bmN0aW9ucy5hbGwoKSxcXG4gICRyaXBwbGUtdGFyZ2V0OiAnJidcXG4pIHtcXG4gIEBpbmNsdWRlIHRhcmdldC1zZWxlY3RvcigkcmlwcGxlLXRhcmdldCkge1xcbiAgICBAaW5jbHVkZSBzdGF0ZXMtYmFzZS1jb2xvcigkY29sb3IsICRxdWVyeSk7XFxuICB9XFxuXFxuICAkb3BhY2l0eS1tYXA6IChcXG4gICAgaG92ZXI6IGZ1bmN0aW9ucy5zdGF0ZXMtb3BhY2l0eSgkY29sb3IsIGhvdmVyKSArICRvcGFjaXR5LW1vZGlmaWVyLFxcbiAgICBmb2N1czogZnVuY3Rpb25zLnN0YXRlcy1vcGFjaXR5KCRjb2xvciwgZm9jdXMpICsgJG9wYWNpdHktbW9kaWZpZXIsXFxuICAgIHByZXNzOiBmdW5jdGlvbnMuc3RhdGVzLW9wYWNpdHkoJGNvbG9yLCBwcmVzcykgKyAkb3BhY2l0eS1tb2RpZmllcixcXG4gICk7XFxuXFxuICBAaW5jbHVkZSBzdGF0ZXMtb3BhY2l0aWVzKFxcbiAgICAkb3BhY2l0eS1tYXAsXFxuICAgICRoYXMtbmVzdGVkLWZvY3VzYWJsZS1lbGVtZW50OiAkaGFzLW5lc3RlZC1mb2N1c2FibGUtZWxlbWVudCxcXG4gICAgJHJpcHBsZS10YXJnZXQ6ICRyaXBwbGUtdGFyZ2V0LFxcbiAgICAkcXVlcnk6ICRxdWVyeVxcbiAgKTtcXG59XFxuXFxuLy8gV3JhcHMgY29udGVudCBpbiB0aGUgYHJpcHBsZS10YXJnZXRgIHNlbGVjdG9yIGlmIGl0IGV4aXN0cy5cXG5AbWl4aW4gdGFyZ2V0LXNlbGVjdG9yKCRyaXBwbGUtdGFyZ2V0OiAnJicpIHtcXG4gIEBpZiAkcmlwcGxlLXRhcmdldCA9PSAnJicge1xcbiAgICBAY29udGVudDtcXG4gIH0gQGVsc2Uge1xcbiAgICAjeyRyaXBwbGUtdGFyZ2V0fSB7XFxuICAgICAgQGNvbnRlbnQ7XFxuICAgIH1cXG4gIH1cXG59XFxuXFxuLy8gQ29tbW9uIHN0eWxlcyBmb3IgYSByaXBwbGUgdGFyZ2V0IGVsZW1lbnQuXFxuLy8gVXNlZCBmb3IgY29tcG9uZW50cyB3aGljaCBoYXZlIGFuIGlubmVyIHJpcHBsZSB0YXJnZXQgZWxlbWVudC5cXG5AbWl4aW4gdGFyZ2V0LWNvbW1vbigkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLWZ1bmN0aW9ucy5hbGwoKSkge1xcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy1mdW5jdGlvbnMuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XFxuXFxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy1taXhpbnMudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB0b3A6IDA7XFxuICAgIGxlZnQ6IDA7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIC8vIE5lY2Vzc2FyeSBmb3IgY2xpY2tzIG9uIG90aGVyIGlubmVyIGVsZW1lbnRzIChlLmcuIGNsb3NlIGljb24gaW4gY2hpcClcXG4gICAgLy8gdG8gZ28gdGhyb3VnaC5cXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICB9XFxufVxcblwiLFwiLy9cXG4vLyBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLlxcbi8vXFxuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFxcXCJTb2Z0d2FyZVxcXCIpLCB0byBkZWFsXFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxcbi8vXFxuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cXG4vL1xcbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcXFwiQVMgSVNcXFwiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXFxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXFxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxcbi8vIFRIRSBTT0ZUV0FSRS5cXG4vL1xcblxcbiRmYWRlLWluLWR1cmF0aW9uOiA3NW1zICFkZWZhdWx0O1xcbiRmYWRlLW91dC1kdXJhdGlvbjogMTUwbXMgIWRlZmF1bHQ7XFxuJHRyYW5zbGF0ZS1kdXJhdGlvbjogMjI1bXMgIWRlZmF1bHQ7XFxuJHN0YXRlcy13YXNoLWR1cmF0aW9uOiAxNW1zICFkZWZhdWx0O1xcblxcbi8vIE5vdGVzIG9uIHN0YXRlczpcXG4vLyAqIGZvY3VzIHRha2VzIHByZWNlZGVuY2Ugb3ZlciBob3ZlciAoaS5lLiBpZiBhbiBlbGVtZW50IGlzIGJvdGggZm9jdXNlZCBhbmQgaG92ZXJlZCwgb25seSBmb2N1cyB2YWx1ZSBhcHBsaWVzKVxcbi8vICogcHJlc3Mgc3RhdGUgYXBwbGllcyB0byBhIHNlcGFyYXRlIHBzZXVkby1lbGVtZW50LCBzbyBpdCBoYXMgYW4gYWRkaXRpdmUgZWZmZWN0IG9uIHRvcCBvZiBvdGhlciBzdGF0ZXNcXG4vLyAqIHNlbGVjdGVkL2FjdGl2YXRlZCBhcmUgYXBwbGllZCBhZGRpdGl2ZWx5IHRvIGhvdmVyL2ZvY3VzIHZpYSBjYWxjdWxhdGlvbnMgYXQgcHJlcHJvY2Vzc2luZyB0aW1lXFxuXFxuJGRhcmstaW5rLW9wYWNpdGllczogKFxcbiAgaG92ZXI6IDAuMDQsXFxuICBmb2N1czogMC4xMixcXG4gIHByZXNzOiAwLjEyLFxcbiAgc2VsZWN0ZWQ6IDAuMDgsXFxuICBhY3RpdmF0ZWQ6IDAuMTIsXFxuKSAhZGVmYXVsdDtcXG5cXG4kbGlnaHQtaW5rLW9wYWNpdGllczogKFxcbiAgaG92ZXI6IDAuMDgsXFxuICBmb2N1czogMC4yNCxcXG4gIHByZXNzOiAwLjI0LFxcbiAgc2VsZWN0ZWQ6IDAuMTYsXFxuICBhY3RpdmF0ZWQ6IDAuMjQsXFxuKSAhZGVmYXVsdDtcXG5cXG4vLyBMZWdhY3lcXG5cXG4kcHJlc3NlZC1kYXJrLWluay1vcGFjaXR5OiAwLjE2ICFkZWZhdWx0O1xcbiRwcmVzc2VkLWxpZ2h0LWluay1vcGFjaXR5OiAwLjMyICFkZWZhdWx0O1xcblwiLFwiaHRtbCB7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogMTAwJTtcXG4gIGZvbnQtZmFtaWx5OiAkbWFpbi1mb250O1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBzY3JvbGwtYmVoYXZpb3I6IHNtb290aDtcXG59XFxuYm9keSB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLm1kYy10YWItYmFyIHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHRvcDogMDtcXG4gIHotaW5kZXg6MTtcXG4gIGJhY2tncm91bmQ6IHdoaXRlO1xcbn1cXG5cXG5hcnRpY2xlIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmb250LXNpemU6IDIwcHg7XFxuICBoMiB7XFxuICAgIGZvbnQtc2l6ZTogNDBweDtcXG5cXG4gIH1cXG4gIGgzIHtcXG4gICAgZm9udC1zaXplOiAzMHB4O1xcblxcbiAgfVxcbiAgcHJlIHtcXG4gICAgZm9udC1mYW1pbHk6ICRtYWluLWZvbnQ7XFxuICB9XFxuXFxufVxcblxcblxcbiNjb250ZW50IHtcXG4gIG1hcmdpbi10b3A6IDQ4cHg7XFxuICBtYXgtd2lkdGg6IDE0MDBweDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcblwiLFwiQGltcG9ydCAnLi9mb250JztcXG5cXG4kbWFpbi1mb250OiAnT3BlbiBTYW5zIENvbmRlbnNlZCc7XFxuJHRhYmxldC13aWR0aDogNzY4cHg7XFxuJGRlc2t0b3Atd2lkdGg6IDE1MDBweDtcXG5cIixcIi5sb2dvLWRpdiB7XFxuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyO1xcbiAgd2lkdGg6IDUwcHg7XFxuICBoZWlnaHQ6IDUwcHg7XFxuICBhbGlnbi1zZWxmOiBjZW50ZXI7XFxuICBtYXJnaW46IDElO1xcbn1cXG5cIixcIi5oZXJvLWltYWdlIHtcXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XFxuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XFxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDg1dmg7XFxuICBtYXJnaW4tYm90dG9tOiA0JTtcXG59XFxuXFxuLmhlcm8tdGV4dCB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDUwJTtcXG4gIGxlZnQ6IDUwJTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgYmFja2dyb3VuZDogbm9uZTtcXG4gIG1hcmdpbi10b3A6IDElO1xcbiAgbWFyZ2luLWJvdHRvbTogMSU7XFxufVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTYwcHgpIHtcXG4gIC5oZXJvLXRleHQge1xcbiAgICBoMSB7XFxuICAgICAgZm9udC1zaXplOiAyNHB4O1xcbiAgICB9XFxuICB9XFxufVxcblwiLFwiZm9vdGVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICRncmV5O1xcbiAgcGFkZGluZzogMC41JSAwJTtcXG4gIHAge1xcbiAgICBwYWRkaW5nLWxlZnQ6IDElO1xcbiAgfVxcbn1cXG5cIixcIiRyZWQ6IHJnYigxNjQsMTcsOSk7XFxuJGdyZWVuOiByZ2IoMjE4LDE5NCwwKTtcXG4kYmx1ZTogcmdiKDAsMTc0LDIzOSk7XFxuJHB1cnBsZTogcmdiKDE0MywwLDEwMik7XFxuJGdyZXk6IHJnYigxMDIsMTAyLDEwMik7XFxuXCIsXCIuaG91cnMtYXJ0aWNsZSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxuICAuYXJ0aWNsZS1jYXJkIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIH1cXG59XFxuXFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA1NjBweCkge1xcbi5ob3Vycy1hcnRpY2xlIHtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIH1cXG59XFxuXCIsXCIubWFuaWZlc3RvLWFydGljbGUge1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGZvbnQtc2l6ZTogMjBweDtcXG4gIGgzIHtcXG4gICAgcGFkZGluZy1sZWZ0OiA1JTtcXG4gICAgcGFkZGluZy1ib3R0b206IDIlO1xcbiAgfVxcbiAgcCB7XFxuICAgIHBhZGRpbmctbGVmdDogNSU7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDUlO1xcbiAgICBwYWRkaW5nLXRvcDogMSU7XFxuICB9XFxuXFxuICB1bCB7XFxuICAgIHBhZGRpbmc6IDElIDUlIDIlIDYlO1xcbiAgfVxcblxcbiAgdWwgbGk6OmJlZm9yZSB7XFxuICAgIGNvbnRlbnQ6IFxcXCItXFxcIjtcXG4gICAgY29sb3I6ICRibHVlO1xcbiAgICBmb250LXdlaWdodDogYm9sZGVyO1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgIC8qIE5lZWRlZCB0byBhZGQgc3BhY2UgYmV0d2VlbiB0aGUgYnVsbGV0IGFuZCB0aGUgdGV4dCAqL1xcbiAgICB3aWR0aDogMWVtO1xcbiAgfVxcbn1cXG5cIixcIkBpbXBvcnQgJy4uL3ZhcnMvY29sb3JzLnNjc3MnO1xcblxcbi5jb250YWN0LWFydGljbGUge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcblxcbiAgLmFydGljbGUtY2FyZCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICB9XFxuXFxuICBzdmcge1xcbiAgICB3aWR0aDogMzBweDtcXG4gICAgaGVpZ2h0OiAzMHB4O1xcbiAgICBtYXJnaW4tdG9wOiAyJTtcXG4gICAgbWFyZ2luLWxlZnQ6IDElO1xcbiAgfVxcbn1cXG5cXG4uY29udGFjdC1mb3JtIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgd2lkdGg6IDgwJTtcXG4gIGhlaWdodDogNDB2aDtcXG5cXG4gIGgzIHtcXG4gICAgZm9udC1zaXplOiAzMHB4O1xcbiAgfVxcblxcbiAgLmluZm9EaXYge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcXG4gICAgaGVpZ2h0OiA1MHB4O1xcbiAgICB3aWR0aDogNjAlO1xcbiAgfVxcblxcbiAgLm1lc3NhZ2VEaXYge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICB3aWR0aDogODAlO1xcbiAgICAuaW5wdXQtZ3JvdXAge1xcbiAgICAgIHdpZHRoOiA1MCU7XFxuICAgIH1cXG4gIH1cXG5cXG4gIC5pbnB1dC1ncm91cCB7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgbWFyZ2luOiA0MHB4IGF1dG87XFxuICAgIHdpZHRoOiAzNSU7XFxuICB9XFxuXFxuXFxuICAuZm9ybS1jb250cm9sIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICB6LWluZGV4OiAxO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgaGVpZ2h0OiAzNXB4O1xcbiAgICBmb250LXNpemU6IDE2cHg7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIGxpZ2h0ZW4oYmxhY2ssIDg1JSk7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcblxcbiAgICAmICsgbGFiZWwge1xcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICB0b3A6IDEwcHg7XFxuICAgICAgbGVmdDogM3B4O1xcbiAgICAgIGZvbnQtc2l6ZTogMTZweDtcXG4gICAgICBjb2xvcjogbGlnaHRlbihibGFjaywgNjAlKTtcXG4gICAgICB0cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlLW91dDtcXG4gICAgfVxcblxcbiAgICAmOmZvY3VzIHtcXG4gICAgICBvdXRsaW5lOiBub25lO1xcbiAgICAgIGJvcmRlci13aWR0aDogMnB4O1xcbiAgICAgIGJvcmRlci1jb2xvcjogJGdyZWVuO1xcbiAgICAgIHRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2Utb3V0O1xcbiAgICB9XFxuXFxuICAgICYuaGFzLXZhbHVlICsgbGFiZWwsXFxuICAgICY6Zm9jdXMgKyBsYWJlbCB7XFxuICAgICAgdG9wOiAtMTVweDtcXG4gICAgICBjb2xvcjogJGdyZWVuO1xcbiAgICAgIGZvbnQtc2l6ZTogMTJweDtcXG4gICAgfVxcblxcbiAgICAmLmhhcy12YWx1ZTpub3QoOmZvY3VzKSArIGxhYmVsIHtcXG4gICAgICBjb2xvcjogbGlnaHRlbihibGFjaywgNjAlKTtcXG4gICAgfVxcbiAgfVxcbn1cXG5cXG4ubWFwLWNvbnRhaW5lciB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogNDB2aDtcXG4gIG1hcmdpbjogMSUgMDtcXG59XFxuLm1hcC1kaXNwbGF5IHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG4ubWFwLWZyYW1lIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgYm9yZGVyOiAwO1xcbn1cXG5cXG5cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwNjVweCkge1xcbiAgLmNvbnRhY3QtYXJ0aWNsZSB7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICB9XFxufVxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTYwcHgpIHtcXG4gIC5jb250YWN0LWFydGljbGUge1xcbiAgICAuYXJ0aWNsZS1jYXJkIHtcXG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICAgIHBhZGRpbmc6IDMlIDA7XFxuICAgIH1cXG5cXG4gICAgcCB7XFxuICAgICAgbWFyZ2luLWxlZnQ6IDUlO1xcbiAgICAgIG1hcmdpbi1yaWdodDogNSU7XFxuICAgIH1cXG4gIH1cXG5cXG4gIC5jb250YWN0LWZvcm0ge1xcbiAgICBoMyB7XFxuICAgICAgbWFyZ2luLXRvcDogLTI1cHg7XFxuICAgICAgbWFyZ2luLWJvdHRvbTogLTUwcHg7XFxuICAgIH1cXG5cXG4gICAgLmluZm9EaXYge1xcbiAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbiAgICAgIGhlaWdodDogMjAlO1xcbiAgICAgIHBhZGRpbmc6IDA7XFxuICAgICAgbWFyZ2luOiAwO1xcblxcbiAgICAgIC5pbnB1dC1ncm91cCB7XFxuICAgICAgICBtYXJnaW46IDMlO1xcbiAgICAgICAgd2lkdGg6IDgwJTtcXG4gICAgICB9XFxuICAgIH1cXG5cXG4gICAgLmlucHV0LWdyb3VwIHtcXG4gICAgICBtYXJnaW46IDElO1xcbiAgICB9XFxuXFxuICAgIC5tZXNzYWdlRGl2IHtcXG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIH1cXG4gIH1cXG59XFxuYnV0dG9ue1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZ3JlZW47XFxuICAgIGNvbG9yOndoaXRlO1xcbiAgICBmb250LXNpemU6MTRweDtcXG4gICAgdGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO1xcbiAgICBmb250LXdlaWdodDo1MDA7XFxuICAgIGJvcmRlcjoxcHggc29saWQgJGdyZWVuO1xcbiAgICBoZWlnaHQ6MzZweDtcXG4gICAgcGFkZGluZzowIDE2cHg7XFxuICAgIGJvcmRlci1yYWRpdXM6MnB4O1xcbiAgICBib3gtc2hhZG93OjAgMXB4IDNweCBsaWdodGVuKGJsYWNrLCA2MCUpO1xcbn1cXG5cXG50ZXh0YXJlYS5mb3JtLWNvbnRyb2x7XFxuICBoZWlnaHQ6MTIwcHg7XFxufVxcblwiLFwiQGltcG9ydCAnLi4vdmFycy9jb2xvcnMuc2Nzcyc7XFxuXFxuLy8gRHJvcGRvd24gbWVudSBzdHlsaW5nLS0tLS0tLS0tLS0tLS0tLS1cXG4vKiBSZXNldCBTZWxlY3QgKi9cXG5zZWxlY3Qge1xcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcbiAgLW1vei1hcHBlYXJhbmNlOiBub25lO1xcbiAgLW1zLWFwcGVhcmFuY2U6IG5vbmU7XFxuICBhcHBlYXJhbmNlOiBub25lO1xcbiAgb3V0bGluZTogMDtcXG4gIGJveC1zaGFkb3c6IG5vbmU7XFxuICBib3JkZXI6IDAgIWltcG9ydGFudDtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XFxufVxcbi8qIFJlbW92ZSBJRSBhcnJvdyAqL1xcbnNlbGVjdDo6LW1zLWV4cGFuZCB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG4vKiBDdXN0b20gU2VsZWN0ICovXFxuLnNlbGVjdCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB0b3A6IDYwJTtcXG4gIGxlZnQ6IDU1MHB4O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHdpZHRoOiAyMGVtO1xcbiAgaGVpZ2h0OiAzZW07XFxuICBsaW5lLWhlaWdodDogMztcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIGJvcmRlci1yYWRpdXM6IC4yNWVtO1xcbn1cXG5zZWxlY3Qge1xcbiAgZmxleDogMTtcXG4gIHBhZGRpbmc6IDAgLjVlbTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5vcHRpb24ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICB0ZXh0LWRlY29yYXRpb24tY29sb3I6ICRwdXJwbGU7XFxufVxcbi8qIEFycm93ICovXFxuLnNlbGVjdDo6YWZ0ZXIge1xcbiAgY29udGVudDogJ1xcXFwyNUJDJztcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgcGFkZGluZzogMCAxZW07XFxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgLXdlYmtpdC10cmFuc2l0aW9uOiAuMjVzIGFsbCBlYXNlO1xcbiAgLW8tdHJhbnNpdGlvbjogLjI1cyBhbGwgZWFzZTtcXG4gIHRyYW5zaXRpb246IC4yNXMgYWxsIGVhc2U7XFxufVxcbi8qIFRyYW5zaXRpb24gKi9cXG4uc2VsZWN0OmhvdmVyOjphZnRlciB7XFxuICBjb2xvcjogJHB1cnBsZTtcXG59XFxuLy8gZW5kIG9mIGRyb3Bkb3duIG1lbnUgc3R5bGUtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5cXG5cXG4vLyBNZW51cyBhcnRpY2xlLCBob2xkZXIsIGFuZCBpdGVtcy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuLm1lbnVzLWFydGljbGUge1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaDIge1xcbiAgICBjb2xvcjogJHB1cnBsZTtcXG4gIH1cXG59XFxuXFxuXFxuLm1lbnUtaG9sZGVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIHdpZHRoOiA3MCU7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgfVxcbn1cXG5ociB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMXB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogJHB1cnBsZTtcXG4gIGJvcmRlci1jb2xvcjogJHB1cnBsZTtcXG59XFxuLm1lbnUtZGl2IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgZmxleC13cmFwOiB3cmFwO1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgcGFkZGluZzogNSU7XFxufVxcbi5tZW51LWl0ZW0tZGl2IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgd2lkdGg6IDMwMHB4O1xcbiAgcGFkZGluZzogMSU7XFxuICBwIHtcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbiAgfVxcbn1cXG4ubWVudS1pdGVtLXRpdGxlLWRpdiB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG59XFxuLmx1bmNoLW1lbnUtZGl2IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHBhZGRpbmc6IDElO1xcbn1cXG4ubHVuY2gtaXRlbS1ob2xkZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtd3JhcDogd3JhcDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG59XFxuXFxuXFxuXFxuLy8gTWVkaWEgcXVlcmllcyAobW9zdGx5IHRvIGNlbnRlciBkcm9wZG93biBtZW51KVxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTM5NXB4KSB7XFxuICAuc2VsZWN0IHtcXG4gICAgbGVmdDogMzglO1xcbiAgfVxcbn1cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDExMDBweCkge1xcbiAgLnNlbGVjdCB7XFxuICAgIGxlZnQ6IDMyJTtcXG4gIH1cXG59XFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA4MDBweCkge1xcbiAgLnNlbGVjdCB7XFxuICAgIGxlZnQ6IDI2JTtcXG4gIH1cXG59XFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA2MzBweCkge1xcbiAgLnNlbGVjdCB7XFxuICAgIGxlZnQ6IDIwJTtcXG4gIH1cXG59XFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0ODBweCkge1xcbiAgLnNlbGVjdCB7XFxuICAgIGxlZnQ6IDE0JTtcXG4gIH1cXG59XFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MDBweCkge1xcbiAgLnNlbGVjdCB7XFxuICAgIGxlZnQ6IDUlO1xcbiAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIEJ1aWxkIGEgbmF2IHRhYiB3IGdpdmVuIG5hbWUgYW5kIGluZGV4XG5jb25zdCBidWlsZFRhYiA9IChuYW1lLCBpbmRleCkgPT4ge1xuICAvLyBCdWlsZCBiYXNpYyBidXR0b24gL3cgYXR0cmlidXRlcywgc2V0IGluZGV4IHRvIGdpdmVuIGluZGV4XG4gIGxldCB0YWIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgdGFiLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnbWRjLXRhYicpO1xuICB0YWIuc2V0QXR0cmlidXRlKCdyb2xlJywgJ3RhYicpO1xuICB0YWIuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsIGluZGV4KTtcblxuICAvLyBjb250ZW50IGNvbnRhaW5lclxuICBsZXQgdGFiQ29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgdGFiQ29udGVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ21kYy10YWJfX2NvbnRlbnQnKTtcblxuICAvLyBUYWIgdGV4dCwgc2V0IHRhYiBuYW1lXG4gIGxldCB0YWJUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICB0YWJUZXh0LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnbWRjLXRhYl9fdGV4dC1sYWJlbCcpO1xuICB0YWJUZXh0LmlubmVySFRNTCA9IG5hbWU7XG5cbiAgLy8gQWRkIHRleHQgdG8gY29udGVudFxuICB0YWJDb250ZW50LmFwcGVuZENoaWxkKHRhYlRleHQpO1xuXG4gIC8vIEFkZGl0b25hbCB0YWIgZGVzaWduIGVsZW1lbnRzLCBidWlsZGluZyBhbmQgYWRkaW5nIHJlcXVpcmVkIGF0dHJpYnV0ZXNcbiAgbGV0IHRhYkluZGljYXRvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgdGFiSW5kaWNhdG9yLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnbWRjLXRhYi1pbmRpY2F0b3InKTtcblxuICBsZXQgdGFiSW5kaWNhdG9yQ250ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICB0YWJJbmRpY2F0b3JDbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsICdtZGMtdGFiLWluZGljYXRvcl9fY29udGVudCBtZGMtdGFiLWluZGljYXRvcl9fY29udGVudC0tdW5kZXJsaW5lJyk7XG4gIHRhYkluZGljYXRvci5hcHBlbmRDaGlsZCh0YWJJbmRpY2F0b3JDbnQpO1xuXG4gIGxldCB0YWJSaXBwbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gIHRhYlJpcHBsZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ21kYy10YWJfX3JpcHBsZScpO1xuXG4gIC8vIFB1dCBhbGwgdGhlIGVsZW1lbnRzIHRvZ2V0aGVyIG9uIGEgdGFiXG4gIHRhYi5hcHBlbmRDaGlsZCh0YWJDb250ZW50KTtcbiAgdGFiLmFwcGVuZENoaWxkKHRhYkluZGljYXRvcik7XG4gIHRhYi5hcHBlbmRDaGlsZCh0YWJSaXBwbGUpO1xuXG4gIC8vIHJldHVybiB0aGUgY29tcGxldGVkIHRhYlxuICByZXR1cm4gdGFiO1xufVxuXG5leHBvcnQgZGVmYXVsdCBidWlsZFRhYjtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgYnVpbGRUYWIgZnJvbSAnLi9idWlsZGVycy9idWlsZFRhYic7XG5cbmNvbnN0IHJlbmRlck5hdiA9IChjb250ZW50KSA9PiB7XG4gIC8vIENvbnN0cnVjdCBhIG1hdHJpYWwtdWkgdGFiIG5hdiBzdHlsZSBuYXZiYXIgYW5kIGFkZCB0byBjb250ZW50IGVsZW1lbnRcbiAgLy8gcGFzc2VkIGluXG5cbiAgLy8gTWFrZSB0YWJCYXJcbiAgbGV0IHRhYkJhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB0YWJCYXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdtZGMtdGFiLWJhcicpO1xuICB0YWJCYXIuc2V0QXR0cmlidXRlKCdyb2xlJywgJ3RhYmxpc3QnKTtcblxuICAvLyBNYWtlIHRhYlNjcm9sbGVyXG4gIGxldCB0YWJTY3JvbGxlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB0YWJTY3JvbGxlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ21kYy10YWItc2Nyb2xsZXInKTtcblxuICAvLyBNYWtlIHRhYlNjcm9sbGVyU2FcbiAgbGV0IHRhYlNjcm9sbGVyU2EgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgdGFiU2Nyb2xsZXJTYS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ21kYy10YWItc2Nyb2xsZXJfX3Njcm9sbC1hcmVhJyk7XG5cbiAgLy8gTWFrZSB0YWJTY3JvbGxlclNjXG4gIGxldCB0YWJTY3JvbGxlclNjID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHRhYlNjcm9sbGVyU2Muc2V0QXR0cmlidXRlKCdjbGFzcycsICdtZGMtdGFiLXNjcm9sbGVyX19zY3JvbGwtY29udGVudCcpO1xuXG5cbiAgLy8gQnVpbGQgdGFicyBmb3IgbWVudSwgcGFzc2luZyBpbiB0aGUgdGFiIG5hbWUgd2Ugd2FudCBhbmQgaW5kZXhcbiAgbGV0IGFib3V0VGFiID0gYnVpbGRUYWIoJ2hvdXJzJywgMCk7XG4gIGxldCBtZW51c1RhYiA9IGJ1aWxkVGFiKCdtZW51cycsIDEpO1xuICBsZXQgbWFuaWZlc3RvVGFiID0gYnVpbGRUYWIoJ21hbmlmZXN0bycsIDIpO1xuICBsZXQgY29udGFjdFRhYiA9IGJ1aWxkVGFiKCdjb250YWN0JywgMyk7XG5cblxuICAvLyBBZGQgbmV3IGJ1dHRvbnMgdG8gb3VyXG4gIHRhYlNjcm9sbGVyU2MuYXBwZW5kQ2hpbGQoYWJvdXRUYWIpO1xuICB0YWJTY3JvbGxlclNjLmFwcGVuZENoaWxkKG1lbnVzVGFiKTtcbiAgdGFiU2Nyb2xsZXJTYy5hcHBlbmRDaGlsZChtYW5pZmVzdG9UYWIpO1xuICB0YWJTY3JvbGxlclNjLmFwcGVuZENoaWxkKGNvbnRhY3RUYWIpO1xuICAvLyBBZGQgdGhlIFNjIHRvIHRoZSBTYVxuICB0YWJTY3JvbGxlclNhLmFwcGVuZENoaWxkKHRhYlNjcm9sbGVyU2MpO1xuICAvLyBBZGQgdGhlIFNhIHRvIHRoZSBTY3JvbGxlclxuICB0YWJTY3JvbGxlci5hcHBlbmRDaGlsZCh0YWJTY3JvbGxlclNhKTtcbiAgLy8gQWRkIHNjcm9sbGVyIHRvIHRhYi9uYXYgQmFyXG4gIHRhYkJhci5hcHBlbmRDaGlsZCh0YWJTY3JvbGxlcik7XG5cbiAgLy8gQWRkIG91ciBjb21wbGV0ZWQgbmF2L3RhYiBCYXIgdG8gdGhlIGNvbnRlbnQgZGl2IHBhc3NlZCBpbi5cbiAgY29udGVudC5hcHBlbmRDaGlsZCh0YWJCYXIpO1xuXG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlbmRlck5hdjtcbiIsIlwidXNlIHN0cmljdFwiO1xuY29uc3QgcmVuZGVyRm9vdGVyID0gKGJvZHkpID0+IHtcbiAgbGV0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvb3RlcicpO1xuICBjb250YWluZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdmb290ZXInKTtcbiAgbGV0IHRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gIHRleHQuaW5uZXJIVE1MID0gXCLCqSBUcmliZSAyMDE4LiBBbGwgcmlnaHRzIHJlc2VydmVkXCI7XG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0ZXh0KTtcbiAgYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuXG59XG5cbmNvbnN0IGNoYW5nZUZvb3RlckNvbG9yID0gKGNvbG9yKSA9PiB7XG4gIGxldCBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdmb290ZXInKTtcbiAgY29udGFpbmVyLnN0eWxlLmNvbG9yID0gY29sb3I7XG59XG5cbmV4cG9ydCB7XG4gIHJlbmRlckZvb3RlcixcbiAgY2hhbmdlRm9vdGVyQ29sb3IsXG59XG4iLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZTg2OWRjM2RkYmY5MjNiMjI1NGMxOWRkNTUzMTIxMjguanBnXCI7IiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBSZW5kZXIgYW4gYXJ0aWNsZSBob2xkZXJcbmNvbnN0IHJlbmRlckFydGljbGUgPSAoY29udGVudCkgPT4ge1xuICBsZXQgYXJ0aWNsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2FydGljbGUnKTtcbiAgYXJ0aWNsZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2FydGljbGUnKTtcbiAgY29udGVudC5hcHBlbmRDaGlsZChhcnRpY2xlKTtcbn1cblxuLy8gQ3JlYXRlIGEgc3RhbmRhcmQgdGl0bGUgKyBib2R5IGNhcmQgaW4gcGFnZSBjb2xvciwgcmV0dXJuIGJ1aWx0IGNhcmRcbmNvbnN0IGJ1aWxkQXJ0aWNsZUNhcmQgPSAodGl0bGUsIHRleHQsIGNvbG9yKSA9PiB7XG4gIGNvbnN0IGhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBob2xkZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdhcnRpY2xlLWNhcmQnKTtcbiAgY29uc3QgaGVhZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gzJyk7XG4gIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwcmUnKTtcbiAgaGVhZC5pbm5lckhUTUwgPSB0aXRsZTtcbiAgYm9keS5pbm5lckhUTUwgPSB0ZXh0O1xuICBoZWFkLnN0eWxlLmNvbG9yID0gY29sb3I7XG4gIGhvbGRlci5hcHBlbmRDaGlsZChoZWFkKTtcbiAgaG9sZGVyLmFwcGVuZENoaWxkKGJvZHkpO1xuXG4gIHJldHVybiBob2xkZXI7XG59XG5cbi8vIEFwcGVuZCB0aXRsZSB0byBhcnRpY2Ugb2JqZWN0LlxuY29uc3QgcmVuZGVyQXJ0aWNsZVRpdGxlID0gKHRleHQsIGNvbG9yKSA9PiB7XG4gIGxldCBhcnRpY2xlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYXJ0aWNsZScpO1xuICBsZXQgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMycpO1xuXG4gIHRpdGxlLmlubmVySFRNTCA9IFwiIC0gXCIgKyB0ZXh0ICsgXCIgLSBcIjtcbiAgdGl0bGUuc3R5bGUuY29sb3IgPSBjb2xvcjtcblxuICBhcnRpY2xlLmFwcGVuZENoaWxkKHRpdGxlKTtcbn1cblxuZXhwb3J0IHtcbiAgcmVuZGVyQXJ0aWNsZSxcbiAgYnVpbGRBcnRpY2xlQ2FyZCxcbiAgcmVuZGVyQXJ0aWNsZVRpdGxlLFxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIEEgY29sb3IgbGlzdCBhbGxvd2luZyB1cyB0byBjb29yaWRuYXRlIHRhYi9wYWdlIHN0eWxlIGNvbG9yc1xuLy8gQ29sb3Igd2lsbCBiZSBhY2NvcmRpbmcgdG8gdGFiIG51bWJlciwgZ2l2ZSB0YWIgbnVtYmVyLCByZWNlaXZlIGNvbG9yXG4vLyBUYWJzIGdvIGZyb20gMS00LlxuY29uc3QgcmVkID0gXCJyZ2IoMTY0LDE3LDkpXCI7XG5jb25zdCBncmVlbiA9IFwicmdiKDIxOCwxOTQsMClcIjtcbmNvbnN0IGJsdWUgPSBcInJnYigwLDE3NCwyMzkpXCI7XG5jb25zdCBwdXJwbGUgPSBcInJnYigxNDMsMCwxMDIpXCI7XG5jb25zdCBncmV5ID0gXCJyZ2IoMTAyLDEwMiwxMDIpXCI7XG5cbmNvbnN0IHRhYkNvbG9ycyA9IFtyZWQsIHB1cnBsZSwgYmx1ZSwgZ3JlZW5dO1xuXG5jb25zdCBhbGxDb2xvcnMgPSB0YWJDb2xvcnMgKyBbZ3JleV07XG5cbi8vIFJldHVybiBmdWxsIGxpc3Qgb2YgY29sb3JzXG5jb25zdCBjb2xvckxpc3QgPSAoKSA9PiB7XG4gIHJldHVybiBhbGxDb2xvcnM7XG59XG5cbi8vIFdpbGwgYmUgZm9yIHF1aWNrIGNvbG9yIHBpY2tpbmcgYmFzZWQgb24gdGFiLCAxLTQuXG5jb25zdCBjb2xvclBpY2tlciA9IChudW1iZXIpID0+IHtcbiAgICAvLyBhZGp1c3QgbnVtYmVyIHRvIDAgaW5kZXhcbiAgICBudW1iZXIgLT0gMTtcbiAgICAvLyBJZiB2YWxpZCB0YWIgbnVtYmVyLT5jb2xvciwgcmV0dXJuIHRhYnMgY29sb3IuXG4gICAgaWYgKG51bWJlciA+PSAwICYmIG51bWJlciA8PSAzKSB7XG4gICAgICByZXR1cm4gdGFiQ29sb3JzW251bWJlcl07XG4gICAgfVxufVxuXG5cbmV4cG9ydCB7XG4gIGNvbG9yTGlzdCxcbiAgY29sb3JQaWNrZXIsXG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHtcbiAgYnVpbGRBcnRpY2xlQ2FyZCxcbn0gZnJvbSAnLi4vYXJ0aWNsZSc7XG5pbXBvcnQge1xuICBjb2xvclBpY2tlcixcbn0gZnJvbSAnLi4vY29sb3JzJztcblxuLy8gQnVpbGQgaG91cnMgY2FyZCBmb3IgaG91cnMgcGFnZSwgYXBwZW5kIHRvIGdpdmVuIGFydGljbGVcbmNvbnN0IGJ1aWxkSG91cnNDYXJkID0gKGFydGljbGUpID0+IHtcbiAgLy8gQ3JlYXRlIHRleHQgZWxlbWVudHNcbiAgbGV0IGhvdXJzVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ByZScpO1xuICBob3Vyc1RleHQgPVxuICAgIFwiICAgICAgICAgICAgICAgICAgICAgICBUdWVzZGF5OlxcblwiICtcbiAgICBcIiAgICAgICAgICAgMTE6MzAgYS5tLiDigJMgMjozMCBwLm0uXFxuXCIgK1xuICAgIFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgIFdlZCwgVGh1cnMsIEZyaSwgU2F0OlxcblwiICtcbiAgICBcIiAgICAgICAgICAgICAgIDExOjMwIGEubS4g4oCTIExBVEVcXG5cIiArXG4gICAgXCJcXG5cIiArXG4gICAgXCJIYXBweSBIb3VyOiAyOjMwIHAubS4g4oCTIDQ6MzAgcC5tLlwiO1xuXG5cbiAgLy8gQnVpbGQgYW5kIGFwcGVuZCBjYXJkXG4gIGxldCBob3Vyc0NhcmQgPSBidWlsZEFydGljbGVDYXJkKCctIEhvdXJzIC0nLCBob3Vyc1RleHQsIGNvbG9yUGlja2VyKDEpKTtcbiAgYXJ0aWNsZS5hcHBlbmRDaGlsZChob3Vyc0NhcmQpO1xuXG59XG5cbmV4cG9ydCBkZWZhdWx0IGJ1aWxkSG91cnNDYXJkO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7XG4gIGJ1aWxkQXJ0aWNsZUNhcmQsXG59IGZyb20gJy4uL2FydGljbGUnO1xuaW1wb3J0IHtcbiAgY29sb3JQaWNrZXIsXG59IGZyb20gJy4uL2NvbG9ycyc7XG5cbi8vIEJ1aWxkIGFkZHJlc3MgY2FyZCBmb3IgaG91cnMgcGFnZSwgYXBwZW5kIHRvIGdpdmVuIGFydGljbGVcbmNvbnN0IGJ1aWxkQWRkcmVzc0NhcmQgPSAoYXJ0aWNsZSkgPT4ge1xuICAvLyBDcmVhdGUgdGV4dCBlbGVtZW50c1xuICBsZXQgYWRkcmVzc1RleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwcmUnKTtcbiAgYWRkcmVzc1RleHQgPVxuICAgIFwiICAgICAgIDQ5MzAgUm9zcyBTdC5cXG5cIiArXG4gICAgXCJSZWQgRGVlciwgQUIgVDROIDFYN1xcblwiICtcbiAgICBcIlxcblwiICtcbiAgICBcIiAgICAgICAgICAgIFBob25lOlxcblwiICtcbiAgICBcIiAgICAgIDQwMy0zOTItMzA0NlxcblwiICtcbiAgICBcIiAgICAgICAgICAgIEVtYWlsOlxcblwiICtcbiAgICBcImVhdEB0cmliZWZsYXRvdXQuY29tXFxuXCJcblxuICAvLyBCdWlsZCBhbmQgYXBwZW5kIGNhcmRcbiAgbGV0IGFkZHJlc3NDYXJkID0gYnVpbGRBcnRpY2xlQ2FyZCgnLSBBZGRyZXNzIC0nLCBhZGRyZXNzVGV4dCwgY29sb3JQaWNrZXIoMSkpO1xuICBhcnRpY2xlLmFwcGVuZENoaWxkKGFkZHJlc3NDYXJkKTtcblxufVxuXG5leHBvcnQgZGVmYXVsdCBidWlsZEFkZHJlc3NDYXJkO1xuIiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjdlODkxN2U0Y2YxNjg4YjNkNjY4ZjMzYzAyZWFmMGZiLmpwZ1wiOyIsIlwidXNlIHN0cmljdFwiO1xuLy8gQnVpbGQgYW5kIGFwcGVuZCB0aGUgbWVudSB0aXRsZSwgYW5kIGl0cyBhY2NvbXBhbnlpbmcgYmx1cmIgdG8gdGhlIG1lbnUgaG9sZGVyXG5jb25zdCBidWlsZE1lbnVUaXRsZSA9ICh0aXRsZVRleHQsIGJsdXJiVGV4dCkgPT4ge1xuICAvLyBHcmFiIGhvbGRlclxuICBsZXQgbWVudUFydGljbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWVudS1ob2xkZXInKTtcbiAgLy8gTWFrZSBhbmQgYWRkIHRpdGxlXG4gIGxldCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gyJyk7XG4gIHRpdGxlLmlubmVySFRNTCA9IHRpdGxlVGV4dDtcbiAgbWVudUFydGljbGUuYXBwZW5kQ2hpbGQodGl0bGUpO1xuICAvLyBCbHVyYiBmb3IgZWFjaCBtZW51IHNlY3Rpb25cbiAgbGV0IGJsdXJiID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpXG4gIGJsdXJiLmlubmVySFRNTCA9IGJsdXJiVGV4dDtcbiAgbWVudUFydGljbGUuYXBwZW5kQ2hpbGQoYmx1cmIpO1xufVxuXG4vLyBCdWlsZCBhIG1lbnUgaXRlbSwgcGFzcyBpbiB0aGUgaXRlbSBuYW1lLCBwcmljZSwgaW5kcmVkaWVudHMoc3RyaW5nKSxcbi8vIGFuZCBhbnkgYWRkb25zKGFkIG9iaiB7YWRkb25uYW1lOiBhZGRvbnByaWNlfSlcbi8vIHJldHVybnMgdGhlIGNvbXBsZXRlZCBpdGVtXG5jb25zdCBidWlsZE1lbnVJdGVtID0gKG5hbWUsIHByYywgaW5ncmVkLCBhZGRvbnMgPSBbXSkgPT4ge1xuICBsZXQgaG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGhvbGRlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ21lbnUtaXRlbS1kaXYnKTtcbiAgbGV0IHRpdGxlSG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHRpdGxlSG9sZGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnbWVudS1pdGVtLXRpdGxlLWRpdicpO1xuICBsZXQgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMicpO1xuICB0aXRsZS5pbm5lckhUTUwgPSBuYW1lO1xuICBsZXQgcHJpY2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMycpO1xuICBwcmljZS5pbm5lckhUTUwgPSBwcmM7XG4gIHRpdGxlSG9sZGVyLmFwcGVuZENoaWxkKHRpdGxlKTtcbiAgdGl0bGVIb2xkZXIuYXBwZW5kQ2hpbGQocHJpY2UpO1xuICBsZXQgaW5ncmVkaWVudHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gIGluZ3JlZGllbnRzLmlubmVySFRNTCA9IGluZ3JlZDtcbiAgaG9sZGVyLmFwcGVuZENoaWxkKHRpdGxlSG9sZGVyKTtcbiAgaG9sZGVyLmFwcGVuZENoaWxkKGluZ3JlZGllbnRzKTtcbiAgLy8gaWYgYW55IGFkZG9ucywgYnVpbGQgYW5kIGFwcGVuZCB0aGVtXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYWRkb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGFkZG9uVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICBhZGRvblRleHQuaW5uZXJIVE1MID0gYWRkb25zW2ldO1xuICAgIGhvbGRlci5hcHBlbmRDaGlsZChhZGRvblRleHQpO1xuICB9XG4gIC8vIHJldHVybiBjb21wbGV0ZWQgbWVudSBpdGVtXG4gIHJldHVybiBob2xkZXI7XG59XG5cblxuZXhwb3J0IHtcbiAgYnVpbGRNZW51VGl0bGUsXG4gIGJ1aWxkTWVudUl0ZW0sXG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCBCYWNrZ3JvdW5kIGZyb20gJy4uL2ltZy9UcmliZVNrZXdlcnMuanBnJztcbmltcG9ydCB7XG4gIHVwZGF0ZUhlcm9QaWNcbn0gZnJvbSAnLi4vY29tcG9uZW50cy9oZXJvJztcbmltcG9ydCB7XG4gIGJ1aWxkTWVudVRpdGxlLFxuICBidWlsZE1lbnVJdGVtLFxufSBmcm9tICcuLi9jb21wb25lbnRzL2J1aWxkZXJzL21lbnVzJztcblxuY29uc3QgcmVuZGVyQnJ1bmNoID0gKG1lbnVIb2xkZXIpID0+IHtcblxuICAvLyBSZWZyZXNoIGhlcm8gaW1hZ2VcbiAgdXBkYXRlSGVyb1BpYyhCYWNrZ3JvdW5kKTtcblxuICAvLyBSZW5kZXIgdGl0bGUgb24gcGFnZVxuICBidWlsZE1lbnVUaXRsZShcIkJydW5jaFwiLCBcIkFsbCBicnVuY2ggaXRlbXMgY29tZSB3aXRoIG9uZSBvZiB0aGUgZm9sbG93aW5nOiBwb3RhdGFzIG1heCwgMS8yIGZyZXNoIHRvbWF0bywgcm9ja2V0IGZydWl0IHNhbGFkLlwiKTtcblxuICAvLyBCdWlsZCBtZW51IGl0ZW1zXG4gIC8vIGhvbGRlciBmb3IgbWVudSBpdGVtcywgc28gd2UgY2FuIGFkanVzdCBpbmRlcGVuZGVudCBmcm9tIHRpdGxlLlxuICBjb25zdCBtZW51RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIG1lbnVEaXYuc2V0QXR0cmlidXRlKCdjbGFzcycsICdtZW51LWRpdicpO1xuXG4gIGxldCBiZW5ueUZCID0gYnVpbGRNZW51SXRlbShcInRyYWRpdGlvbmFsIGJlbm55IGZsYXRicmVhZFwiLCBcIjE4XCIsIFwic29mdCBwb2FjaGVkIGVnZ3MsIHByb3NjaXV0dG8sIHNlcnZlZCB3aXRoIGxlbW9ueSBob3VzZS1tYWRlIGhvbGxhbmRhaXNlLlwiKTtcbiAgbGV0IGJldEZCID0gYnVpbGRNZW51SXRlbShcImJhY29uLCBlZ2dnLCBhbmQgdG9tYXRvIGZsYXRicmVhZFwiLCBcIjE4XCIsIFwic29mdCBwb2FjaGVkIGVnZ3MsIGJhY29uIGFuZCB0b21hdG8gc2VydmVkIHdpdGggbGVtb255IGhvdXNlLW1hZGUgaG9sbGFuZGFpc2UuXCIpO1xuICBsZXQgbG94RkIgPSBidWlsZE1lbnVJdGVtKFwibG94ICYgY3JlYW0gY2hlZXNlIGZsYXRicmVhZFwiLCBcIjE4XCIsIFwic29mdCBwb2FjaGVkIGVnZ3MsIGJhY29uIGFuZCB0b21hdG8gc2VydmVkIHdpdGggbGVtb255IGhvdXNlLW1hZGUgaG9sbGFuZGFpc2UuXCIpO1xuXG4gIC8vIEFwcGVuZCBpdGVtcyB0byBwYWdlXG4gIG1lbnVEaXYuYXBwZW5kQ2hpbGQoYmVubnlGQik7XG4gIG1lbnVEaXYuYXBwZW5kQ2hpbGQoYmV0RkIpO1xuICBtZW51RGl2LmFwcGVuZENoaWxkKGxveEZCKTtcblxuICAvLyBBZGQgb3VyIGRpdiB0byBob2xkZXJcbiAgbWVudUhvbGRlci5hcHBlbmRDaGlsZChtZW51RGl2KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVuZGVyQnJ1bmNoO1xuIiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjYxMTI4MTU0OGE5NDMxNmY5ODljYWZhNjlkZDQ5YWE1LmpwZ1wiOyIsIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IEJhY2tncm91bmQgZnJvbSAnLi4vaW1nL1RyaWJlU2FsYWQuanBnJztcbmltcG9ydCB7XG4gIHVwZGF0ZUhlcm9QaWNcbn0gZnJvbSAnLi4vY29tcG9uZW50cy9oZXJvJztcbmltcG9ydCB7XG4gIGJ1aWxkTWVudVRpdGxlLFxuICBidWlsZE1lbnVJdGVtLFxufSBmcm9tICcuLi9jb21wb25lbnRzL2J1aWxkZXJzL21lbnVzJztcblxuY29uc3QgcmVuZGVyTHVuY2ggPSAobWVudUhvbGRlcikgPT4ge1xuXG4gIC8vIFJlZnJlc2ggaGVybyBpbWFnZVxuICB1cGRhdGVIZXJvUGljKEJhY2tncm91bmQpO1xuXG4gIC8vIFJlbmRlciB0aXRsZSBvbiBwYWdlXG4gIGJ1aWxkTWVudVRpdGxlKFwiTHVuY2hcIiwgXCJZZXMsIHdlIGFyZSBub3cgb3BlbiBmb3IgbHVuY2ggYXQgMTE6MzBhLm0sIFR1ZXNkYXkgdGhyb3VnaCBTdW5kYXlcIik7XG5cbiAgLy8gaG9sZGVyIGZvciBtZW51IGl0ZW1zLCBzbyB3ZSBjYW4gYWRqdXN0IGluZGVwZW5kZW50IGZyb20gdGl0bGUuXG4gIC8vIEx1bmNoIGlzIGRpZmZlcmVudCBmb3JtIGFsbCBvdGhlciBwYWdlcyBhcyB3ZSBoYXZlIDMgdGl0bGVzIGFuZCAzIGJveGVzLFxuICAvLyBhbG9uZ3NpZGUgb3VyIG1haW4gdGl0bGUuIE90aGVyIHBhZ2VzIGp1c3QgaGF2ZSBtYWluIHRpdGxlIG9uZSBib3hcblxuICAvLyBTdGFydGVycyBib3hcbiAgY29uc3Qgc3RhcnREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgc3RhcnREaXYuc2V0QXR0cmlidXRlKCdjbGFzcycsICdsdW5jaC1tZW51LWRpdicpO1xuICBsZXQgc3RhcnRUaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gzJyk7XG4gIHN0YXJ0VGl0bGUuaW5uZXJIVE1MID0gXCJzdGFydGVyc1wiO1xuICBzdGFydERpdi5hcHBlbmRDaGlsZChzdGFydFRpdGxlKTtcblxuICAvLyBFbnRyZWVzIGJveFxuICBjb25zdCBlbnRyZWVEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZW50cmVlRGl2LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnbHVuY2gtbWVudS1kaXYnKTtcbiAgbGV0IGVudHJlZVRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDMnKTtcbiAgZW50cmVlVGl0bGUuaW5uZXJIVE1MID0gXCJlbnRyZWVzXCI7XG4gIGVudHJlZURpdi5hcHBlbmRDaGlsZChlbnRyZWVUaXRsZSk7XG5cbiAgLy8gRmxhdHBsYXRlcyBib3hcbiAgY29uc3QgZmxhdERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBmbGF0RGl2LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnbHVuY2gtbWVudS1kaXYnKTtcbiAgbGV0IGZsYXRUaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gzJyk7XG4gIGZsYXRUaXRsZS5pbm5lckhUTUwgPSBcImZsYXQgcGxhdGVzXCI7XG4gIGZsYXREaXYuYXBwZW5kQ2hpbGQoZmxhdFRpdGxlKTtcblxuICAvLyBCdWlsZCBtZW51IGl0ZW1zXG4gIC8vIHN0YXJ0ZXJzXG4gIGxldCByb2NrZXRTYWxhZCA9IGJ1aWxkTWVudUl0ZW0oXCJyb2NrZXQgc2FsYWRcIiwgXCI5XCIsIFwiYXJ1Z3VsYSwgd2l0aCBnaW5nZXIgbGVtb24gZHJlc3NpbmcuXCIgK1xuICAgIFwiIHRvcHBlZCB3aXRoIGJlZXQsIGRpbGwgaW5mdXNlZCBwaWNrbGVkIG9uaW9ucy5cIik7XG4gIGxldCB6dXBwYSA9IGJ1aWxkTWVudUl0ZW0oXCJ6dXBwYVwiLCBcIjdcIiwgXCJjaGVmIGFsZXggYW5kIHRlYW0ga25vY2sgaXQgb3V0IG9mIHRoZSBwYXJrLCB3aXRoIHRyaWJlJ3MgaGFuZC1jcmFmdGVkIHNvdXAuXCIgK1xuICAgIFwiIEluc3BpcmVkIGJ5IGZsYXZvdXJzIGZyb20gYXJvdW5kIHRoZSB3b3JsZC5cIik7XG4gIGxldCBsZEVnZ3MgPSBidWlsZE1lbnVJdGVtKFwibGVtb24gZGV2aWxsZWQgZWdnc1wiLCBcIjlcIiwgXCJ0YXJyYWdvbiBjcmVhbSBjaGVlc2Ugc3R1ZmZlZCBlZ2dzLFwiICtcbiAgICBcIiB3aXRoIHNoYXZlZCBzaGFycCBjaGVlc2UsIG9uIGEgYmVkIG9mIGFydWd1bGEsIHdpdGggZ2luZ2VyIGxlbW9uIGRyZXNzaW5nLlwiKTtcbiAgbGV0IHRyaWJlU2FsYWQgPSBidWlsZE1lbnVJdGVtKFwidHJpYmUgc2FsYWRcIiwgXCIxM1wiLCBcImNhbnRhbG91cGUsIGN1Y3VtYmVyLCB0b21hdG8sIGdvYXQgY2hlZXNlLFwiICtcbiAgICBcIiBudXRzLCBrYWxhbWF0YSBvbGl2ZXMsIGxpbWUsIGNpbGFudHJvLCByZWQgb25pb24uXCIsIFtcImFkZCBwcm9zY3VpdHRvICQzXCJdKTtcbiAgbGV0IGJyZWFkID0gYnVpbGRNZW51SXRlbShcImJyZWFkXCIsIFwiNFwiLCBcImZyZXNobHkgYmFrZWQgYnJlYWQsIGFjY29wYW5pZWQgd2l0aCBjb21wb3VuZCBidXR0ZXIuXCIpO1xuXG4gIC8vIGVudHJlZXNcbiAgbGV0IHByb3NjdWl0dG9TYWxtb24gPSBidWlsZE1lbnVJdGVtKFwicHJvc2N1aXR0byBzYWxtb25cIiwgXCIxOFwiLCBcInByb3NjaXV0dG8td3JhcHBlZCBzYWxtb24gZmlsZXQ7IFwiICtcbiAgICBcIm92ZW4tYmFrZWQgd2l0aCBnYXJsaWMgYnV0dGVyLCBhbmQgdG9wcGVkIHdpdGggd2FybSBzYW1idWNhIHRvbWF0byBzYXVjZS5cIik7XG4gIGxldCBiYWhuTWkgPSBidWlsZE1lbnVJdGVtKFwiYmFuaCBtaSBtb250ZSBjcmlzdG9cIiwgXCIxNlwiLCBcImdvY2h1amFuZyBjaGlja2VuLCBwcm9zY2l1dHRvLCBzd2lzcywgY2Fycm90cywgXCIgK1xuICAgIFwic3RyaW5ncywgY2lsYW50cm8gYW5kIGNhbmRpZWQgcGVhbnV0LCBzdHJhd2JlcnJ5IHByZXNlcnZlLlwiKTtcbiAgbGV0IHRoZUJ1cmdlciA9IGJ1aWxkTWVudUl0ZW0oXCJ0aGUgYnVyZ2VyXCIsIFwiMTdcIiwgXCI2IG96IHNvdXMgdmlkZSBBbGJlcnRhIGJlZWYgcGF0dHksIFwiICtcbiAgICBcInJvY2tldHMsIHRvbWF0bywgY29uZml0IGdhcmxpYyBhaW9saSwgbWFpdHJlIGQnaMO0dGVsIGJ1dHRlciwgZGlsbCBpbmZ1c2VkIHBpY2tsZWQgb25pb25zLlwiKTtcbiAgbGV0IG1hY05DaGVlc2UgPSBidWlsZE1lbnVJdGVtKFwiY3JhYiBhbmQgc2hyaW1wIG1hYyAmIGNoZWVzZVwiLCBcIjI0XCIsIFwicGFua28gY3J1c3RlZCBjaGVlc2V5IGNhdmF0YXBwaSwgd2l0aCBjcmFiIGFuZCBzaHJpbXAsIGFuZCBhIHNpZGUgb2YgYXJ1Z3VsYSBzYWxhZC5cIiArXG4gICAgXCIgdG9wcGVkIHdpdGggYmVldC1waWNrbGVkIG9uaW9uLCBhbmQgYSBzbGljZSBvZiBob3VzZS1tYWRlIGJ1dHRlcmVkIGJyZWFkLlwiKTtcblxuICAvLyBmbGF0IHBsYXRlc1xuICBsZXQgbWFycmFrZXNoID0gYnVpbGRNZW51SXRlbShcIm1hcnJha2VzaFwiLCBcIjE4XCIsIFwibW9yb2NjYW4tc3BpY2VkIGNoaWNrZW4sIHJvYXN0ZWQgZ2FybGljLCBcIiArXG4gICAgXCJ0dXJtZXJpYyB5b2d1cnQsIGNhcmFtZWxpemVkIG9uaW9uLCBnb2F0IGNoZWVzZSwgZ3JlZW4gb2xpdmUsIHJvYXN0ZWQgbGVtb24sIGhvbmV5IGRyaXp6bGUuXCIpO1xuICBsZXQgc3Byb3V0ID0gYnVpbGRNZW51SXRlbShcInNwcm91dFwiLCBcIjE0XCIsIFwic2hyZWFkZWQgYnJ1c3NlbCBzcHJvdXRzLCBjYXJtZWxpemVkIG9uaW9uLCBcIiArXG4gICAgXCJnb2F0IGNoZWVzZSwgZHJpenpsZSBvZiByaWNoIGJhbHNhbWljIGdsYXplLlwiKTtcbiAgbGV0IHNuYXBEcmVzID0gYnVpbGRNZW51SXRlbShcInNuYXBweSBkcmVzc2VyXCIsIFwiMThcIiwgXCJpdGFsaWFuIHNhdXNhZ2UsIGdyZWVuIHBlcHBlciwgbXVzaHJvb20sXCIgK1xuICAgIFwiIG9uaW9uLCBtb3p6YXJlbGxhLCB0b21hdG8gYmFzaWwgc2F1Y2UuXCIpO1xuICBsZXQgc2FsdExpY2sgPSBidWlsZE1lbnVJdGVtKFwic2FsdCBsaWNrXCIsIFwiMTJcIiwgXCJjYXJhbWVsaXplZCBvbmlvbiwgdGFwZW5hZGUsIGNhcGVycywgbW96emFyZWxsYS5cIiwgW1wiYWRkIHByb3NjdWl0dG8gJDNcIl0pO1xuXG4gIC8vIHN0YXJ0ZXIgZGl2XG4gIGxldCBzSG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHNIb2xkZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsIFwibHVuY2gtaXRlbS1ob2xkZXJcIik7XG5cbiAgc0hvbGRlci5hcHBlbmRDaGlsZChyb2NrZXRTYWxhZCk7XG4gIHNIb2xkZXIuYXBwZW5kQ2hpbGQoenVwcGEpO1xuICBzSG9sZGVyLmFwcGVuZENoaWxkKGxkRWdncyk7XG4gIHNIb2xkZXIuYXBwZW5kQ2hpbGQodHJpYmVTYWxhZCk7XG4gIHNIb2xkZXIuYXBwZW5kQ2hpbGQoYnJlYWQpO1xuXG4gIHN0YXJ0RGl2LmFwcGVuZENoaWxkKHNIb2xkZXIpO1xuXG4gIC8vIGVudHJlZSBkaXZcbiAgbGV0IGVIb2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZUhvbGRlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgXCJsdW5jaC1pdGVtLWhvbGRlclwiKTtcblxuICBlSG9sZGVyLmFwcGVuZENoaWxkKHByb3NjdWl0dG9TYWxtb24pO1xuICBlSG9sZGVyLmFwcGVuZENoaWxkKGJhaG5NaSk7XG4gIGVIb2xkZXIuYXBwZW5kQ2hpbGQodGhlQnVyZ2VyKTtcbiAgZUhvbGRlci5hcHBlbmRDaGlsZChtYWNOQ2hlZXNlKTtcblxuICBlbnRyZWVEaXYuYXBwZW5kQ2hpbGQoZUhvbGRlcik7XG5cbiAgLy8gZmxhdCBkaXZcbiAgbGV0IGZIb2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZkhvbGRlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgXCJsdW5jaC1pdGVtLWhvbGRlclwiKTtcblxuICBmSG9sZGVyLmFwcGVuZENoaWxkKG1hcnJha2VzaCk7XG4gIGZIb2xkZXIuYXBwZW5kQ2hpbGQoc3Byb3V0KTtcbiAgZkhvbGRlci5hcHBlbmRDaGlsZChzbmFwRHJlcyk7XG4gIGZIb2xkZXIuYXBwZW5kQ2hpbGQoc2FsdExpY2spO1xuXG4gIGZsYXREaXYuYXBwZW5kQ2hpbGQoZkhvbGRlcik7XG5cblxuICAvLyBBZGQgb3VyIGRpdnMgdG8gaG9sZGVyIHdpdGggYnJlYWtzXG4gIG1lbnVIb2xkZXIuYXBwZW5kQ2hpbGQoc3RhcnREaXYpO1xuICBtZW51SG9sZGVyLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2hyJykpO1xuICBtZW51SG9sZGVyLmFwcGVuZENoaWxkKGVudHJlZURpdik7XG4gIG1lbnVIb2xkZXIuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaHInKSk7XG4gIG1lbnVIb2xkZXIuYXBwZW5kQ2hpbGQoZmxhdERpdik7XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVuZGVyTHVuY2g7XG4iLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZGRkZTlmOWE3MDI3ZTY5ODZiNTI3ZDdlZWFmNjI0YjAuanBnXCI7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgQmFja2dyb3VuZCBmcm9tICcuLi9pbWcvVHJpYmVDaGFyY3V0ZXJpZS5qcGcnO1xuaW1wb3J0IHtcbiAgdXBkYXRlSGVyb1BpY1xufSBmcm9tICcuLi9jb21wb25lbnRzL2hlcm8nO1xuaW1wb3J0IHtcbiAgYnVpbGRNZW51VGl0bGUsXG4gIGJ1aWxkTWVudUl0ZW0sXG59IGZyb20gJy4uL2NvbXBvbmVudHMvYnVpbGRlcnMvbWVudXMnO1xuXG5jb25zdCByZW5kZXJTbWFsbCA9IChtZW51SG9sZGVyKSA9PiB7XG5cbiAgLy8gUmVmcmVzaCBoZXJvIGltYWdlXG4gIHVwZGF0ZUhlcm9QaWMoQmFja2dyb3VuZCk7XG5cbiAgLy8gUmVuZGVyIHRpdGxlIG9uIHBhZ2VcbiAgYnVpbGRNZW51VGl0bGUoXCJTbWFsbCBQbGF0ZXNcIiwgXCJTYWxhZHMgYW5kIHNtYWxsIHBsYXRlcyBhcmUgZWFzeSB0byBzaGFyZS5cIiArXG4gICAgXCIgRW5qb3kgb25lIGJlZm9yZSBhIG1lYWwsIG9yIGdldCAzLTQgYW5kIHNoYXJlIHRoZW0gZm9yIHlvdXIgbWVhbC5cIiArXG4gICAgXCIgV2UgYXJlIHdvcmtpbmcgaGFyZCB0byBtYWtlIHRoZSBjaGVm4oCZcyBib2FyZCB0aGUgYmVzdCBjb2xsZWN0aW9uIG9mIGNoYXJjdXRlcmllLFwiICtcbiAgICBcIiBjaGVlc2UsIGFuZCBnb29kaWVzIHRvIG5pYmJsZSBvbiwgaW4gdGhlIHJlZ2lvbi4gSGVscCB1cyBwcm9wYWdhdGUgdGhhdCBydW1vdXJcIiArXG4gICAgXCIgd2l0aCB5b3VyIHNvY2lhbCBtZWRpYSBwcm93ZXNzIGFuZCBuYXR1cmFsIGNoYXJtLi4uIFlvdeKAmWxsIGJlIHJld2FyZGVkIVwiKTtcblxuICAvLyBob2xkZXIgZm9yIG1lbnUgaXRlbXMsIHNvIHdlIGNhbiBhZGp1c3QgaW5kZXBlbmRlbnQgZnJvbSB0aXRsZS5cbiAgY29uc3QgbWVudURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBtZW51RGl2LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnbWVudS1kaXYnKTtcblxuICAvLyBCdWlsZCBtZW51IGl0ZW1zXG4gIGxldCBjaGVmQm9hcmQgPSBidWlsZE1lbnVJdGVtKFwiY2hlZidzIGJvYXJkXCIsIFwiMzRcIiwgXCJhIGZpbmUgY29sbGVjdGlvbiBvZiBtZWF0cywgXCIgK1xuICAgIFwiY2hlZXNlcywgYW5kIG90aGVyIGVkaWJsZSBkZWxpZ2h0cyBmcm9tIHRoZSBtaW5kcyBvZiBvdXIgY2hlZnMuIFNlcnZlcyAyLTRcIik7XG4gIGxldCBjaGFyY3V0ID0gYnVpbGRNZW51SXRlbShcInVuZSBwZXRpdGUgY2hhcmN1dGVyaWVcIiwgXCIxOFwiLCBcImEgc21hbGxlciB2ZXJzaW9uIG9mIHRoZSBjaGVm4oCZcyBib2FyZC4gU2VydmVzIDEtMi5cIik7XG4gIGxldCB0aHVtcCA9IGJ1aWxkTWVudUl0ZW0oXCJ0aHVtcGVycyBmZWFzdFwiLCBcIjE4XCIsIFwiYSB2ZWdldGFyaWFuIHZlcnNpb24gb2YgdGhlIGNoZWYncyBib2FyZC4gU2VydmVzIDEtMlwiKTtcbiAgbGV0IHBvdXRpbmUgPSBidWlsZE1lbnVJdGVtKFwiY2FzdCBpcm9uIHBvdXRpbmVcIiwgXCIxMlwiLCBcInBvdGF0b2VzLCBjaGVlc2UsIGJhY29uIGluIGEgY2FzdCBpcm9uIGZyeSBwYW4uXCIpO1xuICBsZXQgdG9tYXRvZXMgPSBidWlsZE1lbnVJdGVtKFwicm9hc3RlZCB0b21hdG9lc1wiLCBcIjEyXCIsIFwicm9hc3RlZCB0b21hdG9lcywgd2l0aCBmcmVzaCBoZXJicyBhbmQgZ29hdCBjaGVlc2UuIFNlcnZlZCB3aXRoIG91ciBvd24sIGhvdXNlLW1hZGUgY2lhYmF0dGEuXCIpO1xuICBsZXQgdHJpYmVTYWxhZCA9IGJ1aWxkTWVudUl0ZW0oXCJ0cmliZSBzYWxhZFwiLCBcIjEzXCIsIFwiY2FudGFsb3VwZSwgY3VjdW1iZXIsIHRvbWF0bywgZ29hdCBjaGVlc2UsXCIgK1xuICAgIFwiIG51dHMsIGthbGFtYXRhIG9saXZlcywgbGltZSwgY2lsYW50cm8sIHJlZCBvbmlvbi5cIiwgW1wiYWRkIHByb3NjdWl0dG8gJDNcIl0pO1xuICBsZXQgbGRFZ2dzID0gYnVpbGRNZW51SXRlbShcImxlbW9uIGRldmlsbGVkIGVnZ3NcIiwgXCI5XCIsIFwidGFycmFnb24gY3JlYW0gY2hlZXNlIHN0dWZmZWQgZWdncyxcIiArXG4gICAgXCIgd2l0aCBzaGF2ZWQgc2hhcnAgY2hlZXNlLCBvbiBhIGJlZCBvZiBhcnVndWxhLCB3aXRoIGdpbmdlciBsZW1vbiBkcmVzc2luZy5cIik7XG4gIGxldCBzcHJlYWQgPSBidWlsZE1lbnVJdGVtKFwic3ByZWFkIGFuZCBicmVhZFwiLCBcIjEyXCIsIFwidGhlIHdvcmxkJ3MgYmVzdCBzcGluYWNoIGRpcCBvciBNYXhpbWlsbGlvbidzIGh1bW11cyxcIiArXG4gICAgXCIgc2VydmVkIHdpdGggSXJhbmlhbiBmbGF0YnJlYWQsIHNlYXNvbmVkIHdpdGggWmF0YXIgc3BpY2UuXCIpO1xuICBsZXQgcG9ydG8gPSBidWlsZE1lbnVJdGVtKFwiZWF0IHlvdXIgcm9ja2V0LCBzdHVmZmVkIHBvcnRhYmVsbG9cIiwgXCIxNFwiLCBcImJha2VkIHBvcnRhYmVsbG8sIHN0dWZmZWQgd2l0aCBjcmVhbSBjaGVlc2VcIiArXG4gICAgXCIgYW5kIGhlcmJzLiBUb3BwZWQgd2l0aCBKYXBhbmVzZSBicmVhZCBjcnVtYnMsIG9uIGEgYmVkIG9mIGFydWd1bGEsIHdpdGggbGVtb24gZ2luZ2VyIGRyZXNzaW5nLi4uIHdoaWNoIHdlIHN0cm9uZ2x5IGVuY291cmFnZSB5b3UgdG8gZGV2b3VyIVwiKVxuICBsZXQgcm9ja2V0U2FsYWQgPSBidWlsZE1lbnVJdGVtKFwicm9ja2V0IHNhbGFkXCIsIFwiOVwiLCBcImFydWd1bGEsIHdpdGggZ2luZ2VyIGxlbW9uIGRyZXNzaW5nLlwiICtcbiAgICBcIiB0b3BwZWQgd2l0aCBiZWV0LCBkaWxsIGluZnVzZWQgcGlja2xlZCBvbmlvbnMuXCIpO1xuXG5cbiAgLy8gQXBwZW5kIGl0ZW1zIHRvIHBhZ2VcbiAgbWVudURpdi5hcHBlbmRDaGlsZChjaGVmQm9hcmQpO1xuICBtZW51RGl2LmFwcGVuZENoaWxkKGNoYXJjdXQpO1xuICBtZW51RGl2LmFwcGVuZENoaWxkKHRodW1wKTtcbiAgbWVudURpdi5hcHBlbmRDaGlsZChwb3V0aW5lKTtcbiAgbWVudURpdi5hcHBlbmRDaGlsZCh0b21hdG9lcyk7XG4gIG1lbnVEaXYuYXBwZW5kQ2hpbGQodHJpYmVTYWxhZCk7XG4gIG1lbnVEaXYuYXBwZW5kQ2hpbGQobGRFZ2dzKTtcbiAgbWVudURpdi5hcHBlbmRDaGlsZChzcHJlYWQpO1xuICBtZW51RGl2LmFwcGVuZENoaWxkKHBvcnRvKTtcbiAgbWVudURpdi5hcHBlbmRDaGlsZChyb2NrZXRTYWxhZCk7XG5cbiAgLy8gQWRkIG91ciBkaXYgdG8gaG9sZGVyXG4gIG1lbnVIb2xkZXIuYXBwZW5kQ2hpbGQobWVudURpdik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlbmRlclNtYWxsO1xuIiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImQ1ZmJmMGUzNmY5MDYzNDIyMWRmNTdhZGExYWJlMzFhLmpwZ1wiOyIsIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IEJhY2tncm91bmQgZnJvbSAnLi4vaW1nL1RyaWJlT2ZmZXJpbmcuanBnJztcbmltcG9ydCB7XG4gIHVwZGF0ZUhlcm9QaWNcbn0gZnJvbSAnLi4vY29tcG9uZW50cy9oZXJvJztcbmltcG9ydCB7XG4gIGJ1aWxkTWVudVRpdGxlLFxuICBidWlsZE1lbnVJdGVtLFxufSBmcm9tICcuLi9jb21wb25lbnRzL2J1aWxkZXJzL21lbnVzJztcblxuY29uc3QgcmVuZGVyQmlnID0gKG1lbnVIb2xkZXIpID0+IHtcblxuICAvLyBSZWZyZXNoIGhlcm8gaW1hZ2VcbiAgdXBkYXRlSGVyb1BpYyhCYWNrZ3JvdW5kKTtcblxuICAvLyBSZW5kZXIgdGl0bGUgb24gcGFnZVxuICBidWlsZE1lbnVUaXRsZShcIkJpZyBQbGF0ZXNcIiwgXCJTbyBsZXTigJlzIHRhbGsgbWFpbnM7IE5vdCBvbmx5IGFyZSB0aGVzZSBkaXNoZXNcIiArXG4gICAgXCIgZGVsaWNpb3VzLCBidXQgdGhleSBhcmUgYWxzbyBoYXJkeS4gT3VyIG1haW5zIGNoYW5nZSBldmVyeSBvbmNlIGluIGEgd2hpbGUsIGJ1dCBcIiArXG4gICAgXCIgd2UgYWx3YXlzIHVzZSB0aGUgZmluZXN0IGluZ3JlZGllbnRzIHdlIGNhbiBzb3VyY2UsIGZhdm9yaW5nIGxvY2FsICYgcmVnaW9uYWwgcHJvZHVjdHMgd2hlcmV2ZXIgcG9zc2libGUhXCIpO1xuXG4gIC8vIGhvbGRlciBmb3IgbWVudSBpdGVtcywgc28gd2UgY2FuIGFkanVzdCBpbmRlcGVuZGVudCBmcm9tIHRpdGxlLlxuICBjb25zdCBtZW51RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIG1lbnVEaXYuc2V0QXR0cmlidXRlKCdjbGFzcycsICdtZW51LWRpdicpO1xuXG4gIC8vIEJ1aWxkIG1lbnUgaXRlbXNcbiAgbGV0IGdvakNoaWNrID0gYnVpbGRNZW51SXRlbShcImdvY2h1amFuZyBjaGlja2VuXCIsIFwiMjJcIiwgXCJrb3JlYW4tc3R5bGUgY2hpY2tlbiB3aXRoIGNvY29udXQgcmljZSwgdG9wcGVkIHdpdGggbm9yaSAmIHNlc2FtZSBzZWVkLCBzZXJ2ZWQgd2l0aCBraW0gY2hpIHNsYXcuXCIpO1xuICBsZXQgbWFjTkNoZWVzZSA9IGJ1aWxkTWVudUl0ZW0oXCJjcmFiIGFuZCBzaHJpbXAgbWFjICYgY2hlZXNlXCIsIFwiMjRcIiwgXCJwYW5rbyBjcnVzdGVkIGNoZWVzZXkgY2F2YXRhcHBpLCB3aXRoIGNyYWIgYW5kIHNocmltcCwgYW5kIGEgc2lkZSBvZiBhcnVndWxhIHNhbGFkLlwiICtcbiAgICBcIiB0b3BwZWQgd2l0aCBiZWV0LXBpY2tsZWQgb25pb24sIGFuZCBhIHNsaWNlIG9mIGhvdXNlLW1hZGUgYnV0dGVyZWQgYnJlYWQuXCIpO1xuICBsZXQgbW91c2FrYSA9IGJ1aWxkTWVudUl0ZW0oXCJvdXpvIG1vdXNha2FcIiwgXCIyM1wiLCBcInN1bHRhbmEgcmFpc2luIGJlZWYgcmFndSwgcm9hc3RlZCBlZ2dwbGFudCwgb25pb24sIHRvbWF0bywgYmVsbCBwZXBwZXIsIGdhcmxpYywgcG90YXRvLCBsZW1vbiwgc2NlbnRlZCBiZWNoYW1lbC5cIik7XG4gIGxldCBtdXNzZWxzID0gYnVpbGRNZW51SXRlbShcIm11c3NlbHNcIiwgXCIyNFwiLCBcIm9uZSBwb3VuZCBvZiBzdGVhbWVkIG11c3NlbHMgaW4gc3BpY3kgd2hpdGUgd2luZSBzYXVjZSwgc2VydmVkIG9uIGEgYmVkIG9mIHdpbHRlZCBzcGluYWNoIHdpdGggVHJpYmUgbWFkZSBydXN0aWMgYnJlYWQuXCIpO1xuXG5cbiAgLy8gQXBwZW5kIGl0ZW1zIHRvIHBhZ2VcbiAgbWVudURpdi5hcHBlbmRDaGlsZChnb2pDaGljayk7XG4gIG1lbnVEaXYuYXBwZW5kQ2hpbGQobWFjTkNoZWVzZSk7XG4gIG1lbnVEaXYuYXBwZW5kQ2hpbGQobW91c2FrYSk7XG4gIG1lbnVEaXYuYXBwZW5kQ2hpbGQobXVzc2Vscyk7XG5cbiAgLy8gQWRkIG91ciBkaXYgdG8gaG9sZGVyXG4gIG1lbnVIb2xkZXIuYXBwZW5kQ2hpbGQobWVudURpdik7XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVuZGVyQmlnO1xuIiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImE0MWY2MzNlNjM1NWNkZDJjNjE2ZmUwNmI5M2YxYjQxLmpwZ1wiOyIsIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IEJhY2tncm91bmQgZnJvbSAnLi4vaW1nL1RyaWJlUGl6emEyLmpwZyc7XG5pbXBvcnQge1xuICB1cGRhdGVIZXJvUGljXG59IGZyb20gJy4uL2NvbXBvbmVudHMvaGVybyc7XG5pbXBvcnQge1xuICBidWlsZE1lbnVUaXRsZSxcbiAgYnVpbGRNZW51SXRlbSxcbn0gZnJvbSAnLi4vY29tcG9uZW50cy9idWlsZGVycy9tZW51cyc7XG5cbmNvbnN0IHJlbmRlckZsYXQgPSAobWVudUhvbGRlcikgPT4ge1xuXG4gIC8vIFJlZnJlc2ggaGVybyBpbWFnZVxuICB1cGRhdGVIZXJvUGljKEJhY2tncm91bmQpO1xuXG4gIC8vIFJlbmRlciB0aXRsZSBvbiBwYWdlXG4gIGJ1aWxkTWVudVRpdGxlKFwiRmxhdCBQbGF0ZXNcIiwgXCJUaGUgc2VjcmV0IGlzIGluIG91ciBmbGFrZXksIGhvdXNlIG1hZGUgY3J1c3QuXCIgK1xuICBcIiBBdG9wIGl0IHNpdHMgYSBmbGF2b3JmdWwgYXJyYXkgb2YgbW91dGh3YXRlcmluZyB0b3BwaW5ncywgYmFrZWQgdG8gcGVyZmVjdGlvbi5cIik7XG5cbiAgLy8gQnVpbGQgbWVudSBpdGVtc1xuICAvLyBob2xkZXIgZm9yIG1lbnUgaXRlbXMsIHNvIHdlIGNhbiBhZGp1c3QgaW5kZXBlbmRlbnQgZnJvbSB0aXRsZS5cbiAgY29uc3QgbWVudURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBtZW51RGl2LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnbWVudS1kaXYnKTtcblxuICBsZXQgc25hcERyZXMgPSBidWlsZE1lbnVJdGVtKFwic25hcHB5IGRyZXNzZXJcIiwgXCIxOFwiLCBcIml0YWxpYW4gc2F1c2FnZSwgZ3JlZW4gcGVwcGVyLCBtdXNocm9vbSxcIiArXG4gIFwiIG9uaW9uLCBtb3p6YXJlbGxhLCB0b21hdG8gYmFzaWwgc2F1Y2UuXCIpO1xuICBsZXQgZWNNYWMgPSBidWlsZE1lbnVJdGVtKFwiZWFzdCBjb2FzdCBtYWNcIiwgXCIxOFwiLCBcInNocmltcCBhbmQgY3JhYiBtYWMgYW5kIGNoZWVzZSwgdG9wcGVkIHdpdGggZXZlbiBtb3JlIGNoZWVzZSFcIik7XG4gIGxldCBzcHJvdXQgPSBidWlsZE1lbnVJdGVtKFwic3Byb3V0XCIsIFwiMTRcIiwgXCJzaHJlYWRlZCBicnVzc2VsIHNwcm91dHMsIGNhcm1lbGl6ZWQgb25pb24sIFwiICtcbiAgXCJnb2F0IGNoZWVzZSwgZHJpenpsZSBvZiByaWNoIGJhbHNhbWljIGdsYXplLlwiKTtcbiAgbGV0IGZ1bmdGcm9tID0gYnVpbGRNZW51SXRlbShcImZ1bmdpIGFuZCBmcm9tYWdlXCIsIFwiMTdcIiwgXCJjcmVtaW5pIGFuZCBwb3J0b2JlbGxvIG11c2hyb29tcywgc21va2VkIGdvdWRhIGFuZCBhc2FnaW8uXCIpO1xuICBsZXQgcnVzdGljbyA9IGJ1aWxkTWVudUl0ZW0oXCJydXN0aWNvXCIsIFwiMTJcIiwgXCJtb3p6YXJlbGxhLCBhcnVndWxhLCBiYXNpbCwgdG9tYXRvIGJhc2lsIHNhdWNlLlwiKTtcbiAgbGV0IHNlb3VsID0gYnVpbGRNZW51SXRlbShcInNlb3VsIHNlcmNoaW5nXCIsIFwiMThcIiwgXCJnb2NodWphbmcgY2hpY2tlbiwga2ltY2hpLCBtb3p6YS5cIik7XG4gIGxldCBmcmVlTG92ZSA9IGJ1aWxkTWVudUl0ZW0oXCJmcmVlIGxvdmVcIiwgXCIxOFwiLCBcInByb3NjdWl0dG8sIGdvYXQgY2hlZXNlLCBzYWx0eSBudXRzLCBwaWNrbGVkIGRpbGwgb25pb25zIGFuZCBmaWcgamFtLlwiKVxuICBsZXQgbWFycmFrZXNoID0gYnVpbGRNZW51SXRlbShcIm1hcnJha2VzaFwiLCBcIjE4XCIsIFwibW9yb2NjYW4tc3BpY2VkIGNoaWNrZW4sIHJvYXN0ZWQgZ2FybGljLCBcIiArXG4gICAgXCJ0dXJtZXJpYyB5b2d1cnQsIGNhcmFtZWxpemVkIG9uaW9uLCBnb2F0IGNoZWVzZSwgZ3JlZW4gb2xpdmUsIHJvYXN0ZWQgbGVtb24sIGhvbmV5IGRyaXp6bGUuXCIpO1xuICBsZXQgc2FsdExpY2sgPSBidWlsZE1lbnVJdGVtKFwic2FsdCBsaWNrXCIsIFwiMTJcIiwgXCJjYXJhbWVsaXplZCBvbmlvbiwgdGFwZW5hZGUsIGNhcGVycywgbW96emFyZWxsYS5cIiwgW1wiYWRkIHByb3NjdWl0dG8gJDNcIl0pO1xuICBsZXQgY29wZW5oYWcgPSBidWlsZE1lbnVJdGVtKFwiY29wZW5oYWdlblwiLCBcIjE1XCIsIFwidGhpbmx5IHNsaWNlZCBwb3RhdG8sIHNtb2tlZCBjaGVkZGFyLCBwcm9zY3VpdHRvXCIpO1xuXG4gIC8vIEFwcGVuZCBpdGVtcyB0byBwYWdlXG4gIG1lbnVEaXYuYXBwZW5kQ2hpbGQoc25hcERyZXMpO1xuICBtZW51RGl2LmFwcGVuZENoaWxkKGVjTWFjKTtcbiAgbWVudURpdi5hcHBlbmRDaGlsZChzcHJvdXQpO1xuICBtZW51RGl2LmFwcGVuZENoaWxkKGZ1bmdGcm9tKTtcbiAgbWVudURpdi5hcHBlbmRDaGlsZChydXN0aWNvKTtcbiAgbWVudURpdi5hcHBlbmRDaGlsZChzZW91bCk7XG4gIG1lbnVEaXYuYXBwZW5kQ2hpbGQoZnJlZUxvdmUpO1xuICBtZW51RGl2LmFwcGVuZENoaWxkKG1hcnJha2VzaCk7XG4gIG1lbnVEaXYuYXBwZW5kQ2hpbGQoc2FsdExpY2spO1xuICBtZW51RGl2LmFwcGVuZENoaWxkKGNvcGVuaGFnKTtcblxuICAvLyBBZGQgb3VyIGRpdiB0byBob2xkZXJcbiAgbWVudUhvbGRlci5hcHBlbmRDaGlsZChtZW51RGl2KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVuZGVyRmxhdDtcbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJkOWE2ZmFhYzkyYjcwZTYwZWRiY2E1NzRiZDYzZTI1MC5qcGdcIjsiLCJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCBCYWNrZ3JvdW5kIGZyb20gJy4uL2ltZy9UcmliZURlc3NlcnQuanBnJztcbmltcG9ydCB7XG4gIHVwZGF0ZUhlcm9QaWNcbn0gZnJvbSAnLi4vY29tcG9uZW50cy9oZXJvJztcbmltcG9ydCB7XG4gIGJ1aWxkTWVudVRpdGxlLFxuICBidWlsZE1lbnVJdGVtLFxufSBmcm9tICcuLi9jb21wb25lbnRzL2J1aWxkZXJzL21lbnVzJztcblxuY29uc3QgcmVuZGVyU3dlZXQgPSAobWVudUhvbGRlcikgPT4ge1xuXG4gIC8vIFJlZnJlc2ggaGVybyBpbWFnZVxuICB1cGRhdGVIZXJvUGljKEJhY2tncm91bmQpO1xuXG4gIC8vIFJlbmRlciB0aXRsZSBvbiBwYWdlXG4gIGJ1aWxkTWVudVRpdGxlKFwiU3dlZXQgUGxhdGVzXCIsIFwiQXQgdGhlIGVuZCBvZiBhbiBldmVuaW5nIG9mIGZhYnVsb3VzIHN0b3J5IHRlbGxpbmcgXCIgK1xuICAgIFwiYW5kIGxvdmUsIHdl4oCZdmUgZ290IGp1c3QgdGhlIHJpZ2h0IGFtb3VudCBvZiBzd2VldG5lc3MgdG8gdG9wIHRoaW5ncyBvZmYuIFRyeSBhXCIgK1xuICAgIFwiIGNvZmZlZSBhbmQgb25lIG9mIG91ciBob3VzZSBtYWRlIGRlc3NlcnRzLlwiKTtcblxuICAvLyBob2xkZXIgZm9yIG1lbnUgaXRlbXMsIHNvIHdlIGNhbiBhZGp1c3QgaW5kZXBlbmRlbnQgZnJvbSB0aXRsZS5cbiAgY29uc3QgbWVudURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBtZW51RGl2LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnbWVudS1kaXYnKTtcblxuICAvLyBCdWlsZCBtZW51IGl0ZW1zXG4gIGxldCBjaG9jb0Nha2UgPSBidWlsZE1lbnVJdGVtKFwibWFzaGVkIHBvdGF0byBjaG9jb2xhdGUgY2FrZSB3aXRoIHBlbnVjaGUgaWNpbmdcIiwgXCI5XCIsIFwic2VyaW91c2x5LCBhIHJpY2ggY2hvY29sYXRlIGNha2UsXCIgK1xuICAgIFwiIHdpdGggd2FsbnV0cywgYW5kIGEgYnJvd24gc3VnYXIgZnVkZ2UgaWNpbmcuXCIpO1xuICBsZXQgc2hvcnRCcmVhZCA9IGJ1aWxkTWVudUl0ZW0oXCJjaGVkZGFyIHNob3J0YnJlYWQgd2l0aCBzcGljZWQgYXBwbGVcIiwgXCI5XCIsIFwidmVyeSB0cmFkaXRpb25hbCBTY290dGlzaCBzaG9ydGJyZWFkIHJpZ2h0IG9mZiB0aGUgQ2FuYWRhXCIgK1xuICBcIiBDb3JuIFN0YXJjaCBib3ggd2l0aCBhIHZlcnkgVHJpYmUgY2hlZGRhciB0d2lzdCwgc2VydmVkIHdpdGggc3BpY2VkIGFwcGxlIGNvbXBvdGUuXCIpO1xuICBsZXQgbGVtb24gPSBidWlsZE1lbnVJdGVtKFwibGVtb24gamFyXCIsIFwiOVwiLCBcIndoZW4gbGlmZSBnaXZlcyB5b3UgbGVtb25zLCB0cmliZSBnaXZlcyB5b3UgbGVtb24gY2hlZXNlY2FrZS4uLiBhbmQgYmVycmllc1wiKTtcbiAgbGV0IGdlbGF0byA9IGJ1aWxkTWVudUl0ZW0oXCJ0cmliZSBnZWxhdG9cIiwgXCI5XCIsIFwid2UgbWFrZSBvdXIgZ2VsYXRvIGluIGhvdXNlLiBhc2sgYWJvdXQgb3VyIGZlYXR1cmVkIGZsYXZvdXJzLiBlYWNoIGlzIHBhaXJlZCB3aXRoIGFuIGFjY291dHJlbWVudC4uLiBzb21ldGhpbmcgcGVyZmVjdC5cIik7XG4gIGxldCBjaG9jb1BvdCA9IGJ1aWxkTWVudUl0ZW0oXCJheSBjYXJhbWJhIGNob2NvbGF0ZSBwb3RcIiwgXCI5XCIsIFwibWV4aWNhbi1zcGljZWQsIHJpY2gsIGNyZWFteSwgY2hvY29sYXRlLCB3aXRoIGZpcmUgZHVzdCB0byB3YXJtIHlvdXIgY29ja2xlcy5cIik7XG5cbiAgLy8gQXBwZW5kIGl0ZW1zIHRvIHBhZ2VcbiAgbWVudURpdi5hcHBlbmRDaGlsZChjaG9jb0Nha2UpO1xuICBtZW51RGl2LmFwcGVuZENoaWxkKHNob3J0QnJlYWQpO1xuICBtZW51RGl2LmFwcGVuZENoaWxkKGxlbW9uKTtcbiAgbWVudURpdi5hcHBlbmRDaGlsZChnZWxhdG8pO1xuICBtZW51RGl2LmFwcGVuZENoaWxkKGNob2NvUG90KTtcblxuICAvLyBBZGQgb3VyIGRpdiB0byBob2xkZXJcbiAgbWVudUhvbGRlci5hcHBlbmRDaGlsZChtZW51RGl2KTtcblxufVxuXG5leHBvcnQgZGVmYXVsdCByZW5kZXJTd2VldDtcbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhNWY3NTZiYzhjNDM5M2RkMWRhZTQ5YmJiNmRhNzk5ZS5qcGdcIjsiLCJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCBCYWNrZ3JvdW5kIGZyb20gJy4uL2ltZy9UcmliZUNvZmZlZS5qcGcnO1xuaW1wb3J0IHtcbiAgdXBkYXRlSGVyb1BpY1xufSBmcm9tICcuLi9jb21wb25lbnRzL2hlcm8nO1xuaW1wb3J0IHtcbiAgYnVpbGRNZW51VGl0bGUsXG4gIGJ1aWxkTWVudUl0ZW0sXG59IGZyb20gJy4uL2NvbXBvbmVudHMvYnVpbGRlcnMvbWVudXMnO1xuXG5jb25zdCByZW5kZXJDb2ZmZWUgPSAobWVudUhvbGRlcikgPT4ge1xuXG4gIC8vIFJlZnJlc2ggaGVybyBpbWFnZVxuICB1cGRhdGVIZXJvUGljKEJhY2tncm91bmQpO1xuXG4gIC8vIFJlbmRlciB0aXRsZSBvbiBwYWdlXG4gIGJ1aWxkTWVudVRpdGxlKFwiQ29mZmVlXCIsIFwiU2l0IGJhY2ssIHRha2UgYSBsb2FkIG9mZiwgc2lwIG9uIG9uZSBvZiB0aGUgY2xhc3NpY3MuXCIpO1xuXG4gIC8vIGhvbGRlciBmb3IgbWVudSBpdGVtcywgc28gd2UgY2FuIGFkanVzdCBpbmRlcGVuZGVudCBmcm9tIHRpdGxlLlxuICBjb25zdCBtZW51RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIG1lbnVEaXYuc2V0QXR0cmlidXRlKCdjbGFzcycsICdtZW51LWRpdicpO1xuXG4gIC8vIEJ1aWxkIG1lbnUgaXRlbXNcbiAgbGV0IGFtZXJpY2FubyA9IGJ1aWxkTWVudUl0ZW0oXCJhbWVyaWNhbm9cIiwgXCIzXCIsIFwiYmFzaWNhbGx5IGNvZmZlZSwgZXNwcmVzc28gYW5kIHdhdGVyLlwiKTtcbiAgbGV0IGVzcHJlc3NvID0gYnVpbGRNZW51SXRlbShcImVzcHJlc3NvXCIsIFwiM1wiLCBcInN0cm9uZyBjb2ZmZWUsIHRpbnkgY3VwLlwiKTtcbiAgbGV0IGxhdHRlID0gYnVpbGRNZW51SXRlbShcImxhdHRlXCIsIFwiNVwiLCBcIm9uZSBsb25nIGVzcHJlc3NvIHNob3QsIGluIGEgdGFsbCBjdXAgd2l0aCBzdGVhbWVkIG1pbGsuXCIpO1xuICBsZXQgY2FwcHVjY2lubyA9YnVpbGRNZW51SXRlbShcImNhcHB1Y2Npbm9cIiwgXCI1XCIsIFwib25lIGxvbmcgZXNwcmVzc28gc2hvdCwgaW4gYSBzaG9ydCBjdXAgd2l0aCBzdGVhbWVkIG1pbGsgYW5kIG1pY3JvZm9hbS5cIik7XG4gIGxldCB0ZWFMYXR0ZSA9IGJ1aWxkTWVudUl0ZW0oXCJ0ZWEgbGF0dGVcIiwgXCI1XCIsIFwidGVhLCBpbiBhIHRhbGwgY3VwIHdpdGggc3RlYW1lZCBtaWxrLlwiKTtcbiAgbGV0IHNsb3dDb2YgPSBidWlsZE1lbnVJdGVtKFwic2xvdyBjb2ZmZWVcIiwgXCI4XCIsIFwicG91ci1vdmVyLCBzbG93IGNvZmZlLCBmaXQgZm9yIHR3by5cIik7XG4gIGxldCBtb2NoYSA9IGJ1aWxkTWVudUl0ZW0oXCJjYWZmZWUgbW9jaGFcIiwgXCI1XCIsIFwibGF0dGUgd2l0aCBjaG9jb2xhdGVcIik7XG5cbiAgLy8gQXBwZW5kIGl0ZW1zIHRvIHBhZ2VcbiAgbWVudURpdi5hcHBlbmRDaGlsZChhbWVyaWNhbm8pO1xuICBtZW51RGl2LmFwcGVuZENoaWxkKGVzcHJlc3NvKTtcbiAgbWVudURpdi5hcHBlbmRDaGlsZChsYXR0ZSk7XG4gIG1lbnVEaXYuYXBwZW5kQ2hpbGQoY2FwcHVjY2lubyk7XG4gIG1lbnVEaXYuYXBwZW5kQ2hpbGQodGVhTGF0dGUpO1xuICBtZW51RGl2LmFwcGVuZENoaWxkKHNsb3dDb2YpO1xuICBtZW51RGl2LmFwcGVuZENoaWxkKG1vY2hhKTtcblxuICAvLyBBZGQgb3VyIGRpdiB0byBob2xkZXJcbiAgbWVudUhvbGRlci5hcHBlbmRDaGlsZChtZW51RGl2KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVuZGVyQ29mZmVlO1xuIiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjZkNjZmODJlZmU3NzE0Yzk2MjExMzkwZjBlMGFlMWVmLmpwZ1wiOyIsIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IEJhY2tncm91bmQgZnJvbSAnLi4vaW1nL1RyaWJlT3Jhbmdlcy5qcGcnO1xuaW1wb3J0IHtcbiAgdXBkYXRlSGVyb1BpY1xufSBmcm9tICcuLi9jb21wb25lbnRzL2hlcm8nO1xuaW1wb3J0IHtcbiAgYnVpbGRNZW51VGl0bGUsXG4gIGJ1aWxkTWVudUl0ZW0sXG59IGZyb20gJy4uL2NvbXBvbmVudHMvYnVpbGRlcnMvbWVudXMnO1xuXG5jb25zdCByZW5kZXJDb2NrdGFpbHMgPSAobWVudUhvbGRlcikgPT4ge1xuXG4gIC8vIFJlZnJlc2ggaGVybyBpbWFnZVxuICB1cGRhdGVIZXJvUGljKEJhY2tncm91bmQpO1xuXG4gIC8vIFJlbmRlciB0aXRsZSBvbiBwYWdlXG4gIGJ1aWxkTWVudVRpdGxlKFwiQ29ja3RhaWxzXCIsIFwiSGFuZGNyYWZ0ZWQgY29ja3RhaWxzLCBhbG9uZyB3aXRoIGFuIGV2ZXJjaGFuZ2luZyBsb2NhbCBjcmFmdCBiZWVyIG1lbnUuLi5cIiArXG4gIFwiIGJ1dCB5b3Ugd2lsbCBoYXZlIHRvIGNvbWUgaW4gdG8gY2hlY2sgdGhhdCBvdXQuXCIpO1xuXG4gIC8vIGhvbGRlciBmb3IgbWVudSBpdGVtcywgc28gd2UgY2FuIGFkanVzdCBpbmRlcGVuZGVudCBmcm9tIHRpdGxlLlxuICBjb25zdCBtZW51RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIG1lbnVEaXYuc2V0QXR0cmlidXRlKCdjbGFzcycsICdtZW51LWRpdicpO1xuXG4gIC8vIEJ1aWxkIG1lbnUgaXRlbXNcbiAgbGV0IGVhcnRoQ2hlcnJ5ID0gYnVpbGRNZW51SXRlbShcIjo6ZWFydGggdG8gY2hlcnJ5IG1vb25cIiwgXCIoMm96KVwiLCBcInRvcCBzaGVsZiBib3VyYm9uLFwiICtcbiAgXCIgYmxhY2tiZXJyeSBsaXF1ZXVyLCBnaW5nZXIsIGxlbW9uIGp1aWNlLCBib3VyYm9uIHNvYWtlZCBjaGVycmllcywgbnV0bWVnLlwiKTtcbiAgbGV0IGdlbnQgPSBidWlsZE1lbnVJdGVtKFwiOjp0ZW1wb3JhcnkgZ2VudGxlbWFuXCIsIFwiKDJveilcIiwgXCJ0b3Agc2hlbGYgYm91cmJvbiwgc2ltcGxlIHN5cm9wLCBjaGVycnkgYml0dGVycywgYm91cmJvbiBzb2FrZWQgY2hlcnJpZXMsIG9yYW5nZSB0d2lzdC5cIik7XG4gIGxldCBwaW5rID0gYnVpbGRNZW51SXRlbShcIjo6c29tZXRoaW5nIHBpbmtcIiwgXCIoMm96KVwiLCBcInJhc3BiZXJyeSB2b2RrYSwgc2FpbnQgZ2VybWFpbiwgYXBlcm9sLCBsaW1lLCBkYXNoIG9mIHBvbWVncmFuYXRlIHN5cnVwLlwiKTtcbiAgbGV0IGNhZXNhciA9IGJ1aWxkTWVudUl0ZW0oXCI6OmRpcnkgY2Flc2FyXCIsIFwiKDJveilcIiwgXCJkaWxsIHBpY2tsZSB2b2RrYSwgd2FsdGVyJ3MgY2Flc2FyIGNvbmNvY3Rpb24sIGxlbW9uIHBlcHBlciwgZG91YmxlIHBpY2tsZXMuXCIpO1xuICBsZXQgbWFpVGFpID0gYnVpbGRNZW51SXRlbShcIjo6dHdvIGRlY2FkZSBtYWkgdGFpXCIsIFwiKDJveilcIiwgXCJhbWJlciBydW0sIGFtYXJldHRvLCBvcmFuZ2UgbGlxdWV1ciwgcGluZWFwcGxlLCBvcmFuZ2UgYW5kIGd1YXZhIGp1aWNlLlwiKTtcbiAgbGV0IGh1bGEgPSBidWlsZE1lbnVJdGVtKFwiOjpodWxhIHRodW5kZXJcIiwgXCIoM296KVwiLCBcImFsbW9uZCBsaXF1ZXVyLCBwaW5lYXBwbGUgJiBjb2NvbnV0IHJ1bSwgYmx1ZSBjdXJhY2FvLCBjcmVhbS5cIik7XG4gIGxldCBwZXJmTWFyZyA9IGJ1aWxkTWVudUl0ZW0oXCI6OnBlcmZlY3RvIG1hcmdhcml0YVwiLCBcIigyb3opXCIsIFwiZ29sZCB0ZXF1aWxhLCBncmFuZCBtYXJuaWVyLCBmcmVzaCBsaW1lIGp1aWNlLCBjaW5uYW1vbiBzeXJ1cCwgb24gdGhlIHJvY2tzLlwiKTtcbiAgbGV0IHpvbWJpZSA9IGJ1aWxkTWVudUl0ZW0oXCI6OnByYXJpZSB6b21iaWVcIiwgXCIoM296KVwiLCBcInRlcXVpbGEsIGRhcmsgcnVtLCBibHVlIG9yYW5nZSBsaXF1ZXIsIG11ZGRsZWQgbWludCwgZ3VhdmEganVpY2UsIGNheWVubmUgc2ltcGxlIHN5cnVwLCBmbG9hdCBvZiBwb21hZ3JhbmF0ZSBsaXF1ZXVyLlwiKTtcbiAgbGV0IHNvbGFyID0gYnVpbGRNZW51SXRlbShcIjo6c29sYXIgZmxhaXJcIiwgXCIoMm96KVwiLCBcImFxdWF2aXQsIGNoYXJ0cnVlc2UgZXNwaXNjb3BhbCwgY2F5ZW5uZSwgYmFzaWwuXCIpO1xuICBsZXQgcmFzcE1hcmcgPSBidWlsZE1lbnVJdGVtKFwiOjpibGFjayByYXNwYmVycnkgbWFyZ2FyaXRhXCIsIFwiKDJveilcIiwgXCJ0ZXF1aWxhLCBjaGFtYm9yZCwgZ2luZXIgc3lydXAsIGZyZXNoIHNxdWVlemVkIGxpbWUuXCIpO1xuICBsZXQgZmxvYXQgPSBidWlsZE1lbnVJdGVtKFwiOjpiYW1ib28gZmxvYXRcIiwgXCIoMG96KVwiLCBcInR3byBwYXJ0cyBoeWRyb2dlbiwgb25lIHBhcnQgb3h5Z2VuIGFuZCBidWJibGVzLCB3aXRoIGEgc3BlYXIgb2Yga2lsbi1kcmllZCBiYW1ib28sIGNpdHJ1cyB3ZWRnZS4gLSAkMS41MFwiKVxuXG4gIC8vIEFwcGVuZCBpdGVtcyB0byBwYWdlXG4gIG1lbnVEaXYuYXBwZW5kQ2hpbGQoZWFydGhDaGVycnkpO1xuICBtZW51RGl2LmFwcGVuZENoaWxkKGdlbnQpO1xuICBtZW51RGl2LmFwcGVuZENoaWxkKHBpbmspO1xuICBtZW51RGl2LmFwcGVuZENoaWxkKGNhZXNhcik7XG4gIG1lbnVEaXYuYXBwZW5kQ2hpbGQobWFpVGFpKTtcbiAgbWVudURpdi5hcHBlbmRDaGlsZChodWxhKTtcbiAgbWVudURpdi5hcHBlbmRDaGlsZChwZXJmTWFyZyk7XG4gIG1lbnVEaXYuYXBwZW5kQ2hpbGQoem9tYmllKTtcbiAgbWVudURpdi5hcHBlbmRDaGlsZChzb2xhcik7XG4gIG1lbnVEaXYuYXBwZW5kQ2hpbGQocmFzcE1hcmcpO1xuICBtZW51RGl2LmFwcGVuZENoaWxkKGZsb2F0KTtcblxuICAvLyBBZGQgb3VyIGRpdiB0byBob2xkZXJcbiAgbWVudUhvbGRlci5hcHBlbmRDaGlsZChtZW51RGl2KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVuZGVyQ29ja3RhaWxzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHJlZnJlc2hNZW51ID0gKG1lbnUpID0+IHtcbiAgLy8gR3JhYiBhcnRpY2xlIHRvIGJ1aWxkIG1lbnVzIGluXG4gIGxldCBtZW51QXJ0aWNsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tZW51cy1hcnRpY2xlJyk7XG5cbiAgLy8gRW1wdHkgZXhpc3RpbmcgbWVudSBpZiB0aGVyZVxuICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1lbnUtaG9sZGVyJykpIHtcbiAgICAvLyBSZW1vdmUgbWVudS1ob2xkZXIgaWYgb25lIGV4aXN0cyBhbHJlYWR5XG4gICAgbWVudUFydGljbGUucmVtb3ZlQ2hpbGQobWVudUFydGljbGUuY2hpbGROb2Rlc1swXSk7XG4gIH1cbiAgLy8gQXBwZW5kIHRoZSBmcmVzaCBtZW51LWhvbGRlciBwYXNzZWQgaW4uXG4gIG1lbnVBcnRpY2xlLmluc2VydEJlZm9yZShtZW51LCBtZW51QXJ0aWNsZS5jaGlsZE5vZGVzWzBdKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVmcmVzaE1lbnU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIEltcG9ydHNcbmltcG9ydCByZW5kZXJCcnVuY2ggZnJvbSAnLi4vbWVudXMvcmVuZGVyQnJ1bmNoJztcbmltcG9ydCByZW5kZXJMdW5jaCBmcm9tICcuLi9tZW51cy9yZW5kZXJMdW5jaCc7XG5pbXBvcnQgcmVuZGVyU21hbGwgZnJvbSAnLi4vbWVudXMvcmVuZGVyU21hbGwnO1xuaW1wb3J0IHJlbmRlckJpZyBmcm9tICcuLi9tZW51cy9yZW5kZXJCaWcnO1xuaW1wb3J0IHJlbmRlckZsYXQgZnJvbSAnLi4vbWVudXMvcmVuZGVyRmxhdCc7XG5pbXBvcnQgcmVuZGVyU3dlZXQgZnJvbSAnLi4vbWVudXMvcmVuZGVyU3dlZXQnO1xuaW1wb3J0IHJlbmRlckNvZmZlZSBmcm9tICcuLi9tZW51cy9yZW5kZXJDb2ZmZWUnO1xuaW1wb3J0IHJlbmRlckNvY2t0YWlscyBmcm9tICcuLi9tZW51cy9yZW5kZXJDb2NrdGFpbHMnO1xuXG5pbXBvcnQgcmVmcmVzaE1lbnUgZnJvbSAnLi9yZWZyZXNoTWVudSc7XG5cbi8vIEdpdmVuIHRoZSBpbmRleCBvZiB0aGUgcGFnZSwgY2FsbCBhcHByb3Byb2F0ZSByZW5kZXIgZnVuY3Rpb24sIHBhc3Npbmdcbi8vIGluIHRoZSBtYWluIGJvZHkgY29udGVudCBpdCB3aWxsIHJlbmRlciB0by5cbmNvbnN0IG1lbnVDb250cm9sbGVyID0gKGluZGV4KSA9PiB7XG5cbiAgLy8gQ3JlYXRlIG5ldyBtZW51IGhvbGRlclxuICBjb25zdCBtZW51SG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIG1lbnVIb2xkZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdtZW51LWhvbGRlcicpO1xuXG4gIC8vIFJlZnJlc2ggbWVudUFydGljbGUgYW5kIGFwcGVuZCBvdXIgbmV3IG1lbnVob2xkZXJcbiAgcmVmcmVzaE1lbnUobWVudUhvbGRlcik7XG5cbiAgLy8gU3dpdGNoIGJhc2VkIG9uIGluZGV4IHByZXNzZWQgKG1lbnUgY2hvc2VuKVxuICBzd2l0Y2ggKGluZGV4KSB7XG4gICAgY2FzZSAoXCIxXCIpOlxuICAgICAgcmVuZGVyQnJ1bmNoKG1lbnVIb2xkZXIpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAoXCIyXCIpOlxuICAgICAgcmVuZGVyTHVuY2gobWVudUhvbGRlcik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIChcIjNcIik6XG4gICAgICByZW5kZXJTbWFsbChtZW51SG9sZGVyKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgKFwiNFwiKTpcbiAgICAgIHJlbmRlckJpZyhtZW51SG9sZGVyKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgKFwiNVwiKTpcbiAgICAgIHJlbmRlckZsYXQobWVudUhvbGRlcik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIChcIjZcIik6XG4gICAgICByZW5kZXJTd2VldChtZW51SG9sZGVyKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgKFwiN1wiKTpcbiAgICAgIHJlbmRlckNvZmZlZShtZW51SG9sZGVyKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgKFwiOFwiKTpcbiAgICAgIHJlbmRlckNvY2t0YWlscyhtZW51SG9sZGVyKTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVudUNvbnRyb2xsZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCBtZW51Q29udHJvbGxlciBmcm9tICcuLi9jb250cm9sbGVycy9tZW51Q29udHJvbGxlcic7XG5cbi8vIENvbnN0cnVjdCBhIGhlcm8gaW1hZ2UgZWxlbWVudCBhbmQgYWRkIHRvIHBhZ2VcbmNvbnN0IHJlbmRlckhlcm8gPSAodGV4dCwgaW1hZ2UsIGNvbnRlbnQsIGNvbG9yKSA9PiB7XG5cbiAgLy8gQnVpbGQgaW1hZ2UgYmFja2dyb3VuZFxuICBjb25zdCBpbWFnZURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBpbWFnZURpdi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2hlcm8taW1hZ2UnKTtcbiAgaW1hZ2VEaXYuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gYGxpbmVhci1ncmFkaWVudChyZ2JhKDAsIDAsIDAsIDAuNSksIHJnYmEoMCwgMCwgMCwgMC41KSksIHVybCgke2ltYWdlfSlgO1xuICBpbWFnZURpdi5zdHlsZS5ib3JkZXJCb3R0b20gPSBgM3B4IHNvbGlkICR7Y29sb3J9YDtcbiAgLy8gQnVpbGQgdGV4dFxuICBjb25zdCB0ZXh0RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHRleHREaXYuc2V0QXR0cmlidXRlKCdjbGFzcycsICdoZXJvLXRleHQnKTtcbiAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMScpO1xuICB0aXRsZS5pbm5lckhUTUwgPSB0ZXh0O1xuICB0ZXh0RGl2LmFwcGVuZENoaWxkKHRpdGxlKVxuXG4gIC8vIFB1dCB0b2dldGhlciBhbmQgYXBwZW5kIHRvIGNvbnRlbnRcbiAgaW1hZ2VEaXYuYXBwZW5kQ2hpbGQodGV4dERpdik7XG4gIGNvbnRlbnQuYXBwZW5kQ2hpbGQoaW1hZ2VEaXYpO1xuXG59XG5cbi8vIHVwZGF0ZSBiYWNrZ3JvdW5kIGltYWdlIG9mIGhlcm8gZWxlbWVudFxuY29uc3QgdXBkYXRlSGVyb1BpYyA9IChpbWFnZSkgPT4ge1xuICBsZXQgaW1hZ2VEaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVyby1pbWFnZScpO1xuICBpbWFnZURpdi5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBgbGluZWFyLWdyYWRpZW50KHJnYmEoMCwgMCwgMCwgMC41KSwgcmdiYSgwLCAwLCAwLCAwLjUpKSwgdXJsKCR7aW1hZ2V9KWA7XG59XG5cbi8vIHVwZGF0ZSBiYWNrZ3JvdW5kIGltYWdlIG9mIGhlcm8gZWxlbWVudFxuY29uc3QgcmVuZGVySGVyb01lbnUgPSAoKSA9PiB7XG4gIC8vIEdyYWIgaGVybyB0byBhdHRhdGNoIHRvXG4gIGxldCBpbWFnZURpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZXJvLWltYWdlJyk7XG5cbiAgLy8gRHJvcGRvd24gaG9sZGVyXG4gIGxldCBkcm9wZG93biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkcm9wZG93bi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3NlbGVjdCcpO1xuXG4gIC8vIFNlbGVjdCBtZW51XG4gIGxldCBzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWxlY3QnKTtcbiAgc2VsZWN0LnNldEF0dHJpYnV0ZSgnbmFtZScsICdzbGN0Jyk7XG4gIHNlbGVjdC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3NsY3QnKTtcblxuICAvLyBPcHRpb25zXG4gIGxldCBjaG9vc2VPcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgY2hvb3NlT3B0LnNldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnLCBcIlwiKTtcbiAgY2hvb3NlT3B0LnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCBcIlwiKTtcbiAgY2hvb3NlT3B0LmlubmVySFRNTCA9IFwiQ2hvb3NlIGEgbWVudVwiO1xuICBsZXQgYnJ1bmNoT3B0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gIGJydW5jaE9wdC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgXCIxXCIpO1xuICBicnVuY2hPcHQuaW5uZXJIVE1MID0gXCJCcnVuY2hcIjtcbiAgbGV0IGx1bmNoT3B0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gIGx1bmNoT3B0LnNldEF0dHJpYnV0ZSgndmFsdWUnLCBcIjJcIik7XG4gIGx1bmNoT3B0LmlubmVySFRNTCA9IFwiTHVuY2hcIjtcbiAgbGV0IHNtYWxsT3B0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gIHNtYWxsT3B0LnNldEF0dHJpYnV0ZSgndmFsdWUnLCBcIjNcIik7XG4gIHNtYWxsT3B0LmlubmVySFRNTCA9IFwiU21hbGwgUGxhdGVzXCI7XG4gIGxldCBiaWdPcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgYmlnT3B0LnNldEF0dHJpYnV0ZSgndmFsdWUnLCBcIjRcIik7XG4gIGJpZ09wdC5pbm5lckhUTUwgPSBcIkJpZyBQbGF0ZXNcIjtcbiAgbGV0IGZsYXRPcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgZmxhdE9wdC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgXCI1XCIpO1xuICBmbGF0T3B0LmlubmVySFRNTCA9IFwiRmxhdCBQbGF0ZXNcIjtcbiAgbGV0IHN3ZWV0T3B0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gIHN3ZWV0T3B0LnNldEF0dHJpYnV0ZSgndmFsdWUnLCBcIjZcIik7XG4gIHN3ZWV0T3B0LmlubmVySFRNTCA9IFwiU3dlZXQgUGxhdGVzXCI7XG4gIGxldCBjb2ZmZWVPcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgY29mZmVlT3B0LnNldEF0dHJpYnV0ZSgndmFsdWUnLCBcIjdcIik7XG4gIGNvZmZlZU9wdC5pbm5lckhUTUwgPSBcIkNvZmZlZVwiO1xuICBsZXQgY29ja3RhaWxPcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgY29ja3RhaWxPcHQuc2V0QXR0cmlidXRlKCd2YWx1ZScsIFwiOFwiKTtcbiAgY29ja3RhaWxPcHQuaW5uZXJIVE1MID0gXCJDb2NrdGFpbHNcIjtcblxuICAvLyBBZGQgb3B0aW9ucyB0byBkcm9wZG93blxuICBzZWxlY3QuYXBwZW5kQ2hpbGQoY2hvb3NlT3B0KTtcbiAgc2VsZWN0LmFwcGVuZENoaWxkKGJydW5jaE9wdCk7XG4gIHNlbGVjdC5hcHBlbmRDaGlsZChsdW5jaE9wdCk7XG4gIHNlbGVjdC5hcHBlbmRDaGlsZChzbWFsbE9wdCk7XG4gIHNlbGVjdC5hcHBlbmRDaGlsZChiaWdPcHQpO1xuICBzZWxlY3QuYXBwZW5kQ2hpbGQoZmxhdE9wdCk7XG4gIHNlbGVjdC5hcHBlbmRDaGlsZChzd2VldE9wdCk7XG4gIHNlbGVjdC5hcHBlbmRDaGlsZChjb2ZmZWVPcHQpO1xuICBzZWxlY3QuYXBwZW5kQ2hpbGQoY29ja3RhaWxPcHQpO1xuXG4gIC8vIEFkZCBsaXN0ZW5lciB0byBlYWNoIHNlbGVjdCBvcHRpb24gdG8gdHJpZ2dlciBtZW51IGNvbnRyb2xlbHIgd2hlbiBjbGlja2VkLlxuICBmb3IgKHZhciBpID0gMTsgaSA8IHNlbGVjdC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIHNlbGVjdC5jaGlsZHJlbltpXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICBtZW51Q29udHJvbGxlcihlLnRhcmdldC52YWx1ZSk7XG4gICAgfSlcbiAgfVxuXG4gIC8vIEFkZCB0byBkcm9wZG93biBob2xkZXJcbiAgZHJvcGRvd24uYXBwZW5kQ2hpbGQoc2VsZWN0KTtcblxuICAvLyBBZGQgY29tcGxldGVkIGRyb3Bkb3duIHRvIGhlcm9cbiAgaW1hZ2VEaXYuYXBwZW5kQ2hpbGQoZHJvcGRvd24pO1xufVxuXG5leHBvcnQge1xuICByZW5kZXJIZXJvLFxuICB1cGRhdGVIZXJvUGljLFxuICByZW5kZXJIZXJvTWVudSxcbn1cbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIyY2YzMDE1NTFlMzg5ZDUyMzBlNDg5MWM2ZTM5M2NmOS5wbmdcIjsiLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IExvZ28gZnJvbSAnLi4vaW1nL2xvZ28ucG5nJztcbmNvbnN0IHJlbmRlckxvZ28gPSAoY29udGVudCkgPT4ge1xuICBsZXQgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGltZy5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2xvZ28tZGl2Jyk7XG4gIGltZy5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBgdXJsKCR7TG9nb30pYDtcbiAgY29udGVudC5hcHBlbmRDaGlsZChpbWcpO1xufVxuXG5cbmV4cG9ydCBkZWZhdWx0IHJlbmRlckxvZ287XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IEJhY2tncm91bmQgZnJvbSAnLi4vaW1nL2hvdXJzQmFja2dyb3VuZENsaXAuanBnJztcbmltcG9ydCBidWlsZEhvdXJzQ2FyZCBmcm9tICcuLi9jb21wb25lbnRzL2J1aWxkZXJzL2J1aWxkSG91cnNDYXJkJztcbmltcG9ydCBidWlsZEFkZHJlc3NDYXJkIGZyb20gJy4uL2NvbXBvbmVudHMvYnVpbGRlcnMvYnVpbGRBZGRyZXNzQ2FyZCc7XG5cbmltcG9ydCB7XG4gIHJlbmRlckhlcm9cbn0gZnJvbSAnLi4vY29tcG9uZW50cy9oZXJvJztcbmltcG9ydCB7XG4gIGNoYW5nZUZvb3RlckNvbG9yXG59IGZyb20gJy4uL2NvbXBvbmVudHMvZm9vdGVyJztcbmltcG9ydCB7XG4gIHJlbmRlckFydGljbGUsXG59IGZyb20gJy4uL2NvbXBvbmVudHMvYXJ0aWNsZSc7XG5pbXBvcnQgcmVuZGVyTG9nbyBmcm9tICcuLi9jb21wb25lbnRzL3JlbmRlckxvZ28nO1xuaW1wb3J0IHtcbiAgY29sb3JQaWNrZXIsXG59IGZyb20gJy4uL2NvbXBvbmVudHMvY29sb3JzJztcblxuLy8gUmVuZGVyIGhvdXJzIHBhZ2VcbmNvbnN0IHJlbmRlckhvdXJzID0gKGNvbnRlbnQpID0+IHtcbiAgLy8gU2V0IG91ciBoZXJvIHZhcnMgZm9yIG91ciBob3VycyBwYWdlXG4gIGNvbnN0IGhlcm9VUkwgPSBCYWNrZ3JvdW5kO1xuICBjb25zdCBoZXJvVGV4dCA9IFwiV2UgYXJlIGEgY29udGVtcG9yYXJ5IHJlc3RhdXJhbnQgd2l0aCBhIG1pbmQgdG8gc291cmNlXCIgK1xuICAgIFwiIGxvY2FsLCBzZWFzb25hbCwgaW5ncmVkaWVudHMgdG8gY3JlYXRlIGZvb2QgaW5zcGlyZWQgZnJvbSBhcm91bmQgdGhlIHdvcmxkLiBcIiArXG4gICAgXCJUZXJyeSwgUGF1bCBhbmQgQnJhbmRvbiBhcmUgdHJhdmVsbGVycyBhbmQgZm9vZGllcy4gV2UgbG92ZSByaWNoIGludGVuc2UgZmxhdm91cnMsIFwiICtcbiAgICBcImZyZXNoIHByb2R1Y3RzLCBhbmQgc3BpY2UsIHlldOKApiB3ZSB1bmRlcnN0YW5kIHRoYXQgd2UgbGl2ZSBpbiBSZWQgRGVlciBhbmQgcGVvcGxlIGhlcmUgYWxzbyBlbmpveSBjb21mb3J0IGZvb2QuXCI7XG5cbiAgLy8gQnVpbGRzIGEgaGVybyBlbGVtZW50IHdpdGggdGhlIHRleHQsIGJhY2tncm91bmQgaW1hZ2UsIGFuZCBhcHBlbmRzIHRvIG91ciBjb250ZW50XG4gIHJlbmRlckhlcm8oaGVyb1RleHQsIGhlcm9VUkwsIGNvbnRlbnQsIGNvbG9yUGlja2VyKDEpKTtcblxuICAvLyBSZW5kZXIgYXJ0aWNsZSBlbGVtZW50IGFuZCBncmFiIGl0XG4gIHJlbmRlckFydGljbGUoY29udGVudCk7XG4gIGxldCBhcnRpY2xlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYXJ0aWNsZScpO1xuICBhcnRpY2xlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnaG91cnMtYXJ0aWNsZScpO1xuXG4gIC8vIENyZWF0ZSB0d28gY2FyZHMsIGFkZCB0aGVtIHRvIGFydGljZS5cblxuICAvLyBCdWlsZCBhZGRyZXNzIGNhcmRcbiAgYnVpbGRBZGRyZXNzQ2FyZChhcnRpY2xlKTtcblxuICAvLyBCdWlsZCBob3VycyBjYXJkXG4gIGJ1aWxkSG91cnNDYXJkKGFydGljbGUpO1xuXG4gIC8vIEFkZCBsb2dvIHRvIGJvdHRvbSBvZiBwYWdlXG4gIHJlbmRlckxvZ28oY29udGVudCk7XG5cbiAgLy8gQ2hhbmdlIG91ciBmb290ZXIgY29sb3IgdG8gb3VyIHBhZ2UgY29sb3JcbiAgY2hhbmdlRm9vdGVyQ29sb3IoY29sb3JQaWNrZXIoMSkpO1xuXG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlbmRlckhvdXJzO1xuIiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjVkODhhMDQ1M2UyZjY2YjM1NWVlZmY4NzdiYmZhMmM0LmpwZ1wiOyIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgQmFja2dyb3VuZCBmcm9tICcuLi9pbWcvbWVudUJhY2tncm91bmRDbGlwLmpwZyc7XG5pbXBvcnQge1xuICByZW5kZXJIZXJvLFxuICByZW5kZXJIZXJvTWVudSxcbn0gZnJvbSAnLi4vY29tcG9uZW50cy9oZXJvJztcbmltcG9ydCB7XG4gIHJlbmRlckFydGljbGVcbn0gZnJvbSAnLi4vY29tcG9uZW50cy9hcnRpY2xlJztcbmltcG9ydCB7XG4gIGNoYW5nZUZvb3RlckNvbG9yXG59IGZyb20gJy4uL2NvbXBvbmVudHMvZm9vdGVyJztcbmltcG9ydCByZW5kZXJMb2dvIGZyb20gJy4uL2NvbXBvbmVudHMvcmVuZGVyTG9nbyc7XG5pbXBvcnQge1xuICBjb2xvclBpY2tlcixcbn0gZnJvbSAnLi4vY29tcG9uZW50cy9jb2xvcnMnO1xuXG5cblxuLy8gUmVuZGVyIG1lbnVzIHBhZ2VcbmNvbnN0IHJlbmRlck1lbnVzID0gKGNvbnRlbnQpID0+IHtcbiAgLy8gU2V0IG91ciBoZXJvIHZhcnMgZm9yIG91ciBtZW51cyBwYWdlXG4gIGNvbnN0IGhlcm9UZXh0ID0gXCJNRU5VU1wiO1xuICBjb25zdCBoZXJvVVJMID0gQmFja2dyb3VuZDtcblxuICAvLyBCdWlsZHMgYSBoZXJvIGVsZW1lbnQgd2l0aCB0aGUgdGV4dCwgYmFja2dyb3VuZCBpbWFnZSwgYW5kIGFwcGVuZHMgdG8gb3VyIGNvbnRlbnRcbiAgcmVuZGVySGVybyhoZXJvVGV4dCwgaGVyb1VSTCwgY29udGVudCwgY29sb3JQaWNrZXIoMikpO1xuXG4gIC8vIHJlbmRlciBhcnRpY2xlIGFuZCBncmFiIGl0XG4gIHJlbmRlckFydGljbGUoY29udGVudCk7XG4gIGxldCBhcnRpY2xlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYXJ0aWNsZScpO1xuICBhcnRpY2xlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnbWVudXMtYXJ0aWNsZScpO1xuXG4gIHJlbmRlckhlcm9NZW51KCk7XG5cbiAgLy8gQWRkIGxvZ28gdG8gYm90dG9tIG9mIHBhZ2VcbiAgcmVuZGVyTG9nbyhhcnRpY2xlKTtcblxuICAvLyBVcGRhdGUgZm9vdGVyIGNvbG9yXG4gIGNoYW5nZUZvb3RlckNvbG9yKGNvbG9yUGlja2VyKDIpKTtcblxufVxuXG5leHBvcnQgZGVmYXVsdCByZW5kZXJNZW51cztcbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI3M2VhOTE1ZGQ1ZWIwNzQyN2E2MThjMWEyMGUyMjRiZC5qcGdcIjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLy8gQnVpbGQgYW5kIGFib3V0IHVzIHNlY3Rpb24gYW5kIGFwcGVuZCBpdCB0byBwYXNzZWQgaW4gYXJ0aWNsZVxuY29uc3QgYnVpbGRBYm91dFVzID0gKGFydGljbGUpID0+IHtcbiAgLy8gU2V0dXAgdGV4dCBzZWN0aW9uc1xuICBsZXQgcDEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gIGxldCBwMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgbGV0IHAzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICBsZXQgcDQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG5cbiAgLy8gQnVpbGQgdGV4dHNcbiAgcDEuaW5uZXJIVE1MID0gYEEgY29tbWl0dGVkIHNvY2lhbCBncm91cCwgY29tcHJpc2luZyByZWxhdGlvbnMgYW5kIGFkb3B0ZWQgYCArXG4gICAgYHN0cmFuZ2Vycy4gUGVvcGxlIGNvbm5lY3RlZCBieSBhIHNoYXJlZCBpbnRlcmVzdCwgc3VjaCBhcyBiZWVyLCBzaG9lcywga25pdHRpbmcsIGAgK1xuICAgIGBmYW5jeSBjaGlja2Vucywgc3RhciB0cmVrLCB5b2dhLCBxdWlkZGl0Y2gsIGNhbm5hYmlzLCBoZWlybG9vbSB2ZWdldGFibGVzLCBidWdzLCBgICtcbiAgICBgYnJlYWQtbWFraW5nLCBjYXRzLCB3b3JsZC13YW5kZXJpbmcsIGdsYXNzLWJsb3dpbmcsIGN1cmxpbmcsIGNhbmluZXPigKbigKYgWW914oCmIGFyZSBgICtcbiAgICBgcGFydCBvZiBvdXIgdHJpYmUuIE9uZSB0aGluZyB0aGF04oCZcyBjb21tb24gYW1vbmcgaHVtYW5pdHkgaXMgb3VyIGxvdmUgb2YgZm9vZCwgYCArXG4gICAgYGRyaW5rLCBhbmQgc3Rvcnl0ZWxsaW5nLiBIZXJlIGF0IFRyaWJlIHdlIGltYWdpbmUgYWxsIHBlb3BsZSwgcmVnYXJkbGVzcyBvZiBgICtcbiAgICBgY3VsdHVyZSwgYmFja2dyb3VuZCwgb3IgbGlmZSBwaGlsb3NvcGh5LCBjb21pbmcgdG9nZXRoZXIgdG8gZW5qb3kgY3JhZnQgYmVlciBhbmQgYCArXG4gICAgYG91ciBpbnRlcm5hdGlvbmFsbHkgaW5zcGlyZWQgbWVudS5gO1xuICBwMi5pbm5lckhUTUwgPSBgVXNpbmcgbG9jYWxseS1zb3VyY2VkIGluZ3JlZGllbnRzIHdoZW5ldmVyIHdlIGAgK1xuICAgIGBjYW4sIG91ciBtZW51IGhhcyBiZWVuIHRob3VnaHRmdWxseSBjcmFmdGVkIGJ5IGNoZWZzIHRoYXQgY2FyZSBhYm91dCB5b3VyIGN1bGluYXJ5IGV4cGVyaWVuY2UuIGAgK1xuICAgIGBJbnNwaXJlZCBieSBvdXIgYW5jZXN0b3JzIGZyb20gYXJvdW5kIHRoZSB3b3JsZCwgd2UgaW52aXRlIHlvdSB0byBlbmpveSBvdXIgYCArXG4gICAgYG9mZmVyaW5ncywgd2hpbGUgY2VsZWJyYXRpbmcgb25lIGFub3RoZXIsIGFuZCBvdXIgZXF1YWxseSBkaXZlcnNlIGFuZCBiZWF1dGlmdWwgam91cm5leXMuYDtcbiAgcDMuaW5uZXJIVE1MID0gYFdlIGxvb2sgZm9yd2FyZCB0byBzaGFyaW5nIG91ciB3b3JsZHMgd2l0aCB5b3VyIHdvcmxkc+KApiBpbiBhIHNleHksIHNvcGhpc3RpY2F0ZWQgYCArXG4gICAgYHdheS4gUm9tYW5jZSBpc27igJl0IGp1c3QgZm9yIGxvdmVycyDigJAgaXTigJlzIHRvIGJlIHNoYXJlZCB3aXRoIGFsbCBvZiBodW1hbml0eSFgO1xuICBwNC5pbm5lckhUTUwgPSBgRWF0IGEgbGl0dGxlLiBEcmluayBhIGxpdHRsZS4gRmxpcnQgYSBsaXR0bGUuIFRlbGwgeW91ciBtb3N0IGF3ZXNvbWUgc3Rvcmllcy5gXG5cbiAgLy8gU3R5bGUgdGV4dFxuICBwNC5zdHlsZS5hbGlnblNlbGYgPSAnY2VudGVyJztcbiAgcDQuc3R5bGUuYWxpZ25TZWxmID0gJ2NlbnRlcic7XG5cbiAgLy8gQXBwZW5kIHRleHQgdG8gYXJ0aWNsZVxuICBhcnRpY2xlLmFwcGVuZENoaWxkKHAxKTtcbiAgYXJ0aWNsZS5hcHBlbmRDaGlsZChwMik7XG4gIGFydGljbGUuYXBwZW5kQ2hpbGQocDMpO1xuICBhcnRpY2xlLmFwcGVuZENoaWxkKHA0KTtcbn1cblxuXG5leHBvcnQgZGVmYXVsdCBidWlsZEFib3V0VXM7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLy8gQnVpbGQgYWdyZWVtZW50IHNlY3Rpb24gYW5kIGFwcGVuZCB0byBwYXNzZWQgaW4gYXJ0aWNsZVxuY29uc3QgYnVpbGRBZ3JlZW1lbnQgPSAoYXJ0aWNsZSkgPT4ge1xuICAvLyBTZXR1cCB0ZXh0IHNlY3Rpb25zXG4gIGxldCB0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICBsZXQgdWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xuXG4gIC8vIExpc3Qgb2YgYWdyZWVtZW50cyB0byBiZSBhZGRlZCB0byBwYWdlXG4gIGNvbnN0IGFncmVlbWVudHMgPSBbXCJQcmV0ZW5kIGl04oCZcyAxOTcwOyBDZWxsIHBob25lcyBkb27igJl0IGV4aXN0IGFuZCB3ZSB0YWtlIG91ciBoYXRzIG9mZiBpbnNpZGUuXCIsXG4gICAgXCJTYXkgb25lIHRoaW5nIHRoYXQgdHVybnMgeW91IG9uIGFib3V0IGxpZmUuXCIsXG4gICAgXCJOb3RpY2UgaG93IHNleHkgeW91ciBzZXJ2ZXIgaXMsIGZsaXJ0IGEgbGl0dGxlLlwiLFxuICAgIFwiRHJlYW0gYWJvdXQgYSBmb3JlaWduIGNvdW50cnkgeW914oCZZCBsaWtlIHRvIHZpc2l0LlwiLFxuICAgIFwiQ29uanVnYXRlIOKAmHRyaWJl4oCZIGludG8gYW4gYWR2ZXJiIGFuZCBhZGplY3RpdmUsIHRoZW4gdXNlIGl0IGluIGEgY2xldmVyIHNlbnRlbmNlLlwiLFxuICAgIFwiVGFrZSBhIG1vbWVudCB0byBhcHByZWNpYXRlLCBlbWJyYWNlIHlvdXIgdHJpYmUgd2l0aCBhIHRvYXN0LlwiLFxuICAgIFwiQmUgdW5pbmhpYml0ZWQgZm9yIGEgZmV3IG1vbWVudHPigKYgaW4gYSBraW5kIHdheS5cIixcbiAgICBcIlVzZSBleHByZXNzaXZlIGxhbmd1YWdlLiBJZiB5b3UgbXVzdCBzd2VhciwgdGhlIHRyaWJlIGNoYXJnZSBpcyAkMjAgYSB3b3JkIGlmIGFueSBvbmUgb3ZlcmhlYXJzLlwiXG4gIF07XG5cbiAgLy8gQnVpbGQgdGV4dCBzZWN0aW9uc1xuICB0ZXh0LmlubmVySFRNTCA9IFwiRG9uJ3QgdGhpbmsgb2YgdGhlc2UgYXMgaG91c2UgcnVsZXMsIHNvIG11Y2ggYXMgc3Ryb25nIHN1Z2dlc3Rpb25zIFwiICtcbiAgICBcImFzIHRvIGhvdyB5b3UgbWlnaHQgbWFrZSB5b3VyIHRpbWUgaGVyZSB3aXRoIHVzIGEgdGhpbmcgb2YgYmVhdXR5LlwiO1xuXG4gIC8vIEFkZCBhZ3JlZW1lbnRzIHRvIHVsIGluIGFydGljbGUgYXMgbGlcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhZ3JlZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICBsaS5pbm5lckhUTUwgPSBhZ3JlZW1lbnRzW2ldO1xuICAgIHVsLmFwcGVuZENoaWxkKGxpKTtcbiAgfVxuXG4gIC8vIEFkZCBpdGVtcyB0byBhcnRpY2xlLlxuICBhcnRpY2xlLmFwcGVuZENoaWxkKHRleHQpO1xuICBhcnRpY2xlLmFwcGVuZENoaWxkKHVsKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYnVpbGRBZ3JlZW1lbnQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IEJhY2tncm91bmQgZnJvbSAnLi4vaW1nL21hbmlmZXN0b0JhY2tncm91bmRDbGlwLmpwZyc7XG5pbXBvcnQgcmVuZGVyTG9nbyBmcm9tICcuLi9jb21wb25lbnRzL3JlbmRlckxvZ28nO1xuaW1wb3J0IGJ1aWxkQWJvdXRVcyBmcm9tICcuLi9jb21wb25lbnRzL2J1aWxkZXJzL2J1aWxkQWJvdXRVcyc7XG5pbXBvcnQgYnVpbGRBZ3JlZW1lbnQgZnJvbSAnLi4vY29tcG9uZW50cy9idWlsZGVycy9idWlsZEFncmVlbWVudCc7XG5pbXBvcnQge1xuICByZW5kZXJIZXJvXG59IGZyb20gJy4uL2NvbXBvbmVudHMvaGVybyc7XG5pbXBvcnQge1xuICByZW5kZXJBcnRpY2xlLFxuICByZW5kZXJBcnRpY2xlVGl0bGUsXG59IGZyb20gJy4uL2NvbXBvbmVudHMvYXJ0aWNsZSc7XG5pbXBvcnQge1xuICBjaGFuZ2VGb290ZXJDb2xvclxufSBmcm9tICcuLi9jb21wb25lbnRzL2Zvb3Rlcic7XG5pbXBvcnQge1xuICBjb2xvclBpY2tlcixcbn0gZnJvbSAnLi4vY29tcG9uZW50cy9jb2xvcnMnO1xuXG4vLyBSZW5kZXIgbWFuaWZlc3RvIHBhZ2VcbmNvbnN0IHJlbmRlck1hbmlmZXN0byA9IChjb250ZW50KSA9PiB7XG4gIC8vIFNldCBvdXIgaGVybyB2YXJzIGZvciBvdXIgbWFuaWZlc3RvIHBhZ2VcbiAgY29uc3QgaGVyb1RleHQgPSBcIk1BTklTRkVTVE9cIjtcbiAgY29uc3QgaGVyb1VSTCA9IEJhY2tncm91bmQ7XG5cbiAgLy8gQnVpbGRzIGEgaGVybyBlbGVtZW50IHdpdGggdGhlIHRleHQsIGJhY2tncm91bmQgaW1hZ2UsIGFuZCBhcHBlbmRzIHRvIG91ciBjb250ZW50XG4gIHJlbmRlckhlcm8oaGVyb1RleHQsIGhlcm9VUkwsIGNvbnRlbnQsIGNvbG9yUGlja2VyKDMpKTtcblxuICAvLyBSZW5kZXIgYXJ0aWNsZSBhbmQgZ3JhYiBpdFxuICByZW5kZXJBcnRpY2xlKGNvbnRlbnQpO1xuICBsZXQgYXJ0aWNsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2FydGljbGUnKTtcbiAgYXJ0aWNsZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ21hbmlmZXN0by1hcnRpY2xlJyk7XG5cbiAgLy8gQnVpbGQgYWJvdXQgdXMgc2VjdGlvblxuICByZW5kZXJBcnRpY2xlVGl0bGUoJ0Fib3V0IFVzJywgY29sb3JQaWNrZXIoMykpO1xuICAvLyBCdWlsZHMgb3VyIGFib3V0IHVzIHNlY3Rpb24gYW5kIGFwcGVuZHMgdG8gcGFzc2VkIGluIGFydGljbGVcbiAgYnVpbGRBYm91dFVzKGFydGljbGUpO1xuXG4gIC8vIEJ1aWxkIGFncmVlbWVudCBzZWN0aW9uXG4gIHJlbmRlckFydGljbGVUaXRsZSgnQWdyZWVtZW50JywgY29sb3JQaWNrZXIoMykpO1xuICAvLyBCdWlsZHMgYWdyZWVtZW50IHNlY3Rpb24gYW5kIGFwcGVuZHMgdG8gcGFzc2VkIGluIGFydGljbGVcbiAgYnVpbGRBZ3JlZW1lbnQoYXJ0aWNsZSk7XG5cbiAgLy8gQWRkIGxvZ28gdG8gYm90dG9tIG9mIHBhZ2VcbiAgcmVuZGVyTG9nbyhhcnRpY2xlKTtcbiAgLy8gVXBkYXRlIGZvb3RlciBjb2xvclxuICBjaGFuZ2VGb290ZXJDb2xvcihjb2xvclBpY2tlcigzKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlbmRlck1hbmlmZXN0bztcbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJjNmU5NGZhYjMzYWM5OTgxYmVmZmJkY2E0MDAwZDAxZC5qcGdcIjsiLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHtcbiAgYnVpbGRBcnRpY2xlQ2FyZCxcbn0gZnJvbSAnLi4vYXJ0aWNsZSc7XG5pbXBvcnQge1xuICBjb2xvclBpY2tlcixcbn0gZnJvbSAnLi4vY29sb3JzJztcblxuLy8gQnVpbGQgZXZlbnQgY2FyZCBhbmQgYWRkIHRvIGdpdmVuIGFydGljbGVcbmNvbnN0IGJ1aWxkRXZlbnRDYXJkID0gKGFydGljbGUpID0+IHtcblxuICAvLyBCdWlsZCBlbGVtZW50cywgc2tpcHBpbmcgcHJlIGFuZCBhcHBlcm5kaW5nIHRoZXNlIGluc3RlYWRcbiAgbGV0IHAxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICBsZXQgcDIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gIGxldCBwMyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgcDEuaW5uZXJIVE1MID1gVHJpYmUgd2VsY29tZXMgZXZlbnRzLCBwYXJ0aWVzIGFuZCBjZWxlYnJhdGlvbnMuYFxuICBwMi5pbm5lckhUTUwgPSBgV2UgYXJlIGhhcHB5IHRvIGRpc2N1c3MgYm9va2luZyB0aGUgd2hvbGUgZmFjaWxpdHkgb3IgcGFydCBvZiBpdCBmb3IgeW91ciBldmVudC5gXG4gIHAzLmlubmVySFRNTCA9IGBKdXN0IGdpdmUgdXMgYSBjYWxsIHRvIGRpc2N1c3MgcmF0ZXMsIG1lbnVzLCBhbmQgYW55IHNwZWNpYWwgcmVxdWlyZW1lbnRzIHlvdSBoYXZlLmA7XG5cbiAgLy8gTWFrZSBjYXJkIGFkIGFkZCBlbGVtZW50c1xuICBsZXQgZXZlbnRDYXJkID0gYnVpbGRBcnRpY2xlQ2FyZCgnLSBZb3VyIEV2ZW50IC0nLCBcIlwiLCBjb2xvclBpY2tlcig0KSk7XG4gIGV2ZW50Q2FyZC5hcHBlbmRDaGlsZChwMSk7XG4gIGV2ZW50Q2FyZC5hcHBlbmRDaGlsZChwMik7XG4gIGV2ZW50Q2FyZC5hcHBlbmRDaGlsZChwMyk7XG5cbiAgLy8gQWRkIGNvbXBsZXRlZCBldmVudCBjYXJkIHRvIGFydGljbGVcbiAgYXJ0aWNsZS5hcHBlbmRDaGlsZChldmVudENhcmQpO1xuXG59XG5cbmV4cG9ydCBkZWZhdWx0IGJ1aWxkRXZlbnRDYXJkO1xuIiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjkzMjBiMGU3YjJhNjZmMmI5NDUzMmRiMTE1YThkYThiLnN2Z1wiOyIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgUGhvbmUgZnJvbSAnLi4vLi4vaW1nL2NhbGwtYmxhY2stMThkcC5zdmcnO1xuaW1wb3J0IHtcbiAgYnVpbGRBcnRpY2xlQ2FyZCxcbn0gZnJvbSAnLi4vYXJ0aWNsZSc7XG5pbXBvcnQge1xuICBjb2xvclBpY2tlcixcbn0gZnJvbSAnLi4vY29sb3JzJztcblxuY29uc3QgYnVpbGRDb250YWN0Q2FyZCA9IChhcnRpY2xlKSA9PiB7XG4gIGxldCB0ZWwgPSBcIisxIDQwMy0zOTItMzA0NlwiO1xuICBsZXQgZW1haWwgPSBcImVhdEB0cmliZWZsYXRvdXQuY29tXCJcbiAgLy8gQ3JlYXRlIHRleHQgZWxlbWVudHNcbiAgbGV0IGNvbnRhY3RUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncHJlJyk7XG4gIGNvbnRhY3RUZXh0ID1cbiAgICBcIiAgICAgICAgICAgVG8gbWFrZSBhIHJlc2VydmF0aW9uIGJ5IHBob25lLCBjYWxsOlxcblwiICtcbiAgICBgICAgICAgICAgICAgICAgICAgICAgICAgICAke3RlbH0gYCArXG4gICAgYDxhIGhyZWY9dGVsOiR7dGVsfT48c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZmlsbD1cImJsYWNrXCIgd2lkdGg9XCIxOHB4XCIgaGVpZ2h0PVwiMThweFwiPjxwYXRoIGQ9XCJNMCAwaDI0djI0SDB6XCIgZmlsbD1cIm5vbmVcIi8+PHBhdGggZD1cIk0yMC4wMSAxNS4zOGMtMS4yMyAwLTIuNDItLjItMy41My0uNTYtLjM1LS4xMi0uNzQtLjAzLTEuMDEuMjRsLTEuNTcgMS45N2MtMi44My0xLjM1LTUuNDgtMy45LTYuODktNi44M2wxLjk1LTEuNjZjLjI3LS4yOC4zNS0uNjcuMjQtMS4wMi0uMzctMS4xMS0uNTYtMi4zLS41Ni0zLjUzIDAtLjU0LS40NS0uOTktLjk5LS45OUg0LjE5QzMuNjUgMyAzIDMuMjQgMyAzLjk5IDMgMTMuMjggMTAuNzMgMjEgMjAuMDEgMjFjLjcxIDAgLjk5LS42My45OS0xLjE4di0zLjQ1YzAtLjU0LS40NS0uOTktLjk5LS45OXpcIi8+PC9zdmc+PC9hPmAgK1xuICAgIFwiXFxuXCIgK1xuICAgIFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgICAgICAgICAgIE9yIHRvIHJlc2VydmUgYnkgZW1haWw6XFxuXCIgK1xuICAgIGAgICAgICAgICAgICAgICAgICAgICAgJHtlbWFpbH1gICtcbiAgICBgPGEgaHJlZj1tYWlsdG86JHtlbWFpbH0+PHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIGZpbGw9XCJibGFja1wiIHdpZHRoPVwiMThweFwiIGhlaWdodD1cIjE4cHhcIj48cGF0aCBkPVwiTTAgMGgyNHYyNEgwelwiIGZpbGw9XCJub25lXCIvPjxwYXRoIGQ9XCJNMjAgNEg0Yy0xLjEgMC0xLjk5LjktMS45OSAyTDIgMThjMCAxLjEuOSAyIDIgMmgxNmMxLjEgMCAyLS45IDItMlY2YzAtMS4xLS45LTItMi0yem0wIDRsLTggNS04LTVWNmw4IDUgOC01djJ6XCIvPjwvc3ZnPjwvYT5gICtcbiAgICBcIlxcblwiICtcbiAgICBcIk9yLCBqdXN0IHNlbmQgdXMgYSBtZXNzYWdlIHVzaW5nIHRoZSBmb3JtIGJlbG93OlwiO1xuXG4gICAgbGV0IGNvbnRhY3RDYXJkID0gYnVpbGRBcnRpY2xlQ2FyZCgnLSBEZXRhaWxzIC0nLCBjb250YWN0VGV4dCwgY29sb3JQaWNrZXIoNCkpO1xuXG4gICAgYXJ0aWNsZS5hcHBlbmRDaGlsZChjb250YWN0Q2FyZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJ1aWxkQ29udGFjdENhcmQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgYnVpbGRJbnB1dCA9IChuYW1lKSA9PiB7XG5cdC8vIGJ1aWxkIGNvbXBvbmVudHMgYW5kIHB1dCBpbnRvIGhvbGRlclxuICBjb25zdCBob2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgaG9sZGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBgaW5wdXQtZ3JvdXBgKTtcbiAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dCcpO1xuICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ25hbWUnLCBuYW1lKTtcbiAgaW5wdXQuc2V0QXR0cmlidXRlKCdjbGFzcycsIGBmb3JtLWNvbnRyb2wgJHtuYW1lfS1pbnB1dGApO1xuICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ3JlcXVpcmVkJywgdHJ1ZSk7XG5cbiAgY29uc3QgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICBsYWJlbC5pbm5lckhUTUwgPSBuYW1lO1xuXG4gIC8vIEFkZCBldmVudCBsaXN0ZW5lciB0byBrbm93IHRvIGFkanVzdCBsYWJlbCB0ZXh0IGlmIHdlIGhhdmUgZW50ZXJlZCBhbnl0aGluZ1xuICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdmb2N1c291dCcsIChlKSA9PiB7XG4gICAgaWYoZS50YXJnZXQudGV4dExlbmd0aCA+IDApIHtcbiAgICAgIGUudGFyZ2V0LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnZm9ybS1jb250cm9sIGhhcy12YWx1ZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlLnRhcmdldC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2Zvcm0tY29udHJvbCcpO1xuICAgIH1cbiAgfSlcblxuICBob2xkZXIuYXBwZW5kQ2hpbGQoaW5wdXQpO1xuICBob2xkZXIuYXBwZW5kQ2hpbGQobGFiZWwpO1xuXG4gIHJldHVybiBob2xkZXI7XG59XG5cbmNvbnN0IGJ1aWxkVGV4dEFyZWEgPSAobmFtZSkgPT4ge1xuICAvLyBDcmVhdGUgZWxlZW1lbnRzIHRvIGFwcGVuZCB0byBob2xkZXJcbiAgY29uc3QgaG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGhvbGRlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2lucHV0LWdyb3VwJyk7XG4gIGNvbnN0IHRleHRhcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcbiAgdGV4dGFyZWEuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQnKTtcbiAgdGV4dGFyZWEuc2V0QXR0cmlidXRlKCduYW1lJywgbmFtZSk7XG4gIHRleHRhcmVhLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnZm9ybS1jb250cm9sIG1lc3NhZ2UtaW5wdXQnKTtcbiAgdGV4dGFyZWEuc2V0QXR0cmlidXRlKCdyZXF1aXJlZCcsIHRydWUpO1xuXG4gIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgbGFiZWwuaW5uZXJIVE1MID0gbmFtZTtcblxuICAvLyBBZGQgZXZlbnQgbGlzdGVuZXIgdG8ga25vdyB0byBhZGp1c3QgbGFiZWwgdGV4dCBpZiB3ZSBoYXZlIGVudGVyZWQgYW55dGhpbmcgXG4gIHRleHRhcmVhLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3Vzb3V0JywgKGUpID0+IHtcbiAgICBpZihlLnRhcmdldC50ZXh0TGVuZ3RoID4gMCkge1xuICAgICAgZS50YXJnZXQuc2V0QXR0cmlidXRlKCdjbGFzcycsICdmb3JtLWNvbnRyb2wgaGFzLXZhbHVlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGUudGFyZ2V0LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnZm9ybS1jb250cm9sJyk7XG4gICAgfVxuICB9KVxuXG4gIGhvbGRlci5hcHBlbmRDaGlsZCh0ZXh0YXJlYSk7XG4gIGhvbGRlci5hcHBlbmRDaGlsZChsYWJlbCk7XG5cbiAgcmV0dXJuIGhvbGRlcjtcbn1cblxuZXhwb3J0IHtcbiAgYnVpbGRJbnB1dCxcbiAgYnVpbGRUZXh0QXJlYSxcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLy8gQnVpbGQgYnV0dG9uIGZvciBtZXNzYWdlIGZvcm1cbmNvbnN0IGJ1aWxkQnV0dG9uID0gKCkgPT4ge1xuICBsZXQgc3VibWl0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gIHN1Ym1pdEJ1dHRvbi5pbm5lckhUTUwgPSAnU3VibWl0JztcbiAgc3VibWl0QnV0dG9uLnNldEF0dHJpYnV0ZSgndHlwZScsICdzdWJtaXQnKTtcblxuICByZXR1cm4gc3VibWl0QnV0dG9uO1xufVxuXG5leHBvcnQgZGVmYXVsdCBidWlsZEJ1dHRvbjtcbiIsIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHtcbiAgY29sb3JQaWNrZXIsXG59IGZyb20gJy4uL2NvbG9ycyc7XG5pbXBvcnQge1xuICBidWlsZElucHV0LFxuICBidWlsZFRleHRBcmVhLFxufSBmcm9tICcuL2J1aWxkSW5wdXQnO1xuaW1wb3J0IGJ1aWxkQnV0dG9uIGZyb20gJy4vYnVpbGRCdXR0b24nO1xuXG5jb25zdCBidWlsZE1lc3NhZ2VDYXJkID0gKGNvbnRlbnQpID0+IHtcbiAgLy8gQnVpbGQgYW5kIHNldCBjb21wb25lbnQgYXR0cmlidXRlc1xuICBsZXQgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTtcbiAgZm9ybS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NvbnRhY3QtZm9ybScpO1xuICAvLyBTZXQgYWN0aW9uIHRvIHNlbmQgb3VyIGZvcm0gaW5mbyB3aXRoIGZvcm1zcHJlZVxuICBmb3JtLnNldEF0dHJpYnV0ZSgnYWN0aW9uJywgJ2h0dHBzOi8vZm9ybXNwcmVlLmlvL3h3a3dwZXZuJyk7XG4gIGZvcm0uc2V0QXR0cmlidXRlKCdtZXRob2QnLCAncG9zdCcpO1xuXG4gIC8vIEFkZCB0aXRsZSB0byBmb3JtXG4gIGxldCBmb3JtSGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDMnKTtcbiAgZm9ybUhlYWRlci5pbm5lckhUTUwgPSBcIi0gU2VuZCBNZXNzYWdlIC1cIjtcbiAgZm9ybUhlYWRlci5zdHlsZS5jb2xvciA9IGNvbG9yUGlja2VyKDQpO1xuXG4gIC8vIENvbnRhaW5lciB3IG5hbWUgYW5kIGVtYWlsIGlucHV0XG4gIGxldCBpbmZvRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGluZm9EaXYuc2V0QXR0cmlidXRlKCdjbGFzcycsICdpbmZvRGl2Jyk7XG4gIGxldCBuYW1lSW5wdXQgPSBidWlsZElucHV0KCduYW1lJyk7XG4gIGxldCBlbWFpbElucHV0ID0gYnVpbGRJbnB1dCgnZW1haWwnKTtcbiAgaW5mb0Rpdi5hcHBlbmRDaGlsZChuYW1lSW5wdXQpO1xuICBpbmZvRGl2LmFwcGVuZENoaWxkKGVtYWlsSW5wdXQpO1xuXG4gIC8vIENvbnRhaW5lciB3LyBtZXNzYWdlIHRleHRhcmVhXG4gIGxldCBtZXNzYWdlSW5wdXQgPSBidWlsZFRleHRBcmVhKCdtZXNzYWdlJyk7XG4gIGxldCBtZXNzYWdlRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIG1lc3NhZ2VEaXYuc2V0QXR0cmlidXRlKCdjbGFzcycsICdtZXNzYWdlRGl2Jyk7XG4gIG1lc3NhZ2VEaXYuYXBwZW5kQ2hpbGQobWVzc2FnZUlucHV0KTtcblxuICAvLyBTdWJtaXQgYnV0dG9uXG4gIGxldCBzdWJtaXRCdXR0b24gPSBidWlsZEJ1dHRvbigpO1xuXG4gIC8vIEFkZCBjb21wb25lbnRzIHRvIGZvcm1cbiAgZm9ybS5hcHBlbmRDaGlsZChmb3JtSGVhZGVyKTtcbiAgZm9ybS5hcHBlbmRDaGlsZChpbmZvRGl2KTtcbiAgZm9ybS5hcHBlbmRDaGlsZChtZXNzYWdlRGl2KTtcbiAgZm9ybS5hcHBlbmRDaGlsZChzdWJtaXRCdXR0b24pO1xuXG4gIC8vIEFkZCBmb3JtIHRvIGNvbnRlbnRcbiAgY29udGVudC5hcHBlbmRDaGlsZChmb3JtKTtcblxufVxuXG5leHBvcnQgZGVmYXVsdCBidWlsZE1lc3NhZ2VDYXJkO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7XG4gIGJ1aWxkQXJ0aWNsZUNhcmQsXG59IGZyb20gJy4uL2FydGljbGUnO1xuaW1wb3J0IHtcbiAgY29sb3JQaWNrZXIsXG59IGZyb20gJy4uL2NvbG9ycyc7XG5cbmNvbnN0IGJ1aWxkTWFwID0gKGNvbnRlbnQpID0+IHtcblxuICBsZXQgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ21hcC1jb250YWluZXInKTtcbiAgbGV0IGRpc3BsYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZGlzcGxheS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ21hcC1kaXNwbGF5Jyk7XG4gIGxldCBmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICBmcmFtZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ21hcC1mcmFtZScpO1xuICBmcmFtZS5zZXRBdHRyaWJ1dGUoJ3NyYycsIFwiaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9tYXBzL2VtYmVkL3YxL3NlYXJjaD9xPXRyaWJlK3JlZCtkZWVyJmtleT1BSXphU3lCRncwUWJ5cTl6VEZUZC10VVk2ZFpXVGdhUXp1VTE3UjhcIilcblxuICBkaXNwbGF5LmFwcGVuZENoaWxkKGZyYW1lKTtcbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKGRpc3BsYXkpO1xuXG4gIGNvbnRlbnQuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYnVpbGRNYXA7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IEJhY2tncm91bmQgZnJvbSAnLi4vaW1nL2NvbnRhY3RCYWNrZ3JvdW5kLmpwZyc7XG5pbXBvcnQgcmVuZGVyTG9nbyBmcm9tICcuLi9jb21wb25lbnRzL3JlbmRlckxvZ28nO1xuaW1wb3J0IGJ1aWxkRXZlbnRDYXJkIGZyb20gJy4uL2NvbXBvbmVudHMvYnVpbGRlcnMvYnVpbGRFdmVudENhcmQnO1xuaW1wb3J0IGJ1aWxkQ29udGFjdENhcmQgZnJvbSAnLi4vY29tcG9uZW50cy9idWlsZGVycy9idWlsZENvbnRhY3RDYXJkJztcbmltcG9ydCBidWlsZE1lc3NhZ2VDYXJkIGZyb20gJy4uL2NvbXBvbmVudHMvYnVpbGRlcnMvYnVpbGRNZXNzYWdlQ2FyZCc7XG5pbXBvcnQgYnVpbGRNYXAgZnJvbSAnLi4vY29tcG9uZW50cy9idWlsZGVycy9idWlsZE1hcCc7XG5pbXBvcnQge1xuICByZW5kZXJIZXJvXG59IGZyb20gJy4uL2NvbXBvbmVudHMvaGVybyc7XG5pbXBvcnQge1xuICByZW5kZXJBcnRpY2xlLFxuICBidWlsZEFydGljbGVDYXJkLFxufSBmcm9tICcuLi9jb21wb25lbnRzL2FydGljbGUnO1xuaW1wb3J0IHtcbiAgY2hhbmdlRm9vdGVyQ29sb3Jcbn0gZnJvbSAnLi4vY29tcG9uZW50cy9mb290ZXInO1xuaW1wb3J0IHtcbiAgY29sb3JQaWNrZXIsXG59IGZyb20gJy4uL2NvbXBvbmVudHMvY29sb3JzJztcblxuLy8gUmVuZGVyIGNvbnRhY3QgcGFnZVxuY29uc3QgcmVuZGVyQ29udGFjdCA9IChjb250ZW50KSA9PiB7XG4gIC8vIFNldCBvdXIgaGVybyB2YXJzIGZvciBvdXIgY29udGFjdCBwYWdlXG4gIGNvbnN0IGhlcm9UZXh0ID0gXCJDT05UQUNUXCI7XG4gIGNvbnN0IGhlcm9VUkwgPSBCYWNrZ3JvdW5kO1xuXG4gIC8vIEJ1aWxkcyBhIGhlcm8gZWxlbWVudCB3aXRoIHRoZSB0ZXh0LCBiYWNrZ3JvdW5kIGltYWdlLCBhbmQgYXBwZW5kcyB0byBvdXIgY29udGVudFxuICByZW5kZXJIZXJvKGhlcm9UZXh0LCBoZXJvVVJMLCBjb250ZW50LCBjb2xvclBpY2tlcig0KSk7XG5cbiAgLy8gUmVuZGVyIGFydGljbGUgZWxlbWVudFxuICByZW5kZXJBcnRpY2xlKGNvbnRlbnQpO1xuICBsZXQgYXJ0aWNsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2FydGljbGUnKTtcbiAgYXJ0aWNsZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NvbnRhY3QtYXJ0aWNsZScpO1xuXG4gIC8vIE1ha2UgYSBjYXJkIGZvciBjYWxsL2VtYWlsIGluZm8sIGFuZCBvbmUgZm9yIG1lc3NhZ2UsIGFuZCBvbmUgZm9yIGV2ZW50XG5cbiAgLy8gQnVpbGQgZXZlbnQgY2FyZFxuICBidWlsZEV2ZW50Q2FyZChhcnRpY2xlKTtcblxuICAvLyBCdWlsZCBjb250YWN0dCBjYXJkXG4gIGJ1aWxkQ29udGFjdENhcmQoYXJ0aWNsZSk7XG5cbiAgLy8gQnVpbGQgbWVzc2FnZSBjYXJkXG4gIGJ1aWxkTWVzc2FnZUNhcmQoY29udGVudCk7XG5cbiAgLy8gSW5zZXJ0IGdvb2dsZSBtYXAgaW50byBjb250ZW50IHNvIGl0cyB3aWR0aCBjb25zdHJpbmVkXG4gIGJ1aWxkTWFwKGNvbnRlbnQpO1xuXG4gIC8vIEFkZCBsb2dvIHRvIGJvdHRvbSBvZiBwYWdlXG4gIHJlbmRlckxvZ28oY29udGVudCk7XG5cbiAgLy8gQ2hhbmdlIG91ciBmb290ZXIgY29sb3IgdG8gb3VyIHBhZ2UgY29sb3JcbiAgY2hhbmdlRm9vdGVyQ29sb3IoY29sb3JQaWNrZXIoNCkpO1xuXG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlbmRlckNvbnRhY3Q7XG4iLCIvKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jcmVhdGVCaW5kaW5nKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgb1trMl0gPSBtW2tdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIHJlc3VsdFtrXSA9IG1vZFtrXTtcclxuICAgIHJlc3VsdC5kZWZhdWx0ID0gbW9kO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwKSB7XHJcbiAgICBpZiAoIXByaXZhdGVNYXAuaGFzKHJlY2VpdmVyKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gZ2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByaXZhdGVNYXAuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHByaXZhdGVNYXAsIHZhbHVlKSB7XHJcbiAgICBpZiAoIXByaXZhdGVNYXAuaGFzKHJlY2VpdmVyKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gc2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZU1hcC5zZXQocmVjZWl2ZXIsIHZhbHVlKTtcclxuICAgIHJldHVybiB2YWx1ZTtcclxufVxyXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbnZhciBNRENGb3VuZGF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1EQ0ZvdW5kYXRpb24oYWRhcHRlcikge1xuICAgICAgICBpZiAoYWRhcHRlciA9PT0gdm9pZCAwKSB7IGFkYXB0ZXIgPSB7fTsgfVxuICAgICAgICB0aGlzLmFkYXB0ZXIgPSBhZGFwdGVyO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDRm91bmRhdGlvbiwgXCJjc3NDbGFzc2VzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBDbGFzc2VzIGV4dGVuZGluZyBNRENGb3VuZGF0aW9uIHNob3VsZCBpbXBsZW1lbnQgdGhpcyBtZXRob2QgdG8gcmV0dXJuIGFuIG9iamVjdCB3aGljaCBleHBvcnRzIGV2ZXJ5XG4gICAgICAgICAgICAvLyBDU1MgY2xhc3MgdGhlIGZvdW5kYXRpb24gY2xhc3MgbmVlZHMgYXMgYSBwcm9wZXJ0eS4gZS5nLiB7QUNUSVZFOiAnbWRjLWNvbXBvbmVudC0tYWN0aXZlJ31cbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ0ZvdW5kYXRpb24sIFwic3RyaW5nc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gQ2xhc3NlcyBleHRlbmRpbmcgTURDRm91bmRhdGlvbiBzaG91bGQgaW1wbGVtZW50IHRoaXMgbWV0aG9kIHRvIHJldHVybiBhbiBvYmplY3Qgd2hpY2ggZXhwb3J0cyBhbGxcbiAgICAgICAgICAgIC8vIHNlbWFudGljIHN0cmluZ3MgYXMgY29uc3RhbnRzLiBlLmcuIHtBUklBX1JPTEU6ICd0YWJsaXN0J31cbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ0ZvdW5kYXRpb24sIFwibnVtYmVyc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gQ2xhc3NlcyBleHRlbmRpbmcgTURDRm91bmRhdGlvbiBzaG91bGQgaW1wbGVtZW50IHRoaXMgbWV0aG9kIHRvIHJldHVybiBhbiBvYmplY3Qgd2hpY2ggZXhwb3J0cyBhbGxcbiAgICAgICAgICAgIC8vIG9mIGl0cyBzZW1hbnRpYyBudW1iZXJzIGFzIGNvbnN0YW50cy4gZS5nLiB7QU5JTUFUSU9OX0RFTEFZX01TOiAzNTB9XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENGb3VuZGF0aW9uLCBcImRlZmF1bHRBZGFwdGVyXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBDbGFzc2VzIGV4dGVuZGluZyBNRENGb3VuZGF0aW9uIG1heSBjaG9vc2UgdG8gaW1wbGVtZW50IHRoaXMgZ2V0dGVyIGluIG9yZGVyIHRvIHByb3ZpZGUgYSBjb252ZW5pZW50XG4gICAgICAgICAgICAvLyB3YXkgb2Ygdmlld2luZyB0aGUgbmVjZXNzYXJ5IG1ldGhvZHMgb2YgYW4gYWRhcHRlci4gSW4gdGhlIGZ1dHVyZSwgdGhpcyBjb3VsZCBhbHNvIGJlIHVzZWQgZm9yIGFkYXB0ZXJcbiAgICAgICAgICAgIC8vIHZhbGlkYXRpb24uXG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE1EQ0ZvdW5kYXRpb24ucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFN1YmNsYXNzZXMgc2hvdWxkIG92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIHBlcmZvcm0gaW5pdGlhbGl6YXRpb24gcm91dGluZXMgKHJlZ2lzdGVyaW5nIGV2ZW50cywgZXRjLilcbiAgICB9O1xuICAgIE1EQ0ZvdW5kYXRpb24ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFN1YmNsYXNzZXMgc2hvdWxkIG92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIHBlcmZvcm0gZGUtaW5pdGlhbGl6YXRpb24gcm91dGluZXMgKGRlLXJlZ2lzdGVyaW5nIGV2ZW50cywgZXRjLilcbiAgICB9O1xuICAgIHJldHVybiBNRENGb3VuZGF0aW9uO1xufSgpKTtcbmV4cG9ydCB7IE1EQ0ZvdW5kYXRpb24gfTtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1kZWZhdWx0LWV4cG9ydCBOZWVkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBNREMgV2ViIHYwLjQ0LjAgYW5kIGVhcmxpZXIuXG5leHBvcnQgZGVmYXVsdCBNRENGb3VuZGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm91bmRhdGlvbi5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbmltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWQgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE1EQ0ZvdW5kYXRpb24gfSBmcm9tICcuL2ZvdW5kYXRpb24nO1xudmFyIE1EQ0NvbXBvbmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNRENDb21wb25lbnQocm9vdCwgZm91bmRhdGlvbikge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJvb3QgPSByb290O1xuICAgICAgICB0aGlzLmluaXRpYWxpemUuYXBwbHkodGhpcywgX19zcHJlYWQoYXJncykpO1xuICAgICAgICAvLyBOb3RlIHRoYXQgd2UgaW5pdGlhbGl6ZSBmb3VuZGF0aW9uIGhlcmUgYW5kIG5vdCB3aXRoaW4gdGhlIGNvbnN0cnVjdG9yJ3MgZGVmYXVsdCBwYXJhbSBzbyB0aGF0XG4gICAgICAgIC8vIHRoaXMucm9vdF8gaXMgZGVmaW5lZCBhbmQgY2FuIGJlIHVzZWQgd2l0aGluIHRoZSBmb3VuZGF0aW9uIGNsYXNzLlxuICAgICAgICB0aGlzLmZvdW5kYXRpb24gPVxuICAgICAgICAgICAgZm91bmRhdGlvbiA9PT0gdW5kZWZpbmVkID8gdGhpcy5nZXREZWZhdWx0Rm91bmRhdGlvbigpIDogZm91bmRhdGlvbjtcbiAgICAgICAgdGhpcy5mb3VuZGF0aW9uLmluaXQoKTtcbiAgICAgICAgdGhpcy5pbml0aWFsU3luY1dpdGhET00oKTtcbiAgICB9XG4gICAgTURDQ29tcG9uZW50LmF0dGFjaFRvID0gZnVuY3Rpb24gKHJvb3QpIHtcbiAgICAgICAgLy8gU3ViY2xhc3NlcyB3aGljaCBleHRlbmQgTURDQmFzZSBzaG91bGQgcHJvdmlkZSBhbiBhdHRhY2hUbygpIG1ldGhvZCB0aGF0IHRha2VzIGEgcm9vdCBlbGVtZW50IGFuZFxuICAgICAgICAvLyByZXR1cm5zIGFuIGluc3RhbnRpYXRlZCBjb21wb25lbnQgd2l0aCBpdHMgcm9vdCBzZXQgdG8gdGhhdCBlbGVtZW50LiBBbHNvIG5vdGUgdGhhdCBpbiB0aGUgY2FzZXMgb2ZcbiAgICAgICAgLy8gc3ViY2xhc3NlcywgYW4gZXhwbGljaXQgZm91bmRhdGlvbiBjbGFzcyB3aWxsIG5vdCBoYXZlIHRvIGJlIHBhc3NlZCBpbjsgaXQgd2lsbCBzaW1wbHkgYmUgaW5pdGlhbGl6ZWRcbiAgICAgICAgLy8gZnJvbSBnZXREZWZhdWx0Rm91bmRhdGlvbigpLlxuICAgICAgICByZXR1cm4gbmV3IE1EQ0NvbXBvbmVudChyb290LCBuZXcgTURDRm91bmRhdGlvbih7fSkpO1xuICAgIH07XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IG1ldGhvZCBwYXJhbSBvbmx5IGV4aXN0cyBmb3IgdHlwaW5nIHB1cnBvc2VzOyBpdCBkb2VzIG5vdCBuZWVkIHRvIGJlIHVuaXQgdGVzdGVkICovXG4gICAgTURDQ29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2FyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIF9hcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gU3ViY2xhc3NlcyBjYW4gb3ZlcnJpZGUgdGhpcyB0byBkbyBhbnkgYWRkaXRpb25hbCBzZXR1cCB3b3JrIHRoYXQgd291bGQgYmUgY29uc2lkZXJlZCBwYXJ0IG9mIGFcbiAgICAgICAgLy8gXCJjb25zdHJ1Y3RvclwiLiBFc3NlbnRpYWxseSwgaXQgaXMgYSBob29rIGludG8gdGhlIHBhcmVudCBjb25zdHJ1Y3RvciBiZWZvcmUgdGhlIGZvdW5kYXRpb24gaXNcbiAgICAgICAgLy8gaW5pdGlhbGl6ZWQuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBiZXNpZGVzIHJvb3QgYW5kIGZvdW5kYXRpb24gd2lsbCBiZSBwYXNzZWQgaW4gaGVyZS5cbiAgICB9O1xuICAgIE1EQ0NvbXBvbmVudC5wcm90b3R5cGUuZ2V0RGVmYXVsdEZvdW5kYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFN1YmNsYXNzZXMgbXVzdCBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byByZXR1cm4gYSBwcm9wZXJseSBjb25maWd1cmVkIGZvdW5kYXRpb24gY2xhc3MgZm9yIHRoZVxuICAgICAgICAvLyBjb21wb25lbnQuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU3ViY2xhc3NlcyBtdXN0IG92ZXJyaWRlIGdldERlZmF1bHRGb3VuZGF0aW9uIHRvIHJldHVybiBhIHByb3Blcmx5IGNvbmZpZ3VyZWQgJyArXG4gICAgICAgICAgICAnZm91bmRhdGlvbiBjbGFzcycpO1xuICAgIH07XG4gICAgTURDQ29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsU3luY1dpdGhET00gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFN1YmNsYXNzZXMgc2hvdWxkIG92ZXJyaWRlIHRoaXMgbWV0aG9kIGlmIHRoZXkgbmVlZCB0byBwZXJmb3JtIHdvcmsgdG8gc3luY2hyb25pemUgd2l0aCBhIGhvc3QgRE9NXG4gICAgICAgIC8vIG9iamVjdC4gQW4gZXhhbXBsZSBvZiB0aGlzIHdvdWxkIGJlIGEgZm9ybSBjb250cm9sIHdyYXBwZXIgdGhhdCBuZWVkcyB0byBzeW5jaHJvbml6ZSBpdHMgaW50ZXJuYWwgc3RhdGVcbiAgICAgICAgLy8gdG8gc29tZSBwcm9wZXJ0eSBvciBhdHRyaWJ1dGUgb2YgdGhlIGhvc3QgRE9NLiBQbGVhc2Ugbm90ZTogdGhpcyBpcyAqbm90KiB0aGUgcGxhY2UgdG8gcGVyZm9ybSBET01cbiAgICAgICAgLy8gcmVhZHMvd3JpdGVzIHRoYXQgd291bGQgY2F1c2UgbGF5b3V0IC8gcGFpbnQsIGFzIHRoaXMgaXMgY2FsbGVkIHN5bmNocm9ub3VzbHkgZnJvbSB3aXRoaW4gdGhlIGNvbnN0cnVjdG9yLlxuICAgIH07XG4gICAgTURDQ29tcG9uZW50LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBTdWJjbGFzc2VzIG1heSBpbXBsZW1lbnQgdGhpcyBtZXRob2QgdG8gcmVsZWFzZSBhbnkgcmVzb3VyY2VzIC8gZGVyZWdpc3RlciBhbnkgbGlzdGVuZXJzIHRoZXkgaGF2ZVxuICAgICAgICAvLyBhdHRhY2hlZC4gQW4gZXhhbXBsZSBvZiB0aGlzIG1pZ2h0IGJlIGRlcmVnaXN0ZXJpbmcgYSByZXNpemUgZXZlbnQgZnJvbSB0aGUgd2luZG93IG9iamVjdC5cbiAgICAgICAgdGhpcy5mb3VuZGF0aW9uLmRlc3Ryb3koKTtcbiAgICB9O1xuICAgIE1EQ0NvbXBvbmVudC5wcm90b3R5cGUubGlzdGVuID0gZnVuY3Rpb24gKGV2dFR5cGUsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5yb290LmFkZEV2ZW50TGlzdGVuZXIoZXZ0VHlwZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgfTtcbiAgICBNRENDb21wb25lbnQucHJvdG90eXBlLnVubGlzdGVuID0gZnVuY3Rpb24gKGV2dFR5cGUsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5yb290LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZ0VHlwZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBGaXJlcyBhIGNyb3NzLWJyb3dzZXItY29tcGF0aWJsZSBjdXN0b20gZXZlbnQgZnJvbSB0aGUgY29tcG9uZW50IHJvb3Qgb2YgdGhlIGdpdmVuIHR5cGUsIHdpdGggdGhlIGdpdmVuIGRhdGEuXG4gICAgICovXG4gICAgTURDQ29tcG9uZW50LnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gKGV2dFR5cGUsIGV2dERhdGEsIHNob3VsZEJ1YmJsZSkge1xuICAgICAgICBpZiAoc2hvdWxkQnViYmxlID09PSB2b2lkIDApIHsgc2hvdWxkQnViYmxlID0gZmFsc2U7IH1cbiAgICAgICAgdmFyIGV2dDtcbiAgICAgICAgaWYgKHR5cGVvZiBDdXN0b21FdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgZXZ0ID0gbmV3IEN1c3RvbUV2ZW50KGV2dFR5cGUsIHtcbiAgICAgICAgICAgICAgICBidWJibGVzOiBzaG91bGRCdWJibGUsXG4gICAgICAgICAgICAgICAgZGV0YWlsOiBldnREYXRhLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgICAgICAgICAgIGV2dC5pbml0Q3VzdG9tRXZlbnQoZXZ0VHlwZSwgc2hvdWxkQnViYmxlLCBmYWxzZSwgZXZ0RGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yb290LmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICB9O1xuICAgIHJldHVybiBNRENDb21wb25lbnQ7XG59KCkpO1xuZXhwb3J0IHsgTURDQ29tcG9uZW50IH07XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZGVmYXVsdC1leHBvcnQgTmVlZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGggTURDIFdlYiB2MC40NC4wIGFuZCBlYXJsaWVyLlxuZXhwb3J0IGRlZmF1bHQgTURDQ29tcG9uZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcG9uZW50LmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuLyoqXG4gKiBEZXRlcm1pbmUgd2hldGhlciB0aGUgY3VycmVudCBicm93c2VyIHN1cHBvcnRzIHBhc3NpdmUgZXZlbnQgbGlzdGVuZXJzLCBhbmRcbiAqIGlmIHNvLCB1c2UgdGhlbS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5UGFzc2l2ZShnbG9iYWxPYmopIHtcbiAgICBpZiAoZ2xvYmFsT2JqID09PSB2b2lkIDApIHsgZ2xvYmFsT2JqID0gd2luZG93OyB9XG4gICAgcmV0dXJuIHN1cHBvcnRzUGFzc2l2ZU9wdGlvbihnbG9iYWxPYmopID9cbiAgICAgICAgeyBwYXNzaXZlOiB0cnVlIH0gOlxuICAgICAgICBmYWxzZTtcbn1cbmZ1bmN0aW9uIHN1cHBvcnRzUGFzc2l2ZU9wdGlvbihnbG9iYWxPYmopIHtcbiAgICBpZiAoZ2xvYmFsT2JqID09PSB2b2lkIDApIHsgZ2xvYmFsT2JqID0gd2luZG93OyB9XG4gICAgLy8gU2VlXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0V2ZW50VGFyZ2V0L2FkZEV2ZW50TGlzdGVuZXJcbiAgICB2YXIgcGFzc2l2ZVN1cHBvcnRlZCA9IGZhbHNlO1xuICAgIHRyeSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBicm93c2VyXG4gICAgICAgICAgICAvLyBhdHRlbXB0cyB0byBhY2Nlc3MgdGhlIHBhc3NpdmUgcHJvcGVydHkuXG4gICAgICAgICAgICBnZXQgcGFzc2l2ZSgpIHtcbiAgICAgICAgICAgICAgICBwYXNzaXZlU3VwcG9ydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgICAgICBnbG9iYWxPYmouZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgICAgICBnbG9iYWxPYmouZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndGVzdCcsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHBhc3NpdmVTdXBwb3J0ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHBhc3NpdmVTdXBwb3J0ZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldmVudHMuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQSBcInBvbnlmaWxsXCIgaXMgYSBwb2x5ZmlsbCB0aGF0IGRvZXNuJ3QgbW9kaWZ5IHRoZSBnbG9iYWwgcHJvdG90eXBlIGNoYWluLlxuICogVGhpcyBtYWtlcyBwb255ZmlsbHMgc2FmZXIgdGhhbiB0cmFkaXRpb25hbCBwb2x5ZmlsbHMsIGVzcGVjaWFsbHkgZm9yIGxpYnJhcmllcyBsaWtlIE1EQy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsb3Nlc3QoZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgICBpZiAoZWxlbWVudC5jbG9zZXN0KSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50LmNsb3Nlc3Qoc2VsZWN0b3IpO1xuICAgIH1cbiAgICB2YXIgZWwgPSBlbGVtZW50O1xuICAgIHdoaWxlIChlbCkge1xuICAgICAgICBpZiAobWF0Y2hlcyhlbCwgc2VsZWN0b3IpKSB7XG4gICAgICAgICAgICByZXR1cm4gZWw7XG4gICAgICAgIH1cbiAgICAgICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaGVzKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgdmFyIG5hdGl2ZU1hdGNoZXMgPSBlbGVtZW50Lm1hdGNoZXNcbiAgICAgICAgfHwgZWxlbWVudC53ZWJraXRNYXRjaGVzU2VsZWN0b3JcbiAgICAgICAgfHwgZWxlbWVudC5tc01hdGNoZXNTZWxlY3RvcjtcbiAgICByZXR1cm4gbmF0aXZlTWF0Y2hlcy5jYWxsKGVsZW1lbnQsIHNlbGVjdG9yKTtcbn1cbi8qKlxuICogVXNlZCB0byBjb21wdXRlIHRoZSBlc3RpbWF0ZWQgc2Nyb2xsIHdpZHRoIG9mIGVsZW1lbnRzLiBXaGVuIGFuIGVsZW1lbnQgaXNcbiAqIGhpZGRlbiBkdWUgdG8gZGlzcGxheTogbm9uZTsgYmVpbmcgYXBwbGllZCB0byBhIHBhcmVudCBlbGVtZW50LCB0aGUgd2lkdGggaXNcbiAqIHJldHVybmVkIGFzIDAuIEhvd2V2ZXIsIHRoZSBlbGVtZW50IHdpbGwgaGF2ZSBhIHRydWUgd2lkdGggb25jZSBubyBsb25nZXJcbiAqIGluc2lkZSBhIGRpc3BsYXk6IG5vbmUgY29udGV4dC4gVGhpcyBtZXRob2QgY29tcHV0ZXMgYW4gZXN0aW1hdGVkIHdpZHRoIHdoZW5cbiAqIHRoZSBlbGVtZW50IGlzIGhpZGRlbiBvciByZXR1cm5zIHRoZSB0cnVlIHdpZHRoIHdoZW4gdGhlIGVsZW1lbnQgaXMgdmlzYmxlLlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdob3NlIHdpZHRoIHRvIGVzdGltYXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlc3RpbWF0ZVNjcm9sbFdpZHRoKGVsZW1lbnQpIHtcbiAgICAvLyBDaGVjayB0aGUgb2Zmc2V0UGFyZW50LiBJZiB0aGUgZWxlbWVudCBpbmhlcml0cyBkaXNwbGF5OiBub25lIGZyb20gYW55XG4gICAgLy8gcGFyZW50LCB0aGUgb2Zmc2V0UGFyZW50IHByb3BlcnR5IHdpbGwgYmUgbnVsbCAoc2VlXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxFbGVtZW50L29mZnNldFBhcmVudCkuXG4gICAgLy8gVGhpcyBjaGVjayBlbnN1cmVzIHdlIG9ubHkgY2xvbmUgdGhlIG5vZGUgd2hlbiBuZWNlc3NhcnkuXG4gICAgdmFyIGh0bWxFbCA9IGVsZW1lbnQ7XG4gICAgaWYgKGh0bWxFbC5vZmZzZXRQYXJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGh0bWxFbC5zY3JvbGxXaWR0aDtcbiAgICB9XG4gICAgdmFyIGNsb25lID0gaHRtbEVsLmNsb25lTm9kZSh0cnVlKTtcbiAgICBjbG9uZS5zdHlsZS5zZXRQcm9wZXJ0eSgncG9zaXRpb24nLCAnYWJzb2x1dGUnKTtcbiAgICBjbG9uZS5zdHlsZS5zZXRQcm9wZXJ0eSgndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgtOTk5OXB4LCAtOTk5OXB4KScpO1xuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZChjbG9uZSk7XG4gICAgdmFyIHNjcm9sbFdpZHRoID0gY2xvbmUuc2Nyb2xsV2lkdGg7XG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKGNsb25lKTtcbiAgICByZXR1cm4gc2Nyb2xsV2lkdGg7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb255ZmlsbC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbnZhciBjc3NDbGFzc2VzID0ge1xuICAgIEFOSU1BVElORzogJ21kYy10YWItc2Nyb2xsZXItLWFuaW1hdGluZycsXG4gICAgU0NST0xMX0FSRUFfU0NST0xMOiAnbWRjLXRhYi1zY3JvbGxlcl9fc2Nyb2xsLWFyZWEtLXNjcm9sbCcsXG4gICAgU0NST0xMX1RFU1Q6ICdtZGMtdGFiLXNjcm9sbGVyX190ZXN0Jyxcbn07XG52YXIgc3RyaW5ncyA9IHtcbiAgICBBUkVBX1NFTEVDVE9SOiAnLm1kYy10YWItc2Nyb2xsZXJfX3Njcm9sbC1hcmVhJyxcbiAgICBDT05URU5UX1NFTEVDVE9SOiAnLm1kYy10YWItc2Nyb2xsZXJfX3Njcm9sbC1jb250ZW50Jyxcbn07XG5leHBvcnQgeyBjc3NDbGFzc2VzLCBzdHJpbmdzLCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuaW1wb3J0IHsgY3NzQ2xhc3NlcyB9IGZyb20gJy4vY29uc3RhbnRzJztcbi8qKlxuICogU3RvcmVzIHJlc3VsdCBmcm9tIGNvbXB1dGVIb3Jpem9udGFsU2Nyb2xsYmFySGVpZ2h0IHRvIGF2b2lkIHJlZHVuZGFudCBwcm9jZXNzaW5nLlxuICovXG52YXIgaG9yaXpvbnRhbFNjcm9sbGJhckhlaWdodF87XG4vKipcbiAqIENvbXB1dGVzIHRoZSBoZWlnaHQgb2YgYnJvd3Nlci1yZW5kZXJlZCBob3Jpem9udGFsIHNjcm9sbGJhcnMgdXNpbmcgYSBzZWxmLWNyZWF0ZWQgdGVzdCBlbGVtZW50LlxuICogTWF5IHJldHVybiAwIChlLmcuIG9uIE9TIFggYnJvd3NlcnMgdW5kZXIgZGVmYXVsdCBjb25maWd1cmF0aW9uKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVIb3Jpem9udGFsU2Nyb2xsYmFySGVpZ2h0KGRvY3VtZW50T2JqLCBzaG91bGRDYWNoZVJlc3VsdCkge1xuICAgIGlmIChzaG91bGRDYWNoZVJlc3VsdCA9PT0gdm9pZCAwKSB7IHNob3VsZENhY2hlUmVzdWx0ID0gdHJ1ZTsgfVxuICAgIGlmIChzaG91bGRDYWNoZVJlc3VsdCAmJiB0eXBlb2YgaG9yaXpvbnRhbFNjcm9sbGJhckhlaWdodF8gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBob3Jpem9udGFsU2Nyb2xsYmFySGVpZ2h0XztcbiAgICB9XG4gICAgdmFyIGVsID0gZG9jdW1lbnRPYmouY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWwuY2xhc3NMaXN0LmFkZChjc3NDbGFzc2VzLlNDUk9MTF9URVNUKTtcbiAgICBkb2N1bWVudE9iai5ib2R5LmFwcGVuZENoaWxkKGVsKTtcbiAgICB2YXIgaG9yaXpvbnRhbFNjcm9sbGJhckhlaWdodCA9IGVsLm9mZnNldEhlaWdodCAtIGVsLmNsaWVudEhlaWdodDtcbiAgICBkb2N1bWVudE9iai5ib2R5LnJlbW92ZUNoaWxkKGVsKTtcbiAgICBpZiAoc2hvdWxkQ2FjaGVSZXN1bHQpIHtcbiAgICAgICAgaG9yaXpvbnRhbFNjcm9sbGJhckhlaWdodF8gPSBob3Jpem9udGFsU2Nyb2xsYmFySGVpZ2h0O1xuICAgIH1cbiAgICByZXR1cm4gaG9yaXpvbnRhbFNjcm9sbGJhckhlaWdodDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG52YXIgTURDVGFiU2Nyb2xsZXJSVEwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTURDVGFiU2Nyb2xsZXJSVEwoYWRhcHRlcikge1xuICAgICAgICB0aGlzLmFkYXB0ZXIgPSBhZGFwdGVyO1xuICAgIH1cbiAgICByZXR1cm4gTURDVGFiU2Nyb2xsZXJSVEw7XG59KCkpO1xuZXhwb3J0IHsgTURDVGFiU2Nyb2xsZXJSVEwgfTtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1kZWZhdWx0LWV4cG9ydCBOZWVkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBNREMgV2ViIHYwLjQ0LjAgYW5kIGVhcmxpZXIuXG5leHBvcnQgZGVmYXVsdCBNRENUYWJTY3JvbGxlclJUTDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJ0bC1zY3JvbGxlci5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbmltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgTURDVGFiU2Nyb2xsZXJSVEwgfSBmcm9tICcuL3J0bC1zY3JvbGxlcic7XG52YXIgTURDVGFiU2Nyb2xsZXJSVExEZWZhdWx0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNRENUYWJTY3JvbGxlclJUTERlZmF1bHQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTURDVGFiU2Nyb2xsZXJSVExEZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIE1EQ1RhYlNjcm9sbGVyUlRMRGVmYXVsdC5wcm90b3R5cGUuZ2V0U2Nyb2xsUG9zaXRpb25SVEwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjdXJyZW50U2Nyb2xsTGVmdCA9IHRoaXMuYWRhcHRlci5nZXRTY3JvbGxBcmVhU2Nyb2xsTGVmdCgpO1xuICAgICAgICB2YXIgcmlnaHQgPSB0aGlzLmNhbGN1bGF0ZVNjcm9sbEVkZ2VzXygpLnJpZ2h0O1xuICAgICAgICAvLyBTY3JvbGwgdmFsdWVzIG9uIG1vc3QgYnJvd3NlcnMgYXJlIGludHMgaW5zdGVhZCBvZiBmbG9hdHMgc28gd2Ugcm91bmRcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQocmlnaHQgLSBjdXJyZW50U2Nyb2xsTGVmdCk7XG4gICAgfTtcbiAgICBNRENUYWJTY3JvbGxlclJUTERlZmF1bHQucHJvdG90eXBlLnNjcm9sbFRvUlRMID0gZnVuY3Rpb24gKHNjcm9sbFgpIHtcbiAgICAgICAgdmFyIGVkZ2VzID0gdGhpcy5jYWxjdWxhdGVTY3JvbGxFZGdlc18oKTtcbiAgICAgICAgdmFyIGN1cnJlbnRTY3JvbGxMZWZ0ID0gdGhpcy5hZGFwdGVyLmdldFNjcm9sbEFyZWFTY3JvbGxMZWZ0KCk7XG4gICAgICAgIHZhciBjbGFtcGVkU2Nyb2xsTGVmdCA9IHRoaXMuY2xhbXBTY3JvbGxWYWx1ZV8oZWRnZXMucmlnaHQgLSBzY3JvbGxYKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpbmFsU2Nyb2xsUG9zaXRpb246IGNsYW1wZWRTY3JvbGxMZWZ0LFxuICAgICAgICAgICAgc2Nyb2xsRGVsdGE6IGNsYW1wZWRTY3JvbGxMZWZ0IC0gY3VycmVudFNjcm9sbExlZnQsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBNRENUYWJTY3JvbGxlclJUTERlZmF1bHQucHJvdG90eXBlLmluY3JlbWVudFNjcm9sbFJUTCA9IGZ1bmN0aW9uIChzY3JvbGxYKSB7XG4gICAgICAgIHZhciBjdXJyZW50U2Nyb2xsTGVmdCA9IHRoaXMuYWRhcHRlci5nZXRTY3JvbGxBcmVhU2Nyb2xsTGVmdCgpO1xuICAgICAgICB2YXIgY2xhbXBlZFNjcm9sbExlZnQgPSB0aGlzLmNsYW1wU2Nyb2xsVmFsdWVfKGN1cnJlbnRTY3JvbGxMZWZ0IC0gc2Nyb2xsWCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmaW5hbFNjcm9sbFBvc2l0aW9uOiBjbGFtcGVkU2Nyb2xsTGVmdCxcbiAgICAgICAgICAgIHNjcm9sbERlbHRhOiBjbGFtcGVkU2Nyb2xsTGVmdCAtIGN1cnJlbnRTY3JvbGxMZWZ0LFxuICAgICAgICB9O1xuICAgIH07XG4gICAgTURDVGFiU2Nyb2xsZXJSVExEZWZhdWx0LnByb3RvdHlwZS5nZXRBbmltYXRpbmdTY3JvbGxQb3NpdGlvbiA9IGZ1bmN0aW9uIChzY3JvbGxYKSB7XG4gICAgICAgIHJldHVybiBzY3JvbGxYO1xuICAgIH07XG4gICAgTURDVGFiU2Nyb2xsZXJSVExEZWZhdWx0LnByb3RvdHlwZS5jYWxjdWxhdGVTY3JvbGxFZGdlc18gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb250ZW50V2lkdGggPSB0aGlzLmFkYXB0ZXIuZ2V0U2Nyb2xsQ29udGVudE9mZnNldFdpZHRoKCk7XG4gICAgICAgIHZhciByb290V2lkdGggPSB0aGlzLmFkYXB0ZXIuZ2V0U2Nyb2xsQXJlYU9mZnNldFdpZHRoKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgcmlnaHQ6IGNvbnRlbnRXaWR0aCAtIHJvb3RXaWR0aCxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIE1EQ1RhYlNjcm9sbGVyUlRMRGVmYXVsdC5wcm90b3R5cGUuY2xhbXBTY3JvbGxWYWx1ZV8gPSBmdW5jdGlvbiAoc2Nyb2xsWCkge1xuICAgICAgICB2YXIgZWRnZXMgPSB0aGlzLmNhbGN1bGF0ZVNjcm9sbEVkZ2VzXygpO1xuICAgICAgICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgoZWRnZXMubGVmdCwgc2Nyb2xsWCksIGVkZ2VzLnJpZ2h0KTtcbiAgICB9O1xuICAgIHJldHVybiBNRENUYWJTY3JvbGxlclJUTERlZmF1bHQ7XG59KE1EQ1RhYlNjcm9sbGVyUlRMKSk7XG5leHBvcnQgeyBNRENUYWJTY3JvbGxlclJUTERlZmF1bHQgfTtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1kZWZhdWx0LWV4cG9ydCBOZWVkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBNREMgV2ViIHYwLjQ0LjAgYW5kIGVhcmxpZXIuXG5leHBvcnQgZGVmYXVsdCBNRENUYWJTY3JvbGxlclJUTERlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ydGwtZGVmYXVsdC1zY3JvbGxlci5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbmltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgTURDVGFiU2Nyb2xsZXJSVEwgfSBmcm9tICcuL3J0bC1zY3JvbGxlcic7XG52YXIgTURDVGFiU2Nyb2xsZXJSVExOZWdhdGl2ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTURDVGFiU2Nyb2xsZXJSVExOZWdhdGl2ZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNRENUYWJTY3JvbGxlclJUTE5lZ2F0aXZlKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIE1EQ1RhYlNjcm9sbGVyUlRMTmVnYXRpdmUucHJvdG90eXBlLmdldFNjcm9sbFBvc2l0aW9uUlRMID0gZnVuY3Rpb24gKHRyYW5zbGF0ZVgpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRTY3JvbGxMZWZ0ID0gdGhpcy5hZGFwdGVyLmdldFNjcm9sbEFyZWFTY3JvbGxMZWZ0KCk7XG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHRyYW5zbGF0ZVggLSBjdXJyZW50U2Nyb2xsTGVmdCk7XG4gICAgfTtcbiAgICBNRENUYWJTY3JvbGxlclJUTE5lZ2F0aXZlLnByb3RvdHlwZS5zY3JvbGxUb1JUTCA9IGZ1bmN0aW9uIChzY3JvbGxYKSB7XG4gICAgICAgIHZhciBjdXJyZW50U2Nyb2xsTGVmdCA9IHRoaXMuYWRhcHRlci5nZXRTY3JvbGxBcmVhU2Nyb2xsTGVmdCgpO1xuICAgICAgICB2YXIgY2xhbXBlZFNjcm9sbExlZnQgPSB0aGlzLmNsYW1wU2Nyb2xsVmFsdWVfKC1zY3JvbGxYKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpbmFsU2Nyb2xsUG9zaXRpb246IGNsYW1wZWRTY3JvbGxMZWZ0LFxuICAgICAgICAgICAgc2Nyb2xsRGVsdGE6IGNsYW1wZWRTY3JvbGxMZWZ0IC0gY3VycmVudFNjcm9sbExlZnQsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBNRENUYWJTY3JvbGxlclJUTE5lZ2F0aXZlLnByb3RvdHlwZS5pbmNyZW1lbnRTY3JvbGxSVEwgPSBmdW5jdGlvbiAoc2Nyb2xsWCkge1xuICAgICAgICB2YXIgY3VycmVudFNjcm9sbExlZnQgPSB0aGlzLmFkYXB0ZXIuZ2V0U2Nyb2xsQXJlYVNjcm9sbExlZnQoKTtcbiAgICAgICAgdmFyIGNsYW1wZWRTY3JvbGxMZWZ0ID0gdGhpcy5jbGFtcFNjcm9sbFZhbHVlXyhjdXJyZW50U2Nyb2xsTGVmdCAtIHNjcm9sbFgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmluYWxTY3JvbGxQb3NpdGlvbjogY2xhbXBlZFNjcm9sbExlZnQsXG4gICAgICAgICAgICBzY3JvbGxEZWx0YTogY2xhbXBlZFNjcm9sbExlZnQgLSBjdXJyZW50U2Nyb2xsTGVmdCxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIE1EQ1RhYlNjcm9sbGVyUlRMTmVnYXRpdmUucHJvdG90eXBlLmdldEFuaW1hdGluZ1Njcm9sbFBvc2l0aW9uID0gZnVuY3Rpb24gKHNjcm9sbFgsIHRyYW5zbGF0ZVgpIHtcbiAgICAgICAgcmV0dXJuIHNjcm9sbFggLSB0cmFuc2xhdGVYO1xuICAgIH07XG4gICAgTURDVGFiU2Nyb2xsZXJSVExOZWdhdGl2ZS5wcm90b3R5cGUuY2FsY3VsYXRlU2Nyb2xsRWRnZXNfID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29udGVudFdpZHRoID0gdGhpcy5hZGFwdGVyLmdldFNjcm9sbENvbnRlbnRPZmZzZXRXaWR0aCgpO1xuICAgICAgICB2YXIgcm9vdFdpZHRoID0gdGhpcy5hZGFwdGVyLmdldFNjcm9sbEFyZWFPZmZzZXRXaWR0aCgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGVmdDogcm9vdFdpZHRoIC0gY29udGVudFdpZHRoLFxuICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBNRENUYWJTY3JvbGxlclJUTE5lZ2F0aXZlLnByb3RvdHlwZS5jbGFtcFNjcm9sbFZhbHVlXyA9IGZ1bmN0aW9uIChzY3JvbGxYKSB7XG4gICAgICAgIHZhciBlZGdlcyA9IHRoaXMuY2FsY3VsYXRlU2Nyb2xsRWRnZXNfKCk7XG4gICAgICAgIHJldHVybiBNYXRoLm1heChNYXRoLm1pbihlZGdlcy5yaWdodCwgc2Nyb2xsWCksIGVkZ2VzLmxlZnQpO1xuICAgIH07XG4gICAgcmV0dXJuIE1EQ1RhYlNjcm9sbGVyUlRMTmVnYXRpdmU7XG59KE1EQ1RhYlNjcm9sbGVyUlRMKSk7XG5leHBvcnQgeyBNRENUYWJTY3JvbGxlclJUTE5lZ2F0aXZlIH07XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZGVmYXVsdC1leHBvcnQgTmVlZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGggTURDIFdlYiB2MC40NC4wIGFuZCBlYXJsaWVyLlxuZXhwb3J0IGRlZmF1bHQgTURDVGFiU2Nyb2xsZXJSVExOZWdhdGl2ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJ0bC1uZWdhdGl2ZS1zY3JvbGxlci5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbmltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgTURDVGFiU2Nyb2xsZXJSVEwgfSBmcm9tICcuL3J0bC1zY3JvbGxlcic7XG52YXIgTURDVGFiU2Nyb2xsZXJSVExSZXZlcnNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNRENUYWJTY3JvbGxlclJUTFJldmVyc2UsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTURDVGFiU2Nyb2xsZXJSVExSZXZlcnNlKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIE1EQ1RhYlNjcm9sbGVyUlRMUmV2ZXJzZS5wcm90b3R5cGUuZ2V0U2Nyb2xsUG9zaXRpb25SVEwgPSBmdW5jdGlvbiAodHJhbnNsYXRlWCkge1xuICAgICAgICB2YXIgY3VycmVudFNjcm9sbExlZnQgPSB0aGlzLmFkYXB0ZXIuZ2V0U2Nyb2xsQXJlYVNjcm9sbExlZnQoKTtcbiAgICAgICAgLy8gU2Nyb2xsIHZhbHVlcyBvbiBtb3N0IGJyb3dzZXJzIGFyZSBpbnRzIGluc3RlYWQgb2YgZmxvYXRzIHNvIHdlIHJvdW5kXG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKGN1cnJlbnRTY3JvbGxMZWZ0IC0gdHJhbnNsYXRlWCk7XG4gICAgfTtcbiAgICBNRENUYWJTY3JvbGxlclJUTFJldmVyc2UucHJvdG90eXBlLnNjcm9sbFRvUlRMID0gZnVuY3Rpb24gKHNjcm9sbFgpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRTY3JvbGxMZWZ0ID0gdGhpcy5hZGFwdGVyLmdldFNjcm9sbEFyZWFTY3JvbGxMZWZ0KCk7XG4gICAgICAgIHZhciBjbGFtcGVkU2Nyb2xsTGVmdCA9IHRoaXMuY2xhbXBTY3JvbGxWYWx1ZV8oc2Nyb2xsWCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmaW5hbFNjcm9sbFBvc2l0aW9uOiBjbGFtcGVkU2Nyb2xsTGVmdCxcbiAgICAgICAgICAgIHNjcm9sbERlbHRhOiBjdXJyZW50U2Nyb2xsTGVmdCAtIGNsYW1wZWRTY3JvbGxMZWZ0LFxuICAgICAgICB9O1xuICAgIH07XG4gICAgTURDVGFiU2Nyb2xsZXJSVExSZXZlcnNlLnByb3RvdHlwZS5pbmNyZW1lbnRTY3JvbGxSVEwgPSBmdW5jdGlvbiAoc2Nyb2xsWCkge1xuICAgICAgICB2YXIgY3VycmVudFNjcm9sbExlZnQgPSB0aGlzLmFkYXB0ZXIuZ2V0U2Nyb2xsQXJlYVNjcm9sbExlZnQoKTtcbiAgICAgICAgdmFyIGNsYW1wZWRTY3JvbGxMZWZ0ID0gdGhpcy5jbGFtcFNjcm9sbFZhbHVlXyhjdXJyZW50U2Nyb2xsTGVmdCArIHNjcm9sbFgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmluYWxTY3JvbGxQb3NpdGlvbjogY2xhbXBlZFNjcm9sbExlZnQsXG4gICAgICAgICAgICBzY3JvbGxEZWx0YTogY3VycmVudFNjcm9sbExlZnQgLSBjbGFtcGVkU2Nyb2xsTGVmdCxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIE1EQ1RhYlNjcm9sbGVyUlRMUmV2ZXJzZS5wcm90b3R5cGUuZ2V0QW5pbWF0aW5nU2Nyb2xsUG9zaXRpb24gPSBmdW5jdGlvbiAoc2Nyb2xsWCwgdHJhbnNsYXRlWCkge1xuICAgICAgICByZXR1cm4gc2Nyb2xsWCArIHRyYW5zbGF0ZVg7XG4gICAgfTtcbiAgICBNRENUYWJTY3JvbGxlclJUTFJldmVyc2UucHJvdG90eXBlLmNhbGN1bGF0ZVNjcm9sbEVkZ2VzXyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvbnRlbnRXaWR0aCA9IHRoaXMuYWRhcHRlci5nZXRTY3JvbGxDb250ZW50T2Zmc2V0V2lkdGgoKTtcbiAgICAgICAgdmFyIHJvb3RXaWR0aCA9IHRoaXMuYWRhcHRlci5nZXRTY3JvbGxBcmVhT2Zmc2V0V2lkdGgoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxlZnQ6IGNvbnRlbnRXaWR0aCAtIHJvb3RXaWR0aCxcbiAgICAgICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICB9O1xuICAgIH07XG4gICAgTURDVGFiU2Nyb2xsZXJSVExSZXZlcnNlLnByb3RvdHlwZS5jbGFtcFNjcm9sbFZhbHVlXyA9IGZ1bmN0aW9uIChzY3JvbGxYKSB7XG4gICAgICAgIHZhciBlZGdlcyA9IHRoaXMuY2FsY3VsYXRlU2Nyb2xsRWRnZXNfKCk7XG4gICAgICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChlZGdlcy5yaWdodCwgc2Nyb2xsWCksIGVkZ2VzLmxlZnQpO1xuICAgIH07XG4gICAgcmV0dXJuIE1EQ1RhYlNjcm9sbGVyUlRMUmV2ZXJzZTtcbn0oTURDVGFiU2Nyb2xsZXJSVEwpKTtcbmV4cG9ydCB7IE1EQ1RhYlNjcm9sbGVyUlRMUmV2ZXJzZSB9O1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWRlZmF1bHQtZXhwb3J0IE5lZWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIE1EQyBXZWIgdjAuNDQuMCBhbmQgZWFybGllci5cbmV4cG9ydCBkZWZhdWx0IE1EQ1RhYlNjcm9sbGVyUlRMUmV2ZXJzZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJ0bC1yZXZlcnNlLXNjcm9sbGVyLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuaW1wb3J0IHsgX19hc3NpZ24sIF9fZXh0ZW5kcywgX19yZWFkIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBNRENGb3VuZGF0aW9uIH0gZnJvbSAnQG1hdGVyaWFsL2Jhc2UvZm91bmRhdGlvbic7XG5pbXBvcnQgeyBjc3NDbGFzc2VzLCBzdHJpbmdzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgTURDVGFiU2Nyb2xsZXJSVExEZWZhdWx0IH0gZnJvbSAnLi9ydGwtZGVmYXVsdC1zY3JvbGxlcic7XG5pbXBvcnQgeyBNRENUYWJTY3JvbGxlclJUTE5lZ2F0aXZlIH0gZnJvbSAnLi9ydGwtbmVnYXRpdmUtc2Nyb2xsZXInO1xuaW1wb3J0IHsgTURDVGFiU2Nyb2xsZXJSVExSZXZlcnNlIH0gZnJvbSAnLi9ydGwtcmV2ZXJzZS1zY3JvbGxlcic7XG52YXIgTURDVGFiU2Nyb2xsZXJGb3VuZGF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNRENUYWJTY3JvbGxlckZvdW5kYXRpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTURDVGFiU2Nyb2xsZXJGb3VuZGF0aW9uKGFkYXB0ZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgX19hc3NpZ24oX19hc3NpZ24oe30sIE1EQ1RhYlNjcm9sbGVyRm91bmRhdGlvbi5kZWZhdWx0QWRhcHRlciksIGFkYXB0ZXIpKSB8fCB0aGlzO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ29udHJvbHMgd2hldGhlciB3ZSBzaG91bGQgaGFuZGxlIHRoZSB0cmFuc2l0aW9uZW5kIGFuZCBpbnRlcmFjdGlvbiBldmVudHMgZHVyaW5nIHRoZSBhbmltYXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy5pc0FuaW1hdGluZ18gPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVGFiU2Nyb2xsZXJGb3VuZGF0aW9uLCBcImNzc0NsYXNzZXNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBjc3NDbGFzc2VzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVGFiU2Nyb2xsZXJGb3VuZGF0aW9uLCBcInN0cmluZ3NcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVGFiU2Nyb2xsZXJGb3VuZGF0aW9uLCBcImRlZmF1bHRBZGFwdGVyXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgTWV0aG9kcyBzaG91bGQgYmUgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIGFkYXB0ZXIgaW50ZXJmYWNlLlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBldmVudFRhcmdldE1hdGNoZXNTZWxlY3RvcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH0sXG4gICAgICAgICAgICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGFkZFNjcm9sbEFyZWFDbGFzczogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIHNldFNjcm9sbEFyZWFTdHlsZVByb3BlcnR5OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgc2V0U2Nyb2xsQ29udGVudFN0eWxlUHJvcGVydHk6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBnZXRTY3JvbGxDb250ZW50U3R5bGVWYWx1ZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gJyc7IH0sXG4gICAgICAgICAgICAgICAgc2V0U2Nyb2xsQXJlYVNjcm9sbExlZnQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBnZXRTY3JvbGxBcmVhU2Nyb2xsTGVmdDogZnVuY3Rpb24gKCkgeyByZXR1cm4gMDsgfSxcbiAgICAgICAgICAgICAgICBnZXRTY3JvbGxDb250ZW50T2Zmc2V0V2lkdGg6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDA7IH0sXG4gICAgICAgICAgICAgICAgZ2V0U2Nyb2xsQXJlYU9mZnNldFdpZHRoOiBmdW5jdGlvbiAoKSB7IHJldHVybiAwOyB9LFxuICAgICAgICAgICAgICAgIGNvbXB1dGVTY3JvbGxBcmVhQ2xpZW50UmVjdDogZnVuY3Rpb24gKCkgeyByZXR1cm4gKHsgdG9wOiAwLCByaWdodDogMCwgYm90dG9tOiAwLCBsZWZ0OiAwLCB3aWR0aDogMCwgaGVpZ2h0OiAwIH0pOyB9LFxuICAgICAgICAgICAgICAgIGNvbXB1dGVTY3JvbGxDb250ZW50Q2xpZW50UmVjdDogZnVuY3Rpb24gKCkgeyByZXR1cm4gKHsgdG9wOiAwLCByaWdodDogMCwgYm90dG9tOiAwLCBsZWZ0OiAwLCB3aWR0aDogMCwgaGVpZ2h0OiAwIH0pOyB9LFxuICAgICAgICAgICAgICAgIGNvbXB1dGVIb3Jpem9udGFsU2Nyb2xsYmFySGVpZ2h0OiBmdW5jdGlvbiAoKSB7IHJldHVybiAwOyB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzXG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE1EQ1RhYlNjcm9sbGVyRm91bmRhdGlvbi5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gQ29tcHV0ZSBob3Jpem9udGFsIHNjcm9sbGJhciBoZWlnaHQgb24gc2Nyb2xsZXIgd2l0aCBvdmVyZmxvdyBpbml0aWFsbHkgaGlkZGVuLCB0aGVuIHVwZGF0ZSBvdmVyZmxvdyB0byBzY3JvbGxcbiAgICAgICAgLy8gYW5kIGltbWVkaWF0ZWx5IGFkanVzdCBib3R0b20gbWFyZ2luIHRvIGF2b2lkIHRoZSBzY3JvbGxiYXIgaW5pdGlhbGx5IGFwcGVhcmluZyBiZWZvcmUgSlMgcnVucy5cbiAgICAgICAgdmFyIGhvcml6b250YWxTY3JvbGxiYXJIZWlnaHQgPSB0aGlzLmFkYXB0ZXIuY29tcHV0ZUhvcml6b250YWxTY3JvbGxiYXJIZWlnaHQoKTtcbiAgICAgICAgdGhpcy5hZGFwdGVyLnNldFNjcm9sbEFyZWFTdHlsZVByb3BlcnR5KCdtYXJnaW4tYm90dG9tJywgLWhvcml6b250YWxTY3JvbGxiYXJIZWlnaHQgKyAncHgnKTtcbiAgICAgICAgdGhpcy5hZGFwdGVyLmFkZFNjcm9sbEFyZWFDbGFzcyhNRENUYWJTY3JvbGxlckZvdW5kYXRpb24uY3NzQ2xhc3Nlcy5TQ1JPTExfQVJFQV9TQ1JPTEwpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIGN1cnJlbnQgdmlzdWFsIHNjcm9sbCBwb3NpdGlvblxuICAgICAqL1xuICAgIE1EQ1RhYlNjcm9sbGVyRm91bmRhdGlvbi5wcm90b3R5cGUuZ2V0U2Nyb2xsUG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzUlRMXygpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wdXRlQ3VycmVudFNjcm9sbFBvc2l0aW9uUlRMXygpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjdXJyZW50VHJhbnNsYXRlWCA9IHRoaXMuY2FsY3VsYXRlQ3VycmVudFRyYW5zbGF0ZVhfKCk7XG4gICAgICAgIHZhciBzY3JvbGxMZWZ0ID0gdGhpcy5hZGFwdGVyLmdldFNjcm9sbEFyZWFTY3JvbGxMZWZ0KCk7XG4gICAgICAgIHJldHVybiBzY3JvbGxMZWZ0IC0gY3VycmVudFRyYW5zbGF0ZVg7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIGludGVyYWN0aW9uIGV2ZW50cyB0aGF0IG9jY3VyIGR1cmluZyB0cmFuc2l0aW9uXG4gICAgICovXG4gICAgTURDVGFiU2Nyb2xsZXJGb3VuZGF0aW9uLnByb3RvdHlwZS5oYW5kbGVJbnRlcmFjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRWFybHkgZXhpdCBpZiB3ZSBhcmVuJ3QgYW5pbWF0aW5nXG4gICAgICAgIGlmICghdGhpcy5pc0FuaW1hdGluZ18pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBQcmV2ZW50IG90aGVyIGV2ZW50IGxpc3RlbmVycyBmcm9tIGhhbmRsaW5nIHRoaXMgZXZlbnRcbiAgICAgICAgdGhpcy5zdG9wU2Nyb2xsQW5pbWF0aW9uXygpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSGFuZGxlcyB0aGUgdHJhbnNpdGlvbmVuZCBldmVudFxuICAgICAqL1xuICAgIE1EQ1RhYlNjcm9sbGVyRm91bmRhdGlvbi5wcm90b3R5cGUuaGFuZGxlVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgLy8gRWFybHkgZXhpdCBpZiB3ZSBhcmVuJ3QgYW5pbWF0aW5nIG9yIHRoZSBldmVudCB3YXMgdHJpZ2dlcmVkIGJ5IGEgZGlmZmVyZW50IGVsZW1lbnQuXG4gICAgICAgIHZhciBldnRUYXJnZXQgPSBldnQudGFyZ2V0O1xuICAgICAgICBpZiAoIXRoaXMuaXNBbmltYXRpbmdfIHx8XG4gICAgICAgICAgICAhdGhpcy5hZGFwdGVyLmV2ZW50VGFyZ2V0TWF0Y2hlc1NlbGVjdG9yKGV2dFRhcmdldCwgTURDVGFiU2Nyb2xsZXJGb3VuZGF0aW9uLnN0cmluZ3MuQ09OVEVOVF9TRUxFQ1RPUikpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzQW5pbWF0aW5nXyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmFkYXB0ZXIucmVtb3ZlQ2xhc3MoTURDVGFiU2Nyb2xsZXJGb3VuZGF0aW9uLmNzc0NsYXNzZXMuQU5JTUFUSU5HKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEluY3JlbWVudCB0aGUgc2Nyb2xsIHZhbHVlIGJ5IHRoZSBzY3JvbGxYSW5jcmVtZW50IHVzaW5nIGFuaW1hdGlvbi5cbiAgICAgKiBAcGFyYW0gc2Nyb2xsWEluY3JlbWVudCBUaGUgdmFsdWUgYnkgd2hpY2ggdG8gaW5jcmVtZW50IHRoZSBzY3JvbGwgcG9zaXRpb25cbiAgICAgKi9cbiAgICBNRENUYWJTY3JvbGxlckZvdW5kYXRpb24ucHJvdG90eXBlLmluY3JlbWVudFNjcm9sbCA9IGZ1bmN0aW9uIChzY3JvbGxYSW5jcmVtZW50KSB7XG4gICAgICAgIC8vIEVhcmx5IGV4aXQgZm9yIG5vbi1vcGVyYXRpb25hbCBpbmNyZW1lbnQgdmFsdWVzXG4gICAgICAgIGlmIChzY3JvbGxYSW5jcmVtZW50ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hbmltYXRlXyh0aGlzLmdldEluY3JlbWVudFNjcm9sbE9wZXJhdGlvbl8oc2Nyb2xsWEluY3JlbWVudCkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSW5jcmVtZW50IHRoZSBzY3JvbGwgdmFsdWUgYnkgdGhlIHNjcm9sbFhJbmNyZW1lbnQgd2l0aG91dCBhbmltYXRpb24uXG4gICAgICogQHBhcmFtIHNjcm9sbFhJbmNyZW1lbnQgVGhlIHZhbHVlIGJ5IHdoaWNoIHRvIGluY3JlbWVudCB0aGUgc2Nyb2xsIHBvc2l0aW9uXG4gICAgICovXG4gICAgTURDVGFiU2Nyb2xsZXJGb3VuZGF0aW9uLnByb3RvdHlwZS5pbmNyZW1lbnRTY3JvbGxJbW1lZGlhdGUgPSBmdW5jdGlvbiAoc2Nyb2xsWEluY3JlbWVudCkge1xuICAgICAgICAvLyBFYXJseSBleGl0IGZvciBub24tb3BlcmF0aW9uYWwgaW5jcmVtZW50IHZhbHVlc1xuICAgICAgICBpZiAoc2Nyb2xsWEluY3JlbWVudCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvcGVyYXRpb24gPSB0aGlzLmdldEluY3JlbWVudFNjcm9sbE9wZXJhdGlvbl8oc2Nyb2xsWEluY3JlbWVudCk7XG4gICAgICAgIGlmIChvcGVyYXRpb24uc2Nyb2xsRGVsdGEgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0b3BTY3JvbGxBbmltYXRpb25fKCk7XG4gICAgICAgIHRoaXMuYWRhcHRlci5zZXRTY3JvbGxBcmVhU2Nyb2xsTGVmdChvcGVyYXRpb24uZmluYWxTY3JvbGxQb3NpdGlvbik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTY3JvbGxzIHRvIHRoZSBnaXZlbiBzY3JvbGxYIHZhbHVlXG4gICAgICovXG4gICAgTURDVGFiU2Nyb2xsZXJGb3VuZGF0aW9uLnByb3RvdHlwZS5zY3JvbGxUbyA9IGZ1bmN0aW9uIChzY3JvbGxYKSB7XG4gICAgICAgIGlmICh0aGlzLmlzUlRMXygpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zY3JvbGxUb1JUTF8oc2Nyb2xsWCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zY3JvbGxUb18oc2Nyb2xsWCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIEJyb3dzZXItc3BlY2lmaWMge0BsaW5rIE1EQ1RhYlNjcm9sbGVyUlRMfSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBNRENUYWJTY3JvbGxlckZvdW5kYXRpb24ucHJvdG90eXBlLmdldFJUTFNjcm9sbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMucnRsU2Nyb2xsZXJJbnN0YW5jZV8pIHtcbiAgICAgICAgICAgIHRoaXMucnRsU2Nyb2xsZXJJbnN0YW5jZV8gPSB0aGlzLnJ0bFNjcm9sbGVyRmFjdG9yeV8oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5ydGxTY3JvbGxlckluc3RhbmNlXztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gdHJhbnNsYXRlWCB2YWx1ZSBmcm9tIGEgQ1NTIG1hdHJpeCB0cmFuc2Zvcm0gZnVuY3Rpb24gc3RyaW5nLlxuICAgICAqL1xuICAgIE1EQ1RhYlNjcm9sbGVyRm91bmRhdGlvbi5wcm90b3R5cGUuY2FsY3VsYXRlQ3VycmVudFRyYW5zbGF0ZVhfID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdHJhbnNmb3JtVmFsdWUgPSB0aGlzLmFkYXB0ZXIuZ2V0U2Nyb2xsQ29udGVudFN0eWxlVmFsdWUoJ3RyYW5zZm9ybScpO1xuICAgICAgICAvLyBFYXJseSBleGl0IGlmIG5vIHRyYW5zZm9ybSBpcyBwcmVzZW50XG4gICAgICAgIGlmICh0cmFuc2Zvcm1WYWx1ZSA9PT0gJ25vbmUnKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgdHJhbnNmb3JtIHZhbHVlIGNvbWVzIGJhY2sgYXMgYSBtYXRyaXggdHJhbnNmb3JtYXRpb24gaW4gdGhlIGZvcm1cbiAgICAgICAgLy8gb2YgYG1hdHJpeChhLCBiLCBjLCBkLCB0eCwgdHkpYC4gV2Ugb25seSBjYXJlIGFib3V0IHR4ICh0cmFuc2xhdGVYKSBzb1xuICAgICAgICAvLyB3ZSdyZSBnb2luZyB0byBncmFiIGFsbCB0aGUgcGFyZW50aGVzaXplZCB2YWx1ZXMsIHN0cmlwIG91dCB0eCwgYW5kXG4gICAgICAgIC8vIHBhcnNlIGl0LlxuICAgICAgICB2YXIgbWF0Y2ggPSAvXFwoKC4rPylcXCkvLmV4ZWModHJhbnNmb3JtVmFsdWUpO1xuICAgICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWF0cml4UGFyYW1zID0gbWF0Y2hbMV07XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpiYW4tdHMtaWdub3JlIFwiVW51c2VkIHZhcnNcIiBzaG91bGQgYmUgYSBsaW50ZXIgd2FybmluZywgbm90IGEgY29tcGlsZXIgZXJyb3IuXG4gICAgICAgIC8vIEB0cy1pZ25vcmUgVGhlc2UgdW51c2VkIHZhcmlhYmxlcyBzaG91bGQgcmV0YWluIHRoZWlyIHNlbWFudGljIG5hbWVzIGZvciBjbGFyaXR5LlxuICAgICAgICB2YXIgX2EgPSBfX3JlYWQobWF0cml4UGFyYW1zLnNwbGl0KCcsJyksIDYpLCBhID0gX2FbMF0sIGIgPSBfYVsxXSwgYyA9IF9hWzJdLCBkID0gX2FbM10sIHR4ID0gX2FbNF0sIHR5ID0gX2FbNV07XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHR4KTsgLy8gdHNsaW50OmRpc2FibGUtbGluZTpiYW5cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgYSBzYWZlIHNjcm9sbCB2YWx1ZSB0aGF0IGlzID4gMCBhbmQgPCB0aGUgbWF4IHNjcm9sbCB2YWx1ZVxuICAgICAqIEBwYXJhbSBzY3JvbGxYIFRoZSBkaXN0YW5jZSB0byBzY3JvbGxcbiAgICAgKi9cbiAgICBNRENUYWJTY3JvbGxlckZvdW5kYXRpb24ucHJvdG90eXBlLmNsYW1wU2Nyb2xsVmFsdWVfID0gZnVuY3Rpb24gKHNjcm9sbFgpIHtcbiAgICAgICAgdmFyIGVkZ2VzID0gdGhpcy5jYWxjdWxhdGVTY3JvbGxFZGdlc18oKTtcbiAgICAgICAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KGVkZ2VzLmxlZnQsIHNjcm9sbFgpLCBlZGdlcy5yaWdodCk7XG4gICAgfTtcbiAgICBNRENUYWJTY3JvbGxlckZvdW5kYXRpb24ucHJvdG90eXBlLmNvbXB1dGVDdXJyZW50U2Nyb2xsUG9zaXRpb25SVExfID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdHJhbnNsYXRlWCA9IHRoaXMuY2FsY3VsYXRlQ3VycmVudFRyYW5zbGF0ZVhfKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFJUTFNjcm9sbGVyKCkuZ2V0U2Nyb2xsUG9zaXRpb25SVEwodHJhbnNsYXRlWCk7XG4gICAgfTtcbiAgICBNRENUYWJTY3JvbGxlckZvdW5kYXRpb24ucHJvdG90eXBlLmNhbGN1bGF0ZVNjcm9sbEVkZ2VzXyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvbnRlbnRXaWR0aCA9IHRoaXMuYWRhcHRlci5nZXRTY3JvbGxDb250ZW50T2Zmc2V0V2lkdGgoKTtcbiAgICAgICAgdmFyIHJvb3RXaWR0aCA9IHRoaXMuYWRhcHRlci5nZXRTY3JvbGxBcmVhT2Zmc2V0V2lkdGgoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICByaWdodDogY29udGVudFdpZHRoIC0gcm9vdFdpZHRoLFxuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgc2Nyb2xsIG1ldGhvZFxuICAgICAqIEBwYXJhbSBzY3JvbGxYIFRoZSBuZXcgc2Nyb2xsIHBvc2l0aW9uXG4gICAgICovXG4gICAgTURDVGFiU2Nyb2xsZXJGb3VuZGF0aW9uLnByb3RvdHlwZS5zY3JvbGxUb18gPSBmdW5jdGlvbiAoc2Nyb2xsWCkge1xuICAgICAgICB2YXIgY3VycmVudFNjcm9sbFggPSB0aGlzLmdldFNjcm9sbFBvc2l0aW9uKCk7XG4gICAgICAgIHZhciBzYWZlU2Nyb2xsWCA9IHRoaXMuY2xhbXBTY3JvbGxWYWx1ZV8oc2Nyb2xsWCk7XG4gICAgICAgIHZhciBzY3JvbGxEZWx0YSA9IHNhZmVTY3JvbGxYIC0gY3VycmVudFNjcm9sbFg7XG4gICAgICAgIHRoaXMuYW5pbWF0ZV8oe1xuICAgICAgICAgICAgZmluYWxTY3JvbGxQb3NpdGlvbjogc2FmZVNjcm9sbFgsXG4gICAgICAgICAgICBzY3JvbGxEZWx0YTogc2Nyb2xsRGVsdGEsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgUlRMIHNjcm9sbCBtZXRob2RcbiAgICAgKiBAcGFyYW0gc2Nyb2xsWCBUaGUgbmV3IHNjcm9sbCBwb3NpdGlvblxuICAgICAqL1xuICAgIE1EQ1RhYlNjcm9sbGVyRm91bmRhdGlvbi5wcm90b3R5cGUuc2Nyb2xsVG9SVExfID0gZnVuY3Rpb24gKHNjcm9sbFgpIHtcbiAgICAgICAgdmFyIGFuaW1hdGlvbiA9IHRoaXMuZ2V0UlRMU2Nyb2xsZXIoKS5zY3JvbGxUb1JUTChzY3JvbGxYKTtcbiAgICAgICAgdGhpcy5hbmltYXRlXyhhbmltYXRpb24pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgbWV0aG9kIHRvIGNvbXB1dGUgdGhlIGluY3JlbWVudCBzY3JvbGwgb3BlcmF0aW9uIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0gc2Nyb2xsWCBUaGUgZGVzaXJlZCBzY3JvbGwgcG9zaXRpb24gaW5jcmVtZW50XG4gICAgICogQHJldHVybiBNRENUYWJTY3JvbGxlckFuaW1hdGlvbiB3aXRoIHRoZSBzYW5pdGl6ZWQgdmFsdWVzIGZvciBwZXJmb3JtaW5nIHRoZSBzY3JvbGwgb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIE1EQ1RhYlNjcm9sbGVyRm91bmRhdGlvbi5wcm90b3R5cGUuZ2V0SW5jcmVtZW50U2Nyb2xsT3BlcmF0aW9uXyA9IGZ1bmN0aW9uIChzY3JvbGxYKSB7XG4gICAgICAgIGlmICh0aGlzLmlzUlRMXygpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRSVExTY3JvbGxlcigpLmluY3JlbWVudFNjcm9sbFJUTChzY3JvbGxYKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY3VycmVudFNjcm9sbFggPSB0aGlzLmdldFNjcm9sbFBvc2l0aW9uKCk7XG4gICAgICAgIHZhciB0YXJnZXRTY3JvbGxYID0gc2Nyb2xsWCArIGN1cnJlbnRTY3JvbGxYO1xuICAgICAgICB2YXIgc2FmZVNjcm9sbFggPSB0aGlzLmNsYW1wU2Nyb2xsVmFsdWVfKHRhcmdldFNjcm9sbFgpO1xuICAgICAgICB2YXIgc2Nyb2xsRGVsdGEgPSBzYWZlU2Nyb2xsWCAtIGN1cnJlbnRTY3JvbGxYO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmluYWxTY3JvbGxQb3NpdGlvbjogc2FmZVNjcm9sbFgsXG4gICAgICAgICAgICBzY3JvbGxEZWx0YTogc2Nyb2xsRGVsdGEsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBbmltYXRlcyB0aGUgdGFiIHNjcm9sbGluZ1xuICAgICAqIEBwYXJhbSBhbmltYXRpb24gVGhlIGFuaW1hdGlvbiB0byBhcHBseVxuICAgICAqL1xuICAgIE1EQ1RhYlNjcm9sbGVyRm91bmRhdGlvbi5wcm90b3R5cGUuYW5pbWF0ZV8gPSBmdW5jdGlvbiAoYW5pbWF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIC8vIEVhcmx5IGV4aXQgaWYgdHJhbnNsYXRlWCBpcyAwLCB3aGljaCBtZWFucyB0aGVyZSdzIG5vIGFuaW1hdGlvbiB0byBwZXJmb3JtXG4gICAgICAgIGlmIChhbmltYXRpb24uc2Nyb2xsRGVsdGEgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0b3BTY3JvbGxBbmltYXRpb25fKCk7XG4gICAgICAgIC8vIFRoaXMgYW5pbWF0aW9uIHVzZXMgdGhlIEZMSVAgYXBwcm9hY2guXG4gICAgICAgIC8vIFJlYWQgbW9yZSBoZXJlOiBodHRwczovL2Flcm90d2lzdC5jb20vYmxvZy9mbGlwLXlvdXItYW5pbWF0aW9ucy9cbiAgICAgICAgdGhpcy5hZGFwdGVyLnNldFNjcm9sbEFyZWFTY3JvbGxMZWZ0KGFuaW1hdGlvbi5maW5hbFNjcm9sbFBvc2l0aW9uKTtcbiAgICAgICAgdGhpcy5hZGFwdGVyLnNldFNjcm9sbENvbnRlbnRTdHlsZVByb3BlcnR5KCd0cmFuc2Zvcm0nLCBcInRyYW5zbGF0ZVgoXCIgKyBhbmltYXRpb24uc2Nyb2xsRGVsdGEgKyBcInB4KVwiKTtcbiAgICAgICAgLy8gRm9yY2UgcmVwYWludFxuICAgICAgICB0aGlzLmFkYXB0ZXIuY29tcHV0ZVNjcm9sbEFyZWFDbGllbnRSZWN0KCk7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5hZGFwdGVyLmFkZENsYXNzKE1EQ1RhYlNjcm9sbGVyRm91bmRhdGlvbi5jc3NDbGFzc2VzLkFOSU1BVElORyk7XG4gICAgICAgICAgICBfdGhpcy5hZGFwdGVyLnNldFNjcm9sbENvbnRlbnRTdHlsZVByb3BlcnR5KCd0cmFuc2Zvcm0nLCAnbm9uZScpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5pc0FuaW1hdGluZ18gPSB0cnVlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU3RvcHMgc2Nyb2xsIGFuaW1hdGlvblxuICAgICAqL1xuICAgIE1EQ1RhYlNjcm9sbGVyRm91bmRhdGlvbi5wcm90b3R5cGUuc3RvcFNjcm9sbEFuaW1hdGlvbl8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaXNBbmltYXRpbmdfID0gZmFsc2U7XG4gICAgICAgIHZhciBjdXJyZW50U2Nyb2xsUG9zaXRpb24gPSB0aGlzLmdldEFuaW1hdGluZ1Njcm9sbFBvc2l0aW9uXygpO1xuICAgICAgICB0aGlzLmFkYXB0ZXIucmVtb3ZlQ2xhc3MoTURDVGFiU2Nyb2xsZXJGb3VuZGF0aW9uLmNzc0NsYXNzZXMuQU5JTUFUSU5HKTtcbiAgICAgICAgdGhpcy5hZGFwdGVyLnNldFNjcm9sbENvbnRlbnRTdHlsZVByb3BlcnR5KCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlWCgwcHgpJyk7XG4gICAgICAgIHRoaXMuYWRhcHRlci5zZXRTY3JvbGxBcmVhU2Nyb2xsTGVmdChjdXJyZW50U2Nyb2xsUG9zaXRpb24pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb24gZHVyaW5nIGFuaW1hdGlvblxuICAgICAqL1xuICAgIE1EQ1RhYlNjcm9sbGVyRm91bmRhdGlvbi5wcm90b3R5cGUuZ2V0QW5pbWF0aW5nU2Nyb2xsUG9zaXRpb25fID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY3VycmVudFRyYW5zbGF0ZVggPSB0aGlzLmNhbGN1bGF0ZUN1cnJlbnRUcmFuc2xhdGVYXygpO1xuICAgICAgICB2YXIgc2Nyb2xsTGVmdCA9IHRoaXMuYWRhcHRlci5nZXRTY3JvbGxBcmVhU2Nyb2xsTGVmdCgpO1xuICAgICAgICBpZiAodGhpcy5pc1JUTF8oKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UlRMU2Nyb2xsZXIoKS5nZXRBbmltYXRpbmdTY3JvbGxQb3NpdGlvbihzY3JvbGxMZWZ0LCBjdXJyZW50VHJhbnNsYXRlWCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNjcm9sbExlZnQgLSBjdXJyZW50VHJhbnNsYXRlWDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgdGhlIFJUTCBTY3JvbGxlciB0byB1c2VcbiAgICAgKi9cbiAgICBNRENUYWJTY3JvbGxlckZvdW5kYXRpb24ucHJvdG90eXBlLnJ0bFNjcm9sbGVyRmFjdG9yeV8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIEJyb3dzZXJzIGhhdmUgdGhyZWUgZGlmZmVyZW50IGltcGxlbWVudGF0aW9ucyBvZiBzY3JvbGxMZWZ0IGluIFJUTCBtb2RlLFxuICAgICAgICAvLyBkZXBlbmRlbnQgb24gdGhlIGJyb3dzZXIuIFRoZSBiZWhhdmlvciBpcyBiYXNlZCBvZmYgdGhlIG1heCBMVFJcbiAgICAgICAgLy8gc2Nyb2xsTGVmdCB2YWx1ZSBhbmQgMC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gKiBEZWZhdWx0IHNjcm9sbGluZyBpbiBSVEwgKlxuICAgICAgICAvLyAgICAtIExlZnQtbW9zdCB2YWx1ZTogMFxuICAgICAgICAvLyAgICAtIFJpZ2h0LW1vc3QgdmFsdWU6IE1heCBMVFIgc2Nyb2xsTGVmdCB2YWx1ZVxuICAgICAgICAvL1xuICAgICAgICAvLyAqIE5lZ2F0aXZlIHNjcm9sbGluZyBpbiBSVEwgKlxuICAgICAgICAvLyAgICAtIExlZnQtbW9zdCB2YWx1ZTogTmVnYXRlZCBtYXggTFRSIHNjcm9sbExlZnQgdmFsdWVcbiAgICAgICAgLy8gICAgLSBSaWdodC1tb3N0IHZhbHVlOiAwXG4gICAgICAgIC8vXG4gICAgICAgIC8vICogUmV2ZXJzZSBzY3JvbGxpbmcgaW4gUlRMICpcbiAgICAgICAgLy8gICAgLSBMZWZ0LW1vc3QgdmFsdWU6IE1heCBMVFIgc2Nyb2xsTGVmdCB2YWx1ZVxuICAgICAgICAvLyAgICAtIFJpZ2h0LW1vc3QgdmFsdWU6IDBcbiAgICAgICAgLy9cbiAgICAgICAgLy8gV2UgdXNlIHRob3NlIHByaW5jaXBsZXMgYmVsb3cgdG8gZGV0ZXJtaW5lIHdoaWNoIFJUTCBzY3JvbGxMZWZ0XG4gICAgICAgIC8vIGJlaGF2aW9yIGlzIGltcGxlbWVudGVkIGluIHRoZSBjdXJyZW50IGJyb3dzZXIuXG4gICAgICAgIHZhciBpbml0aWFsU2Nyb2xsTGVmdCA9IHRoaXMuYWRhcHRlci5nZXRTY3JvbGxBcmVhU2Nyb2xsTGVmdCgpO1xuICAgICAgICB0aGlzLmFkYXB0ZXIuc2V0U2Nyb2xsQXJlYVNjcm9sbExlZnQoaW5pdGlhbFNjcm9sbExlZnQgLSAxKTtcbiAgICAgICAgdmFyIG5ld1Njcm9sbExlZnQgPSB0aGlzLmFkYXB0ZXIuZ2V0U2Nyb2xsQXJlYVNjcm9sbExlZnQoKTtcbiAgICAgICAgLy8gSWYgdGhlIG5ld1Njcm9sbExlZnQgdmFsdWUgaXMgbmVnYXRpdmUsdGhlbiB3ZSBrbm93IHRoYXQgdGhlIGJyb3dzZXIgaGFzXG4gICAgICAgIC8vIGltcGxlbWVudGVkIG5lZ2F0aXZlIFJUTCBzY3JvbGxpbmcsIHNpbmNlIGFsbCBvdGhlciBpbXBsZW1lbnRhdGlvbnMgaGF2ZVxuICAgICAgICAvLyBvbmx5IHBvc2l0aXZlIHZhbHVlcy5cbiAgICAgICAgaWYgKG5ld1Njcm9sbExlZnQgPCAwKSB7XG4gICAgICAgICAgICAvLyBVbmRvIHRoZSBzY3JvbGxMZWZ0IHRlc3QgY2hlY2tcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5zZXRTY3JvbGxBcmVhU2Nyb2xsTGVmdChpbml0aWFsU2Nyb2xsTGVmdCk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IE1EQ1RhYlNjcm9sbGVyUlRMTmVnYXRpdmUodGhpcy5hZGFwdGVyKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcm9vdENsaWVudFJlY3QgPSB0aGlzLmFkYXB0ZXIuY29tcHV0ZVNjcm9sbEFyZWFDbGllbnRSZWN0KCk7XG4gICAgICAgIHZhciBjb250ZW50Q2xpZW50UmVjdCA9IHRoaXMuYWRhcHRlci5jb21wdXRlU2Nyb2xsQ29udGVudENsaWVudFJlY3QoKTtcbiAgICAgICAgdmFyIHJpZ2h0RWRnZURlbHRhID0gTWF0aC5yb3VuZChjb250ZW50Q2xpZW50UmVjdC5yaWdodCAtIHJvb3RDbGllbnRSZWN0LnJpZ2h0KTtcbiAgICAgICAgLy8gVW5kbyB0aGUgc2Nyb2xsTGVmdCB0ZXN0IGNoZWNrXG4gICAgICAgIHRoaXMuYWRhcHRlci5zZXRTY3JvbGxBcmVhU2Nyb2xsTGVmdChpbml0aWFsU2Nyb2xsTGVmdCk7XG4gICAgICAgIC8vIEJ5IGNhbGN1bGF0aW5nIHRoZSBjbGllbnRSZWN0IG9mIHRoZSByb290IGVsZW1lbnQgYW5kIHRoZSBjbGllbnRSZWN0IG9mXG4gICAgICAgIC8vIHRoZSBjb250ZW50IGVsZW1lbnQsIHdlIGNhbiBkZXRlcm1pbmUgaG93IG11Y2ggdGhlIHNjcm9sbCB2YWx1ZSBjaGFuZ2VkXG4gICAgICAgIC8vIHdoZW4gd2UgcGVyZm9ybWVkIHRoZSBzY3JvbGxMZWZ0IHN1YnRyYWN0aW9uIGFib3ZlLlxuICAgICAgICBpZiAocmlnaHRFZGdlRGVsdGEgPT09IG5ld1Njcm9sbExlZnQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTURDVGFiU2Nyb2xsZXJSVExSZXZlcnNlKHRoaXMuYWRhcHRlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBNRENUYWJTY3JvbGxlclJUTERlZmF1bHQodGhpcy5hZGFwdGVyKTtcbiAgICB9O1xuICAgIE1EQ1RhYlNjcm9sbGVyRm91bmRhdGlvbi5wcm90b3R5cGUuaXNSVExfID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmdldFNjcm9sbENvbnRlbnRTdHlsZVZhbHVlKCdkaXJlY3Rpb24nKSA9PT0gJ3J0bCc7XG4gICAgfTtcbiAgICByZXR1cm4gTURDVGFiU2Nyb2xsZXJGb3VuZGF0aW9uO1xufShNRENGb3VuZGF0aW9uKSk7XG5leHBvcnQgeyBNRENUYWJTY3JvbGxlckZvdW5kYXRpb24gfTtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1kZWZhdWx0LWV4cG9ydCBOZWVkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBNREMgV2ViIHYwLjQ0LjAgYW5kIGVhcmxpZXIuXG5leHBvcnQgZGVmYXVsdCBNRENUYWJTY3JvbGxlckZvdW5kYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3VuZGF0aW9uLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBNRENDb21wb25lbnQgfSBmcm9tICdAbWF0ZXJpYWwvYmFzZS9jb21wb25lbnQnO1xuaW1wb3J0IHsgYXBwbHlQYXNzaXZlIH0gZnJvbSAnQG1hdGVyaWFsL2RvbS9ldmVudHMnO1xuaW1wb3J0IHsgbWF0Y2hlcyB9IGZyb20gJ0BtYXRlcmlhbC9kb20vcG9ueWZpbGwnO1xuaW1wb3J0IHsgTURDVGFiU2Nyb2xsZXJGb3VuZGF0aW9uIH0gZnJvbSAnLi9mb3VuZGF0aW9uJztcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAnLi91dGlsJztcbnZhciBNRENUYWJTY3JvbGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTURDVGFiU2Nyb2xsZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTURDVGFiU2Nyb2xsZXIoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgTURDVGFiU2Nyb2xsZXIuYXR0YWNoVG8gPSBmdW5jdGlvbiAocm9vdCkge1xuICAgICAgICByZXR1cm4gbmV3IE1EQ1RhYlNjcm9sbGVyKHJvb3QpO1xuICAgIH07XG4gICAgTURDVGFiU2Nyb2xsZXIucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYXJlYV8gPSB0aGlzLnJvb3QucXVlcnlTZWxlY3RvcihNRENUYWJTY3JvbGxlckZvdW5kYXRpb24uc3RyaW5ncy5BUkVBX1NFTEVDVE9SKTtcbiAgICAgICAgdGhpcy5jb250ZW50XyA9IHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKE1EQ1RhYlNjcm9sbGVyRm91bmRhdGlvbi5zdHJpbmdzLkNPTlRFTlRfU0VMRUNUT1IpO1xuICAgIH07XG4gICAgTURDVGFiU2Nyb2xsZXIucHJvdG90eXBlLmluaXRpYWxTeW5jV2l0aERPTSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5oYW5kbGVJbnRlcmFjdGlvbl8gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5mb3VuZGF0aW9uLmhhbmRsZUludGVyYWN0aW9uKCk7IH07XG4gICAgICAgIHRoaXMuaGFuZGxlVHJhbnNpdGlvbkVuZF8gPSBmdW5jdGlvbiAoZXZ0KSB7IHJldHVybiBfdGhpcy5mb3VuZGF0aW9uLmhhbmRsZVRyYW5zaXRpb25FbmQoZXZ0KTsgfTtcbiAgICAgICAgdGhpcy5hcmVhXy5hZGRFdmVudExpc3RlbmVyKCd3aGVlbCcsIHRoaXMuaGFuZGxlSW50ZXJhY3Rpb25fLCBhcHBseVBhc3NpdmUoKSk7XG4gICAgICAgIHRoaXMuYXJlYV8uYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMuaGFuZGxlSW50ZXJhY3Rpb25fLCBhcHBseVBhc3NpdmUoKSk7XG4gICAgICAgIHRoaXMuYXJlYV8uYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCB0aGlzLmhhbmRsZUludGVyYWN0aW9uXywgYXBwbHlQYXNzaXZlKCkpO1xuICAgICAgICB0aGlzLmFyZWFfLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuaGFuZGxlSW50ZXJhY3Rpb25fLCBhcHBseVBhc3NpdmUoKSk7XG4gICAgICAgIHRoaXMuYXJlYV8uYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlSW50ZXJhY3Rpb25fLCBhcHBseVBhc3NpdmUoKSk7XG4gICAgICAgIHRoaXMuY29udGVudF8uYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHRoaXMuaGFuZGxlVHJhbnNpdGlvbkVuZF8pO1xuICAgIH07XG4gICAgTURDVGFiU2Nyb2xsZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLmFyZWFfLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3doZWVsJywgdGhpcy5oYW5kbGVJbnRlcmFjdGlvbl8sIGFwcGx5UGFzc2l2ZSgpKTtcbiAgICAgICAgdGhpcy5hcmVhXy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5oYW5kbGVJbnRlcmFjdGlvbl8sIGFwcGx5UGFzc2l2ZSgpKTtcbiAgICAgICAgdGhpcy5hcmVhXy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIHRoaXMuaGFuZGxlSW50ZXJhY3Rpb25fLCBhcHBseVBhc3NpdmUoKSk7XG4gICAgICAgIHRoaXMuYXJlYV8ucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5oYW5kbGVJbnRlcmFjdGlvbl8sIGFwcGx5UGFzc2l2ZSgpKTtcbiAgICAgICAgdGhpcy5hcmVhXy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5oYW5kbGVJbnRlcmFjdGlvbl8sIGFwcGx5UGFzc2l2ZSgpKTtcbiAgICAgICAgdGhpcy5jb250ZW50Xy5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgdGhpcy5oYW5kbGVUcmFuc2l0aW9uRW5kXyk7XG4gICAgfTtcbiAgICBNRENUYWJTY3JvbGxlci5wcm90b3R5cGUuZ2V0RGVmYXVsdEZvdW5kYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIC8vIERPIE5PVCBJTkxJTkUgdGhpcyB2YXJpYWJsZS4gRm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIGZvdW5kYXRpb25zIHRha2UgYSBQYXJ0aWFsPE1EQ0Zvb0FkYXB0ZXI+LlxuICAgICAgICAvLyBUbyBlbnN1cmUgd2UgZG9uJ3QgYWNjaWRlbnRhbGx5IG9taXQgYW55IG1ldGhvZHMsIHdlIG5lZWQgYSBzZXBhcmF0ZSwgc3Ryb25nbHkgdHlwZWQgYWRhcHRlciB2YXJpYWJsZS5cbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzIE1ldGhvZHMgc2hvdWxkIGJlIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSBhZGFwdGVyIGludGVyZmFjZS5cbiAgICAgICAgdmFyIGFkYXB0ZXIgPSB7XG4gICAgICAgICAgICBldmVudFRhcmdldE1hdGNoZXNTZWxlY3RvcjogZnVuY3Rpb24gKGV2dFRhcmdldCwgc2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hlcyhldnRUYXJnZXQsIHNlbGVjdG9yKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhZGRDbGFzczogZnVuY3Rpb24gKGNsYXNzTmFtZSkgeyByZXR1cm4gX3RoaXMucm9vdC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7IH0sXG4gICAgICAgICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24gKGNsYXNzTmFtZSkgeyByZXR1cm4gX3RoaXMucm9vdC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7IH0sXG4gICAgICAgICAgICBhZGRTY3JvbGxBcmVhQ2xhc3M6IGZ1bmN0aW9uIChjbGFzc05hbWUpIHsgcmV0dXJuIF90aGlzLmFyZWFfLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTsgfSxcbiAgICAgICAgICAgIHNldFNjcm9sbEFyZWFTdHlsZVByb3BlcnR5OiBmdW5jdGlvbiAocHJvcCwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuYXJlYV8uc3R5bGUuc2V0UHJvcGVydHkocHJvcCwgdmFsdWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldFNjcm9sbENvbnRlbnRTdHlsZVByb3BlcnR5OiBmdW5jdGlvbiAocHJvcCwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY29udGVudF8uc3R5bGUuc2V0UHJvcGVydHkocHJvcCwgdmFsdWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldFNjcm9sbENvbnRlbnRTdHlsZVZhbHVlOiBmdW5jdGlvbiAocHJvcE5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUoX3RoaXMuY29udGVudF8pLmdldFByb3BlcnR5VmFsdWUocHJvcE5hbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldFNjcm9sbEFyZWFTY3JvbGxMZWZ0OiBmdW5jdGlvbiAoc2Nyb2xsWCkgeyByZXR1cm4gX3RoaXMuYXJlYV8uc2Nyb2xsTGVmdCA9IHNjcm9sbFg7IH0sXG4gICAgICAgICAgICBnZXRTY3JvbGxBcmVhU2Nyb2xsTGVmdDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuYXJlYV8uc2Nyb2xsTGVmdDsgfSxcbiAgICAgICAgICAgIGdldFNjcm9sbENvbnRlbnRPZmZzZXRXaWR0aDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuY29udGVudF8ub2Zmc2V0V2lkdGg7IH0sXG4gICAgICAgICAgICBnZXRTY3JvbGxBcmVhT2Zmc2V0V2lkdGg6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmFyZWFfLm9mZnNldFdpZHRoOyB9LFxuICAgICAgICAgICAgY29tcHV0ZVNjcm9sbEFyZWFDbGllbnRSZWN0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5hcmVhXy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsgfSxcbiAgICAgICAgICAgIGNvbXB1dGVTY3JvbGxDb250ZW50Q2xpZW50UmVjdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jb250ZW50Xy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb21wdXRlSG9yaXpvbnRhbFNjcm9sbGJhckhlaWdodDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB1dGlsLmNvbXB1dGVIb3Jpem9udGFsU2Nyb2xsYmFySGVpZ2h0KGRvY3VtZW50KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIC8vIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzXG4gICAgICAgIHJldHVybiBuZXcgTURDVGFiU2Nyb2xsZXJGb3VuZGF0aW9uKGFkYXB0ZXIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCB2aXN1YWwgc2Nyb2xsIHBvc2l0aW9uXG4gICAgICovXG4gICAgTURDVGFiU2Nyb2xsZXIucHJvdG90eXBlLmdldFNjcm9sbFBvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mb3VuZGF0aW9uLmdldFNjcm9sbFBvc2l0aW9uKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB3aWR0aCBvZiB0aGUgc2Nyb2xsIGNvbnRlbnRcbiAgICAgKi9cbiAgICBNRENUYWJTY3JvbGxlci5wcm90b3R5cGUuZ2V0U2Nyb2xsQ29udGVudFdpZHRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50Xy5vZmZzZXRXaWR0aDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEluY3JlbWVudHMgdGhlIHNjcm9sbCB2YWx1ZSBieSB0aGUgZ2l2ZW4gYW1vdW50XG4gICAgICogQHBhcmFtIHNjcm9sbFhJbmNyZW1lbnQgVGhlIHBpeGVsIHZhbHVlIGJ5IHdoaWNoIHRvIGluY3JlbWVudCB0aGUgc2Nyb2xsIHZhbHVlXG4gICAgICovXG4gICAgTURDVGFiU2Nyb2xsZXIucHJvdG90eXBlLmluY3JlbWVudFNjcm9sbCA9IGZ1bmN0aW9uIChzY3JvbGxYSW5jcmVtZW50KSB7XG4gICAgICAgIHRoaXMuZm91bmRhdGlvbi5pbmNyZW1lbnRTY3JvbGwoc2Nyb2xsWEluY3JlbWVudCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTY3JvbGxzIHRvIHRoZSBnaXZlbiBwaXhlbCBwb3NpdGlvblxuICAgICAqIEBwYXJhbSBzY3JvbGxYIFRoZSBwaXhlbCB2YWx1ZSB0byBzY3JvbGwgdG9cbiAgICAgKi9cbiAgICBNRENUYWJTY3JvbGxlci5wcm90b3R5cGUuc2Nyb2xsVG8gPSBmdW5jdGlvbiAoc2Nyb2xsWCkge1xuICAgICAgICB0aGlzLmZvdW5kYXRpb24uc2Nyb2xsVG8oc2Nyb2xsWCk7XG4gICAgfTtcbiAgICByZXR1cm4gTURDVGFiU2Nyb2xsZXI7XG59KE1EQ0NvbXBvbmVudCkpO1xuZXhwb3J0IHsgTURDVGFiU2Nyb2xsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBvbmVudC5qcy5tYXAiLCIvKipcbiAqIFN0b3JlcyByZXN1bHQgZnJvbSBzdXBwb3J0c0Nzc1ZhcmlhYmxlcyB0byBhdm9pZCByZWR1bmRhbnQgcHJvY2Vzc2luZyB0b1xuICogZGV0ZWN0IENTUyBjdXN0b20gdmFyaWFibGUgc3VwcG9ydC5cbiAqL1xudmFyIHN1cHBvcnRzQ3NzVmFyaWFibGVzXztcbmV4cG9ydCBmdW5jdGlvbiBzdXBwb3J0c0Nzc1ZhcmlhYmxlcyh3aW5kb3dPYmosIGZvcmNlUmVmcmVzaCkge1xuICAgIGlmIChmb3JjZVJlZnJlc2ggPT09IHZvaWQgMCkgeyBmb3JjZVJlZnJlc2ggPSBmYWxzZTsgfVxuICAgIHZhciBDU1MgPSB3aW5kb3dPYmouQ1NTO1xuICAgIHZhciBzdXBwb3J0c0Nzc1ZhcnMgPSBzdXBwb3J0c0Nzc1ZhcmlhYmxlc187XG4gICAgaWYgKHR5cGVvZiBzdXBwb3J0c0Nzc1ZhcmlhYmxlc18gPT09ICdib29sZWFuJyAmJiAhZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgIHJldHVybiBzdXBwb3J0c0Nzc1ZhcmlhYmxlc187XG4gICAgfVxuICAgIHZhciBzdXBwb3J0c0Z1bmN0aW9uUHJlc2VudCA9IENTUyAmJiB0eXBlb2YgQ1NTLnN1cHBvcnRzID09PSAnZnVuY3Rpb24nO1xuICAgIGlmICghc3VwcG9ydHNGdW5jdGlvblByZXNlbnQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgZXhwbGljaXRseVN1cHBvcnRzQ3NzVmFycyA9IENTUy5zdXBwb3J0cygnLS1jc3MtdmFycycsICd5ZXMnKTtcbiAgICAvLyBTZWU6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTQ2NjlcbiAgICAvLyBTZWU6IFJFQURNRSBzZWN0aW9uIG9uIFNhZmFyaVxuICAgIHZhciB3ZUFyZUZlYXR1cmVEZXRlY3RpbmdTYWZhcmkxMHBsdXMgPSAoQ1NTLnN1cHBvcnRzKCcoLS1jc3MtdmFyczogeWVzKScpICYmXG4gICAgICAgIENTUy5zdXBwb3J0cygnY29sb3InLCAnIzAwMDAwMDAwJykpO1xuICAgIHN1cHBvcnRzQ3NzVmFycyA9XG4gICAgICAgIGV4cGxpY2l0bHlTdXBwb3J0c0Nzc1ZhcnMgfHwgd2VBcmVGZWF0dXJlRGV0ZWN0aW5nU2FmYXJpMTBwbHVzO1xuICAgIGlmICghZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgIHN1cHBvcnRzQ3NzVmFyaWFibGVzXyA9IHN1cHBvcnRzQ3NzVmFycztcbiAgICB9XG4gICAgcmV0dXJuIHN1cHBvcnRzQ3NzVmFycztcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXROb3JtYWxpemVkRXZlbnRDb29yZHMoZXZ0LCBwYWdlT2Zmc2V0LCBjbGllbnRSZWN0KSB7XG4gICAgaWYgKCFldnQpIHtcbiAgICAgICAgcmV0dXJuIHsgeDogMCwgeTogMCB9O1xuICAgIH1cbiAgICB2YXIgeCA9IHBhZ2VPZmZzZXQueCwgeSA9IHBhZ2VPZmZzZXQueTtcbiAgICB2YXIgZG9jdW1lbnRYID0geCArIGNsaWVudFJlY3QubGVmdDtcbiAgICB2YXIgZG9jdW1lbnRZID0geSArIGNsaWVudFJlY3QudG9wO1xuICAgIHZhciBub3JtYWxpemVkWDtcbiAgICB2YXIgbm9ybWFsaXplZFk7XG4gICAgLy8gRGV0ZXJtaW5lIHRvdWNoIHBvaW50IHJlbGF0aXZlIHRvIHRoZSByaXBwbGUgY29udGFpbmVyLlxuICAgIGlmIChldnQudHlwZSA9PT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICAgIHZhciB0b3VjaEV2ZW50ID0gZXZ0O1xuICAgICAgICBub3JtYWxpemVkWCA9IHRvdWNoRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVggLSBkb2N1bWVudFg7XG4gICAgICAgIG5vcm1hbGl6ZWRZID0gdG91Y2hFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWSAtIGRvY3VtZW50WTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBtb3VzZUV2ZW50ID0gZXZ0O1xuICAgICAgICBub3JtYWxpemVkWCA9IG1vdXNlRXZlbnQucGFnZVggLSBkb2N1bWVudFg7XG4gICAgICAgIG5vcm1hbGl6ZWRZID0gbW91c2VFdmVudC5wYWdlWSAtIGRvY3VtZW50WTtcbiAgICB9XG4gICAgcmV0dXJuIHsgeDogbm9ybWFsaXplZFgsIHk6IG5vcm1hbGl6ZWRZIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuZXhwb3J0IHZhciBjc3NDbGFzc2VzID0ge1xuICAgIC8vIFJpcHBsZSBpcyBhIHNwZWNpYWwgY2FzZSB3aGVyZSB0aGUgXCJyb290XCIgY29tcG9uZW50IGlzIHJlYWxseSBhIFwibWl4aW5cIiBvZiBzb3J0cyxcbiAgICAvLyBnaXZlbiB0aGF0IGl0J3MgYW4gJ3VwZ3JhZGUnIHRvIGFuIGV4aXN0aW5nIGNvbXBvbmVudC4gVGhhdCBiZWluZyBzYWlkIGl0IGlzIHRoZSByb290XG4gICAgLy8gQ1NTIGNsYXNzIHRoYXQgYWxsIG90aGVyIENTUyBjbGFzc2VzIGRlcml2ZSBmcm9tLlxuICAgIEJHX0ZPQ1VTRUQ6ICdtZGMtcmlwcGxlLXVwZ3JhZGVkLS1iYWNrZ3JvdW5kLWZvY3VzZWQnLFxuICAgIEZHX0FDVElWQVRJT046ICdtZGMtcmlwcGxlLXVwZ3JhZGVkLS1mb3JlZ3JvdW5kLWFjdGl2YXRpb24nLFxuICAgIEZHX0RFQUNUSVZBVElPTjogJ21kYy1yaXBwbGUtdXBncmFkZWQtLWZvcmVncm91bmQtZGVhY3RpdmF0aW9uJyxcbiAgICBST09UOiAnbWRjLXJpcHBsZS11cGdyYWRlZCcsXG4gICAgVU5CT1VOREVEOiAnbWRjLXJpcHBsZS11cGdyYWRlZC0tdW5ib3VuZGVkJyxcbn07XG5leHBvcnQgdmFyIHN0cmluZ3MgPSB7XG4gICAgVkFSX0ZHX1NDQUxFOiAnLS1tZGMtcmlwcGxlLWZnLXNjYWxlJyxcbiAgICBWQVJfRkdfU0laRTogJy0tbWRjLXJpcHBsZS1mZy1zaXplJyxcbiAgICBWQVJfRkdfVFJBTlNMQVRFX0VORDogJy0tbWRjLXJpcHBsZS1mZy10cmFuc2xhdGUtZW5kJyxcbiAgICBWQVJfRkdfVFJBTlNMQVRFX1NUQVJUOiAnLS1tZGMtcmlwcGxlLWZnLXRyYW5zbGF0ZS1zdGFydCcsXG4gICAgVkFSX0xFRlQ6ICctLW1kYy1yaXBwbGUtbGVmdCcsXG4gICAgVkFSX1RPUDogJy0tbWRjLXJpcHBsZS10b3AnLFxufTtcbmV4cG9ydCB2YXIgbnVtYmVycyA9IHtcbiAgICBERUFDVElWQVRJT05fVElNRU9VVF9NUzogMjI1LFxuICAgIEZHX0RFQUNUSVZBVElPTl9NUzogMTUwLFxuICAgIElOSVRJQUxfT1JJR0lOX1NDQUxFOiAwLjYsXG4gICAgUEFERElORzogMTAsXG4gICAgVEFQX0RFTEFZX01TOiAzMDAsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuaW1wb3J0IHsgX19hc3NpZ24sIF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgTURDRm91bmRhdGlvbiB9IGZyb20gJ0BtYXRlcmlhbC9iYXNlL2ZvdW5kYXRpb24nO1xuaW1wb3J0IHsgY3NzQ2xhc3NlcywgbnVtYmVycywgc3RyaW5ncyB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IGdldE5vcm1hbGl6ZWRFdmVudENvb3JkcyB9IGZyb20gJy4vdXRpbCc7XG4vLyBBY3RpdmF0aW9uIGV2ZW50cyByZWdpc3RlcmVkIG9uIHRoZSByb290IGVsZW1lbnQgb2YgZWFjaCBpbnN0YW5jZSBmb3IgYWN0aXZhdGlvblxudmFyIEFDVElWQVRJT05fRVZFTlRfVFlQRVMgPSBbXG4gICAgJ3RvdWNoc3RhcnQnLCAncG9pbnRlcmRvd24nLCAnbW91c2Vkb3duJywgJ2tleWRvd24nLFxuXTtcbi8vIERlYWN0aXZhdGlvbiBldmVudHMgcmVnaXN0ZXJlZCBvbiBkb2N1bWVudEVsZW1lbnQgd2hlbiBhIHBvaW50ZXItcmVsYXRlZCBkb3duIGV2ZW50IG9jY3Vyc1xudmFyIFBPSU5URVJfREVBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTID0gW1xuICAgICd0b3VjaGVuZCcsICdwb2ludGVydXAnLCAnbW91c2V1cCcsICdjb250ZXh0bWVudScsXG5dO1xuLy8gc2ltdWx0YW5lb3VzIG5lc3RlZCBhY3RpdmF0aW9uc1xudmFyIGFjdGl2YXRlZFRhcmdldHMgPSBbXTtcbnZhciBNRENSaXBwbGVGb3VuZGF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNRENSaXBwbGVGb3VuZGF0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1EQ1JpcHBsZUZvdW5kYXRpb24oYWRhcHRlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgTURDUmlwcGxlRm91bmRhdGlvbi5kZWZhdWx0QWRhcHRlciksIGFkYXB0ZXIpKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5hY3RpdmF0aW9uQW5pbWF0aW9uSGFzRW5kZWRfID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmFjdGl2YXRpb25UaW1lcl8gPSAwO1xuICAgICAgICBfdGhpcy5mZ0RlYWN0aXZhdGlvblJlbW92YWxUaW1lcl8gPSAwO1xuICAgICAgICBfdGhpcy5mZ1NjYWxlXyA9ICcwJztcbiAgICAgICAgX3RoaXMuZnJhbWVfID0geyB3aWR0aDogMCwgaGVpZ2h0OiAwIH07XG4gICAgICAgIF90aGlzLmluaXRpYWxTaXplXyA9IDA7XG4gICAgICAgIF90aGlzLmxheW91dEZyYW1lXyA9IDA7XG4gICAgICAgIF90aGlzLm1heFJhZGl1c18gPSAwO1xuICAgICAgICBfdGhpcy51bmJvdW5kZWRDb29yZHNfID0geyBsZWZ0OiAwLCB0b3A6IDAgfTtcbiAgICAgICAgX3RoaXMuYWN0aXZhdGlvblN0YXRlXyA9IF90aGlzLmRlZmF1bHRBY3RpdmF0aW9uU3RhdGVfKCk7XG4gICAgICAgIF90aGlzLmFjdGl2YXRpb25UaW1lckNhbGxiYWNrXyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmFjdGl2YXRpb25BbmltYXRpb25IYXNFbmRlZF8gPSB0cnVlO1xuICAgICAgICAgICAgX3RoaXMucnVuRGVhY3RpdmF0aW9uVVhMb2dpY0lmUmVhZHlfKCk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmFjdGl2YXRlSGFuZGxlcl8gPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gX3RoaXMuYWN0aXZhdGVfKGUpOyB9O1xuICAgICAgICBfdGhpcy5kZWFjdGl2YXRlSGFuZGxlcl8gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5kZWFjdGl2YXRlXygpOyB9O1xuICAgICAgICBfdGhpcy5mb2N1c0hhbmRsZXJfID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuaGFuZGxlRm9jdXMoKTsgfTtcbiAgICAgICAgX3RoaXMuYmx1ckhhbmRsZXJfID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuaGFuZGxlQmx1cigpOyB9O1xuICAgICAgICBfdGhpcy5yZXNpemVIYW5kbGVyXyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmxheW91dCgpOyB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENSaXBwbGVGb3VuZGF0aW9uLCBcImNzc0NsYXNzZXNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBjc3NDbGFzc2VzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDUmlwcGxlRm91bmRhdGlvbiwgXCJzdHJpbmdzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5ncztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1JpcHBsZUZvdW5kYXRpb24sIFwibnVtYmVyc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlcnM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENSaXBwbGVGb3VuZGF0aW9uLCBcImRlZmF1bHRBZGFwdGVyXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgYnJvd3NlclN1cHBvcnRzQ3NzVmFyczogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgICAgICAgICAgICAgICBjb21wdXRlQm91bmRpbmdSZWN0OiBmdW5jdGlvbiAoKSB7IHJldHVybiAoeyB0b3A6IDAsIHJpZ2h0OiAwLCBib3R0b206IDAsIGxlZnQ6IDAsIHdpZHRoOiAwLCBoZWlnaHQ6IDAgfSk7IH0sXG4gICAgICAgICAgICAgICAgY29udGFpbnNFdmVudFRhcmdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgICAgICAgICAgICAgICBkZXJlZ2lzdGVyRG9jdW1lbnRJbnRlcmFjdGlvbkhhbmRsZXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBkZXJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgZGVyZWdpc3RlclJlc2l6ZUhhbmRsZXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBnZXRXaW5kb3dQYWdlT2Zmc2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiAoeyB4OiAwLCB5OiAwIH0pOyB9LFxuICAgICAgICAgICAgICAgIGlzU3VyZmFjZUFjdGl2ZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgICAgICAgICAgICAgICBpc1N1cmZhY2VEaXNhYmxlZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgICAgICAgICAgICAgICBpc1VuYm91bmRlZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgICAgICAgICAgICAgICByZWdpc3RlckRvY3VtZW50SW50ZXJhY3Rpb25IYW5kbGVyOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgcmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICByZWdpc3RlclJlc2l6ZUhhbmRsZXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZUNzc1ZhcmlhYmxlOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBNRENSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgc3VwcG9ydHNQcmVzc1JpcHBsZSA9IHRoaXMuc3VwcG9ydHNQcmVzc1JpcHBsZV8oKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlclJvb3RIYW5kbGVyc18oc3VwcG9ydHNQcmVzc1JpcHBsZSk7XG4gICAgICAgIGlmIChzdXBwb3J0c1ByZXNzUmlwcGxlKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBNRENSaXBwbGVGb3VuZGF0aW9uLmNzc0NsYXNzZXMsIFJPT1RfMSA9IF9hLlJPT1QsIFVOQk9VTkRFRF8xID0gX2EuVU5CT1VOREVEO1xuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5hZGFwdGVyLmFkZENsYXNzKFJPT1RfMSk7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmFkYXB0ZXIuaXNVbmJvdW5kZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5hZGFwdGVyLmFkZENsYXNzKFVOQk9VTkRFRF8xKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gVW5ib3VuZGVkIHJpcHBsZXMgbmVlZCBsYXlvdXQgbG9naWMgYXBwbGllZCBpbW1lZGlhdGVseSB0byBzZXQgY29vcmRpbmF0ZXMgZm9yIGJvdGggc2hhZGUgYW5kIHJpcHBsZVxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5sYXlvdXRJbnRlcm5hbF8oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTURDUmlwcGxlRm91bmRhdGlvbi5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuc3VwcG9ydHNQcmVzc1JpcHBsZV8oKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYWN0aXZhdGlvblRpbWVyXykge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmFjdGl2YXRpb25UaW1lcl8pO1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZhdGlvblRpbWVyXyA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKE1EQ1JpcHBsZUZvdW5kYXRpb24uY3NzQ2xhc3Nlcy5GR19BQ1RJVkFUSU9OKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmZnRGVhY3RpdmF0aW9uUmVtb3ZhbFRpbWVyXykge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmZnRGVhY3RpdmF0aW9uUmVtb3ZhbFRpbWVyXyk7XG4gICAgICAgICAgICAgICAgdGhpcy5mZ0RlYWN0aXZhdGlvblJlbW92YWxUaW1lcl8gPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuYWRhcHRlci5yZW1vdmVDbGFzcyhNRENSaXBwbGVGb3VuZGF0aW9uLmNzc0NsYXNzZXMuRkdfREVBQ1RJVkFUSU9OKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBfYSA9IE1EQ1JpcHBsZUZvdW5kYXRpb24uY3NzQ2xhc3NlcywgUk9PVF8yID0gX2EuUk9PVCwgVU5CT1VOREVEXzIgPSBfYS5VTkJPVU5ERUQ7XG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmFkYXB0ZXIucmVtb3ZlQ2xhc3MoUk9PVF8yKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKFVOQk9VTkRFRF8yKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5yZW1vdmVDc3NWYXJzXygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXJlZ2lzdGVyUm9vdEhhbmRsZXJzXygpO1xuICAgICAgICB0aGlzLmRlcmVnaXN0ZXJEZWFjdGl2YXRpb25IYW5kbGVyc18oKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBldnQgT3B0aW9uYWwgZXZlbnQgY29udGFpbmluZyBwb3NpdGlvbiBpbmZvcm1hdGlvbi5cbiAgICAgKi9cbiAgICBNRENSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS5hY3RpdmF0ZSA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgdGhpcy5hY3RpdmF0ZV8oZXZ0KTtcbiAgICB9O1xuICAgIE1EQ1JpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLmRlYWN0aXZhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZGVhY3RpdmF0ZV8oKTtcbiAgICB9O1xuICAgIE1EQ1JpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLmxheW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMubGF5b3V0RnJhbWVfKSB7XG4gICAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLmxheW91dEZyYW1lXyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sYXlvdXRGcmFtZV8gPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMubGF5b3V0SW50ZXJuYWxfKCk7XG4gICAgICAgICAgICBfdGhpcy5sYXlvdXRGcmFtZV8gPSAwO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE1EQ1JpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLnNldFVuYm91bmRlZCA9IGZ1bmN0aW9uICh1bmJvdW5kZWQpIHtcbiAgICAgICAgdmFyIFVOQk9VTkRFRCA9IE1EQ1JpcHBsZUZvdW5kYXRpb24uY3NzQ2xhc3Nlcy5VTkJPVU5ERUQ7XG4gICAgICAgIGlmICh1bmJvdW5kZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5hZGRDbGFzcyhVTkJPVU5ERUQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKFVOQk9VTkRFRCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1EQ1JpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLmhhbmRsZUZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuYWRhcHRlci5hZGRDbGFzcyhNRENSaXBwbGVGb3VuZGF0aW9uLmNzc0NsYXNzZXMuQkdfRk9DVVNFRCk7IH0pO1xuICAgIH07XG4gICAgTURDUmlwcGxlRm91bmRhdGlvbi5wcm90b3R5cGUuaGFuZGxlQmx1ciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmFkYXB0ZXIucmVtb3ZlQ2xhc3MoTURDUmlwcGxlRm91bmRhdGlvbi5jc3NDbGFzc2VzLkJHX0ZPQ1VTRUQpOyB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFdlIGNvbXB1dGUgdGhpcyBwcm9wZXJ0eSBzbyB0aGF0IHdlIGFyZSBub3QgcXVlcnlpbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNsaWVudFxuICAgICAqIHVudGlsIHRoZSBwb2ludCBpbiB0aW1lIHdoZXJlIHRoZSBmb3VuZGF0aW9uIHJlcXVlc3RzIGl0LiBUaGlzIHByZXZlbnRzIHNjZW5hcmlvcyB3aGVyZVxuICAgICAqIGNsaWVudC1zaWRlIGZlYXR1cmUtZGV0ZWN0aW9uIG1heSBoYXBwZW4gdG9vIGVhcmx5LCBzdWNoIGFzIHdoZW4gY29tcG9uZW50cyBhcmUgcmVuZGVyZWQgb24gdGhlIHNlcnZlclxuICAgICAqIGFuZCB0aGVuIGluaXRpYWxpemVkIGF0IG1vdW50IHRpbWUgb24gdGhlIGNsaWVudC5cbiAgICAgKi9cbiAgICBNRENSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS5zdXBwb3J0c1ByZXNzUmlwcGxlXyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRhcHRlci5icm93c2VyU3VwcG9ydHNDc3NWYXJzKCk7XG4gICAgfTtcbiAgICBNRENSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS5kZWZhdWx0QWN0aXZhdGlvblN0YXRlXyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFjdGl2YXRpb25FdmVudDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgaGFzRGVhY3RpdmF0aW9uVVhSdW46IGZhbHNlLFxuICAgICAgICAgICAgaXNBY3RpdmF0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgaXNQcm9ncmFtbWF0aWM6IGZhbHNlLFxuICAgICAgICAgICAgd2FzQWN0aXZhdGVkQnlQb2ludGVyOiBmYWxzZSxcbiAgICAgICAgICAgIHdhc0VsZW1lbnRNYWRlQWN0aXZlOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIHN1cHBvcnRzUHJlc3NSaXBwbGUgUGFzc2VkIGZyb20gaW5pdCB0byBzYXZlIGEgcmVkdW5kYW50IGZ1bmN0aW9uIGNhbGxcbiAgICAgKi9cbiAgICBNRENSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS5yZWdpc3RlclJvb3RIYW5kbGVyc18gPSBmdW5jdGlvbiAoc3VwcG9ydHNQcmVzc1JpcHBsZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoc3VwcG9ydHNQcmVzc1JpcHBsZSkge1xuICAgICAgICAgICAgQUNUSVZBVElPTl9FVkVOVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uIChldnRUeXBlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuYWRhcHRlci5yZWdpc3RlckludGVyYWN0aW9uSGFuZGxlcihldnRUeXBlLCBfdGhpcy5hY3RpdmF0ZUhhbmRsZXJfKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHRoaXMuYWRhcHRlci5pc1VuYm91bmRlZCgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJlZ2lzdGVyUmVzaXplSGFuZGxlcih0aGlzLnJlc2l6ZUhhbmRsZXJfKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkYXB0ZXIucmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXIoJ2ZvY3VzJywgdGhpcy5mb2N1c0hhbmRsZXJfKTtcbiAgICAgICAgdGhpcy5hZGFwdGVyLnJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyKCdibHVyJywgdGhpcy5ibHVySGFuZGxlcl8pO1xuICAgIH07XG4gICAgTURDUmlwcGxlRm91bmRhdGlvbi5wcm90b3R5cGUucmVnaXN0ZXJEZWFjdGl2YXRpb25IYW5kbGVyc18gPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChldnQudHlwZSA9PT0gJ2tleWRvd24nKSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIucmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXIoJ2tleXVwJywgdGhpcy5kZWFjdGl2YXRlSGFuZGxlcl8pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgUE9JTlRFUl9ERUFDVElWQVRJT05fRVZFTlRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAoZXZ0VHlwZSkge1xuICAgICAgICAgICAgICAgIF90aGlzLmFkYXB0ZXIucmVnaXN0ZXJEb2N1bWVudEludGVyYWN0aW9uSGFuZGxlcihldnRUeXBlLCBfdGhpcy5kZWFjdGl2YXRlSGFuZGxlcl8pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1EQ1JpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLmRlcmVnaXN0ZXJSb290SGFuZGxlcnNfID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKGV2dFR5cGUpIHtcbiAgICAgICAgICAgIF90aGlzLmFkYXB0ZXIuZGVyZWdpc3RlckludGVyYWN0aW9uSGFuZGxlcihldnRUeXBlLCBfdGhpcy5hY3RpdmF0ZUhhbmRsZXJfKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYWRhcHRlci5kZXJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyKCdmb2N1cycsIHRoaXMuZm9jdXNIYW5kbGVyXyk7XG4gICAgICAgIHRoaXMuYWRhcHRlci5kZXJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyKCdibHVyJywgdGhpcy5ibHVySGFuZGxlcl8pO1xuICAgICAgICBpZiAodGhpcy5hZGFwdGVyLmlzVW5ib3VuZGVkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5kZXJlZ2lzdGVyUmVzaXplSGFuZGxlcih0aGlzLnJlc2l6ZUhhbmRsZXJfKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTURDUmlwcGxlRm91bmRhdGlvbi5wcm90b3R5cGUuZGVyZWdpc3RlckRlYWN0aXZhdGlvbkhhbmRsZXJzXyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5hZGFwdGVyLmRlcmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXIoJ2tleXVwJywgdGhpcy5kZWFjdGl2YXRlSGFuZGxlcl8pO1xuICAgICAgICBQT0lOVEVSX0RFQUNUSVZBVElPTl9FVkVOVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uIChldnRUeXBlKSB7XG4gICAgICAgICAgICBfdGhpcy5hZGFwdGVyLmRlcmVnaXN0ZXJEb2N1bWVudEludGVyYWN0aW9uSGFuZGxlcihldnRUeXBlLCBfdGhpcy5kZWFjdGl2YXRlSGFuZGxlcl8pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE1EQ1JpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLnJlbW92ZUNzc1ZhcnNfID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgcmlwcGxlU3RyaW5ncyA9IE1EQ1JpcHBsZUZvdW5kYXRpb24uc3RyaW5ncztcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhyaXBwbGVTdHJpbmdzKTtcbiAgICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIGlmIChrZXkuaW5kZXhPZignVkFSXycpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuYWRhcHRlci51cGRhdGVDc3NWYXJpYWJsZShyaXBwbGVTdHJpbmdzW2tleV0sIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE1EQ1JpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLmFjdGl2YXRlXyA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuYWRhcHRlci5pc1N1cmZhY2VEaXNhYmxlZCgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFjdGl2YXRpb25TdGF0ZSA9IHRoaXMuYWN0aXZhdGlvblN0YXRlXztcbiAgICAgICAgaWYgKGFjdGl2YXRpb25TdGF0ZS5pc0FjdGl2YXRlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIEF2b2lkIHJlYWN0aW5nIHRvIGZvbGxvdy1vbiBldmVudHMgZmlyZWQgYnkgdG91Y2ggZGV2aWNlIGFmdGVyIGFuIGFscmVhZHktcHJvY2Vzc2VkIHVzZXIgaW50ZXJhY3Rpb25cbiAgICAgICAgdmFyIHByZXZpb3VzQWN0aXZhdGlvbkV2ZW50ID0gdGhpcy5wcmV2aW91c0FjdGl2YXRpb25FdmVudF87XG4gICAgICAgIHZhciBpc1NhbWVJbnRlcmFjdGlvbiA9IHByZXZpb3VzQWN0aXZhdGlvbkV2ZW50ICYmIGV2dCAhPT0gdW5kZWZpbmVkICYmIHByZXZpb3VzQWN0aXZhdGlvbkV2ZW50LnR5cGUgIT09IGV2dC50eXBlO1xuICAgICAgICBpZiAoaXNTYW1lSW50ZXJhY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBhY3RpdmF0aW9uU3RhdGUuaXNBY3RpdmF0ZWQgPSB0cnVlO1xuICAgICAgICBhY3RpdmF0aW9uU3RhdGUuaXNQcm9ncmFtbWF0aWMgPSBldnQgPT09IHVuZGVmaW5lZDtcbiAgICAgICAgYWN0aXZhdGlvblN0YXRlLmFjdGl2YXRpb25FdmVudCA9IGV2dDtcbiAgICAgICAgYWN0aXZhdGlvblN0YXRlLndhc0FjdGl2YXRlZEJ5UG9pbnRlciA9IGFjdGl2YXRpb25TdGF0ZS5pc1Byb2dyYW1tYXRpYyA/IGZhbHNlIDogZXZ0ICE9PSB1bmRlZmluZWQgJiYgKGV2dC50eXBlID09PSAnbW91c2Vkb3duJyB8fCBldnQudHlwZSA9PT0gJ3RvdWNoc3RhcnQnIHx8IGV2dC50eXBlID09PSAncG9pbnRlcmRvd24nKTtcbiAgICAgICAgdmFyIGhhc0FjdGl2YXRlZENoaWxkID0gZXZ0ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIGFjdGl2YXRlZFRhcmdldHMubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgYWN0aXZhdGVkVGFyZ2V0cy5zb21lKGZ1bmN0aW9uICh0YXJnZXQpIHsgcmV0dXJuIF90aGlzLmFkYXB0ZXIuY29udGFpbnNFdmVudFRhcmdldCh0YXJnZXQpOyB9KTtcbiAgICAgICAgaWYgKGhhc0FjdGl2YXRlZENoaWxkKSB7XG4gICAgICAgICAgICAvLyBJbW1lZGlhdGVseSByZXNldCBhY3RpdmF0aW9uIHN0YXRlLCB3aGlsZSBwcmVzZXJ2aW5nIGxvZ2ljIHRoYXQgcHJldmVudHMgdG91Y2ggZm9sbG93LW9uIGV2ZW50c1xuICAgICAgICAgICAgdGhpcy5yZXNldEFjdGl2YXRpb25TdGF0ZV8oKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGFjdGl2YXRlZFRhcmdldHMucHVzaChldnQudGFyZ2V0KTtcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJEZWFjdGl2YXRpb25IYW5kbGVyc18oZXZ0KTtcbiAgICAgICAgfVxuICAgICAgICBhY3RpdmF0aW9uU3RhdGUud2FzRWxlbWVudE1hZGVBY3RpdmUgPSB0aGlzLmNoZWNrRWxlbWVudE1hZGVBY3RpdmVfKGV2dCk7XG4gICAgICAgIGlmIChhY3RpdmF0aW9uU3RhdGUud2FzRWxlbWVudE1hZGVBY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0ZUFjdGl2YXRpb25fKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIFJlc2V0IGFycmF5IG9uIG5leHQgZnJhbWUgYWZ0ZXIgdGhlIGN1cnJlbnQgZXZlbnQgaGFzIGhhZCBhIGNoYW5jZSB0byBidWJibGUgdG8gcHJldmVudCBhbmNlc3RvciByaXBwbGVzXG4gICAgICAgICAgICBhY3RpdmF0ZWRUYXJnZXRzID0gW107XG4gICAgICAgICAgICBpZiAoIWFjdGl2YXRpb25TdGF0ZS53YXNFbGVtZW50TWFkZUFjdGl2ZVxuICAgICAgICAgICAgICAgICYmIGV2dCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgJiYgKGV2dC5rZXkgPT09ICcgJyB8fCBldnQua2V5Q29kZSA9PT0gMzIpKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgc3BhY2Ugd2FzIHByZXNzZWQsIHRyeSBhZ2FpbiB3aXRoaW4gYW4gckFGIGNhbGwgdG8gZGV0ZWN0IDphY3RpdmUsIGJlY2F1c2UgZGlmZmVyZW50IFVBcyByZXBvcnRcbiAgICAgICAgICAgICAgICAvLyBhY3RpdmUgc3RhdGVzIGluY29uc2lzdGVudGx5IHdoZW4gdGhleSdyZSBjYWxsZWQgd2l0aGluIGV2ZW50IGhhbmRsaW5nIGNvZGU6XG4gICAgICAgICAgICAgICAgLy8gLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD02MzU5NzFcbiAgICAgICAgICAgICAgICAvLyAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTEyOTM3NDFcbiAgICAgICAgICAgICAgICAvLyBXZSB0cnkgZmlyc3Qgb3V0c2lkZSByQUYgdG8gc3VwcG9ydCBFZGdlLCB3aGljaCBkb2VzIG5vdCBleGhpYml0IHRoaXMgcHJvYmxlbSwgYnV0IHdpbGwgY3Jhc2ggaWYgYSBDU1NcbiAgICAgICAgICAgICAgICAvLyB2YXJpYWJsZSBpcyBzZXQgd2l0aGluIGEgckFGIGNhbGxiYWNrIGZvciBhIHN1Ym1pdCBidXR0b24gaW50ZXJhY3Rpb24gKCMyMjQxKS5cbiAgICAgICAgICAgICAgICBhY3RpdmF0aW9uU3RhdGUud2FzRWxlbWVudE1hZGVBY3RpdmUgPSBfdGhpcy5jaGVja0VsZW1lbnRNYWRlQWN0aXZlXyhldnQpO1xuICAgICAgICAgICAgICAgIGlmIChhY3RpdmF0aW9uU3RhdGUud2FzRWxlbWVudE1hZGVBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuYW5pbWF0ZUFjdGl2YXRpb25fKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFhY3RpdmF0aW9uU3RhdGUud2FzRWxlbWVudE1hZGVBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAvLyBSZXNldCBhY3RpdmF0aW9uIHN0YXRlIGltbWVkaWF0ZWx5IGlmIGVsZW1lbnQgd2FzIG5vdCBtYWRlIGFjdGl2ZS5cbiAgICAgICAgICAgICAgICBfdGhpcy5hY3RpdmF0aW9uU3RhdGVfID0gX3RoaXMuZGVmYXVsdEFjdGl2YXRpb25TdGF0ZV8oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBNRENSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS5jaGVja0VsZW1lbnRNYWRlQWN0aXZlXyA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgcmV0dXJuIChldnQgIT09IHVuZGVmaW5lZCAmJiBldnQudHlwZSA9PT0gJ2tleWRvd24nKSA/XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuaXNTdXJmYWNlQWN0aXZlKCkgOlxuICAgICAgICAgICAgdHJ1ZTtcbiAgICB9O1xuICAgIE1EQ1JpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLmFuaW1hdGVBY3RpdmF0aW9uXyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9hID0gTURDUmlwcGxlRm91bmRhdGlvbi5zdHJpbmdzLCBWQVJfRkdfVFJBTlNMQVRFX1NUQVJUID0gX2EuVkFSX0ZHX1RSQU5TTEFURV9TVEFSVCwgVkFSX0ZHX1RSQU5TTEFURV9FTkQgPSBfYS5WQVJfRkdfVFJBTlNMQVRFX0VORDtcbiAgICAgICAgdmFyIF9iID0gTURDUmlwcGxlRm91bmRhdGlvbi5jc3NDbGFzc2VzLCBGR19ERUFDVElWQVRJT04gPSBfYi5GR19ERUFDVElWQVRJT04sIEZHX0FDVElWQVRJT04gPSBfYi5GR19BQ1RJVkFUSU9OO1xuICAgICAgICB2YXIgREVBQ1RJVkFUSU9OX1RJTUVPVVRfTVMgPSBNRENSaXBwbGVGb3VuZGF0aW9uLm51bWJlcnMuREVBQ1RJVkFUSU9OX1RJTUVPVVRfTVM7XG4gICAgICAgIHRoaXMubGF5b3V0SW50ZXJuYWxfKCk7XG4gICAgICAgIHZhciB0cmFuc2xhdGVTdGFydCA9ICcnO1xuICAgICAgICB2YXIgdHJhbnNsYXRlRW5kID0gJyc7XG4gICAgICAgIGlmICghdGhpcy5hZGFwdGVyLmlzVW5ib3VuZGVkKCkpIHtcbiAgICAgICAgICAgIHZhciBfYyA9IHRoaXMuZ2V0RmdUcmFuc2xhdGlvbkNvb3JkaW5hdGVzXygpLCBzdGFydFBvaW50ID0gX2Muc3RhcnRQb2ludCwgZW5kUG9pbnQgPSBfYy5lbmRQb2ludDtcbiAgICAgICAgICAgIHRyYW5zbGF0ZVN0YXJ0ID0gc3RhcnRQb2ludC54ICsgXCJweCwgXCIgKyBzdGFydFBvaW50LnkgKyBcInB4XCI7XG4gICAgICAgICAgICB0cmFuc2xhdGVFbmQgPSBlbmRQb2ludC54ICsgXCJweCwgXCIgKyBlbmRQb2ludC55ICsgXCJweFwiO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWRhcHRlci51cGRhdGVDc3NWYXJpYWJsZShWQVJfRkdfVFJBTlNMQVRFX1NUQVJULCB0cmFuc2xhdGVTdGFydCk7XG4gICAgICAgIHRoaXMuYWRhcHRlci51cGRhdGVDc3NWYXJpYWJsZShWQVJfRkdfVFJBTlNMQVRFX0VORCwgdHJhbnNsYXRlRW5kKTtcbiAgICAgICAgLy8gQ2FuY2VsIGFueSBvbmdvaW5nIGFjdGl2YXRpb24vZGVhY3RpdmF0aW9uIGFuaW1hdGlvbnNcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuYWN0aXZhdGlvblRpbWVyXyk7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmZnRGVhY3RpdmF0aW9uUmVtb3ZhbFRpbWVyXyk7XG4gICAgICAgIHRoaXMucm1Cb3VuZGVkQWN0aXZhdGlvbkNsYXNzZXNfKCk7XG4gICAgICAgIHRoaXMuYWRhcHRlci5yZW1vdmVDbGFzcyhGR19ERUFDVElWQVRJT04pO1xuICAgICAgICAvLyBGb3JjZSBsYXlvdXQgaW4gb3JkZXIgdG8gcmUtdHJpZ2dlciB0aGUgYW5pbWF0aW9uLlxuICAgICAgICB0aGlzLmFkYXB0ZXIuY29tcHV0ZUJvdW5kaW5nUmVjdCgpO1xuICAgICAgICB0aGlzLmFkYXB0ZXIuYWRkQ2xhc3MoRkdfQUNUSVZBVElPTik7XG4gICAgICAgIHRoaXMuYWN0aXZhdGlvblRpbWVyXyA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuYWN0aXZhdGlvblRpbWVyQ2FsbGJhY2tfKCk7IH0sIERFQUNUSVZBVElPTl9USU1FT1VUX01TKTtcbiAgICB9O1xuICAgIE1EQ1JpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLmdldEZnVHJhbnNsYXRpb25Db29yZGluYXRlc18gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMuYWN0aXZhdGlvblN0YXRlXywgYWN0aXZhdGlvbkV2ZW50ID0gX2EuYWN0aXZhdGlvbkV2ZW50LCB3YXNBY3RpdmF0ZWRCeVBvaW50ZXIgPSBfYS53YXNBY3RpdmF0ZWRCeVBvaW50ZXI7XG4gICAgICAgIHZhciBzdGFydFBvaW50O1xuICAgICAgICBpZiAod2FzQWN0aXZhdGVkQnlQb2ludGVyKSB7XG4gICAgICAgICAgICBzdGFydFBvaW50ID0gZ2V0Tm9ybWFsaXplZEV2ZW50Q29vcmRzKGFjdGl2YXRpb25FdmVudCwgdGhpcy5hZGFwdGVyLmdldFdpbmRvd1BhZ2VPZmZzZXQoKSwgdGhpcy5hZGFwdGVyLmNvbXB1dGVCb3VuZGluZ1JlY3QoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdGFydFBvaW50ID0ge1xuICAgICAgICAgICAgICAgIHg6IHRoaXMuZnJhbWVfLndpZHRoIC8gMixcbiAgICAgICAgICAgICAgICB5OiB0aGlzLmZyYW1lXy5oZWlnaHQgLyAyLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDZW50ZXIgdGhlIGVsZW1lbnQgYXJvdW5kIHRoZSBzdGFydCBwb2ludC5cbiAgICAgICAgc3RhcnRQb2ludCA9IHtcbiAgICAgICAgICAgIHg6IHN0YXJ0UG9pbnQueCAtICh0aGlzLmluaXRpYWxTaXplXyAvIDIpLFxuICAgICAgICAgICAgeTogc3RhcnRQb2ludC55IC0gKHRoaXMuaW5pdGlhbFNpemVfIC8gMiksXG4gICAgICAgIH07XG4gICAgICAgIHZhciBlbmRQb2ludCA9IHtcbiAgICAgICAgICAgIHg6ICh0aGlzLmZyYW1lXy53aWR0aCAvIDIpIC0gKHRoaXMuaW5pdGlhbFNpemVfIC8gMiksXG4gICAgICAgICAgICB5OiAodGhpcy5mcmFtZV8uaGVpZ2h0IC8gMikgLSAodGhpcy5pbml0aWFsU2l6ZV8gLyAyKSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHsgc3RhcnRQb2ludDogc3RhcnRQb2ludCwgZW5kUG9pbnQ6IGVuZFBvaW50IH07XG4gICAgfTtcbiAgICBNRENSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS5ydW5EZWFjdGl2YXRpb25VWExvZ2ljSWZSZWFkeV8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIC8vIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBib3RoIHdoZW4gYSBwb2ludGluZyBkZXZpY2UgaXMgcmVsZWFzZWQsIGFuZCB3aGVuIHRoZSBhY3RpdmF0aW9uIGFuaW1hdGlvbiBlbmRzLlxuICAgICAgICAvLyBUaGUgZGVhY3RpdmF0aW9uIGFuaW1hdGlvbiBzaG91bGQgb25seSBydW4gYWZ0ZXIgYm90aCBvZiB0aG9zZSBvY2N1ci5cbiAgICAgICAgdmFyIEZHX0RFQUNUSVZBVElPTiA9IE1EQ1JpcHBsZUZvdW5kYXRpb24uY3NzQ2xhc3Nlcy5GR19ERUFDVElWQVRJT047XG4gICAgICAgIHZhciBfYSA9IHRoaXMuYWN0aXZhdGlvblN0YXRlXywgaGFzRGVhY3RpdmF0aW9uVVhSdW4gPSBfYS5oYXNEZWFjdGl2YXRpb25VWFJ1biwgaXNBY3RpdmF0ZWQgPSBfYS5pc0FjdGl2YXRlZDtcbiAgICAgICAgdmFyIGFjdGl2YXRpb25IYXNFbmRlZCA9IGhhc0RlYWN0aXZhdGlvblVYUnVuIHx8ICFpc0FjdGl2YXRlZDtcbiAgICAgICAgaWYgKGFjdGl2YXRpb25IYXNFbmRlZCAmJiB0aGlzLmFjdGl2YXRpb25BbmltYXRpb25IYXNFbmRlZF8pIHtcbiAgICAgICAgICAgIHRoaXMucm1Cb3VuZGVkQWN0aXZhdGlvbkNsYXNzZXNfKCk7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuYWRkQ2xhc3MoRkdfREVBQ1RJVkFUSU9OKTtcbiAgICAgICAgICAgIHRoaXMuZmdEZWFjdGl2YXRpb25SZW1vdmFsVGltZXJfID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuYWRhcHRlci5yZW1vdmVDbGFzcyhGR19ERUFDVElWQVRJT04pO1xuICAgICAgICAgICAgfSwgbnVtYmVycy5GR19ERUFDVElWQVRJT05fTVMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNRENSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS5ybUJvdW5kZWRBY3RpdmF0aW9uQ2xhc3Nlc18gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBGR19BQ1RJVkFUSU9OID0gTURDUmlwcGxlRm91bmRhdGlvbi5jc3NDbGFzc2VzLkZHX0FDVElWQVRJT047XG4gICAgICAgIHRoaXMuYWRhcHRlci5yZW1vdmVDbGFzcyhGR19BQ1RJVkFUSU9OKTtcbiAgICAgICAgdGhpcy5hY3RpdmF0aW9uQW5pbWF0aW9uSGFzRW5kZWRfID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYWRhcHRlci5jb21wdXRlQm91bmRpbmdSZWN0KCk7XG4gICAgfTtcbiAgICBNRENSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS5yZXNldEFjdGl2YXRpb25TdGF0ZV8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMucHJldmlvdXNBY3RpdmF0aW9uRXZlbnRfID0gdGhpcy5hY3RpdmF0aW9uU3RhdGVfLmFjdGl2YXRpb25FdmVudDtcbiAgICAgICAgdGhpcy5hY3RpdmF0aW9uU3RhdGVfID0gdGhpcy5kZWZhdWx0QWN0aXZhdGlvblN0YXRlXygpO1xuICAgICAgICAvLyBUb3VjaCBkZXZpY2VzIG1heSBmaXJlIGFkZGl0aW9uYWwgZXZlbnRzIGZvciB0aGUgc2FtZSBpbnRlcmFjdGlvbiB3aXRoaW4gYSBzaG9ydCB0aW1lLlxuICAgICAgICAvLyBTdG9yZSB0aGUgcHJldmlvdXMgZXZlbnQgdW50aWwgaXQncyBzYWZlIHRvIGFzc3VtZSB0aGF0IHN1YnNlcXVlbnQgZXZlbnRzIGFyZSBmb3IgbmV3IGludGVyYWN0aW9ucy5cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5wcmV2aW91c0FjdGl2YXRpb25FdmVudF8gPSB1bmRlZmluZWQ7IH0sIE1EQ1JpcHBsZUZvdW5kYXRpb24ubnVtYmVycy5UQVBfREVMQVlfTVMpO1xuICAgIH07XG4gICAgTURDUmlwcGxlRm91bmRhdGlvbi5wcm90b3R5cGUuZGVhY3RpdmF0ZV8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBhY3RpdmF0aW9uU3RhdGUgPSB0aGlzLmFjdGl2YXRpb25TdGF0ZV87XG4gICAgICAgIC8vIFRoaXMgY2FuIGhhcHBlbiBpbiBzY2VuYXJpb3Mgc3VjaCBhcyB3aGVuIHlvdSBoYXZlIGEga2V5dXAgZXZlbnQgdGhhdCBibHVycyB0aGUgZWxlbWVudC5cbiAgICAgICAgaWYgKCFhY3RpdmF0aW9uU3RhdGUuaXNBY3RpdmF0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RhdGUgPSBfX2Fzc2lnbih7fSwgYWN0aXZhdGlvblN0YXRlKTtcbiAgICAgICAgaWYgKGFjdGl2YXRpb25TdGF0ZS5pc1Byb2dyYW1tYXRpYykge1xuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmFuaW1hdGVEZWFjdGl2YXRpb25fKHN0YXRlKTsgfSk7XG4gICAgICAgICAgICB0aGlzLnJlc2V0QWN0aXZhdGlvblN0YXRlXygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kZXJlZ2lzdGVyRGVhY3RpdmF0aW9uSGFuZGxlcnNfKCk7XG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmFjdGl2YXRpb25TdGF0ZV8uaGFzRGVhY3RpdmF0aW9uVVhSdW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgIF90aGlzLmFuaW1hdGVEZWFjdGl2YXRpb25fKHN0YXRlKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5yZXNldEFjdGl2YXRpb25TdGF0ZV8oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNRENSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS5hbmltYXRlRGVhY3RpdmF0aW9uXyA9IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgd2FzQWN0aXZhdGVkQnlQb2ludGVyID0gX2Eud2FzQWN0aXZhdGVkQnlQb2ludGVyLCB3YXNFbGVtZW50TWFkZUFjdGl2ZSA9IF9hLndhc0VsZW1lbnRNYWRlQWN0aXZlO1xuICAgICAgICBpZiAod2FzQWN0aXZhdGVkQnlQb2ludGVyIHx8IHdhc0VsZW1lbnRNYWRlQWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLnJ1bkRlYWN0aXZhdGlvblVYTG9naWNJZlJlYWR5XygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNRENSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS5sYXlvdXRJbnRlcm5hbF8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuZnJhbWVfID0gdGhpcy5hZGFwdGVyLmNvbXB1dGVCb3VuZGluZ1JlY3QoKTtcbiAgICAgICAgdmFyIG1heERpbSA9IE1hdGgubWF4KHRoaXMuZnJhbWVfLmhlaWdodCwgdGhpcy5mcmFtZV8ud2lkdGgpO1xuICAgICAgICAvLyBTdXJmYWNlIGRpYW1ldGVyIGlzIHRyZWF0ZWQgZGlmZmVyZW50bHkgZm9yIHVuYm91bmRlZCB2cy4gYm91bmRlZCByaXBwbGVzLlxuICAgICAgICAvLyBVbmJvdW5kZWQgcmlwcGxlIGRpYW1ldGVyIGlzIGNhbGN1bGF0ZWQgc21hbGxlciBzaW5jZSB0aGUgc3VyZmFjZSBpcyBleHBlY3RlZCB0byBhbHJlYWR5IGJlIHBhZGRlZCBhcHByb3ByaWF0ZWx5XG4gICAgICAgIC8vIHRvIGV4dGVuZCB0aGUgaGl0Ym94LCBhbmQgdGhlIHJpcHBsZSBpcyBleHBlY3RlZCB0byBtZWV0IHRoZSBlZGdlcyBvZiB0aGUgcGFkZGVkIGhpdGJveCAod2hpY2ggaXMgdHlwaWNhbGx5XG4gICAgICAgIC8vIHNxdWFyZSkuIEJvdW5kZWQgcmlwcGxlcywgb24gdGhlIG90aGVyIGhhbmQsIGFyZSBmdWxseSBleHBlY3RlZCB0byBleHBhbmQgYmV5b25kIHRoZSBzdXJmYWNlJ3MgbG9uZ2VzdCBkaWFtZXRlclxuICAgICAgICAvLyAoY2FsY3VsYXRlZCBiYXNlZCBvbiB0aGUgZGlhZ29uYWwgcGx1cyBhIGNvbnN0YW50IHBhZGRpbmcpLCBhbmQgYXJlIGNsaXBwZWQgYXQgdGhlIHN1cmZhY2UncyBib3JkZXIgdmlhXG4gICAgICAgIC8vIGBvdmVyZmxvdzogaGlkZGVuYC5cbiAgICAgICAgdmFyIGdldEJvdW5kZWRSYWRpdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaHlwb3RlbnVzZSA9IE1hdGguc3FydChNYXRoLnBvdyhfdGhpcy5mcmFtZV8ud2lkdGgsIDIpICsgTWF0aC5wb3coX3RoaXMuZnJhbWVfLmhlaWdodCwgMikpO1xuICAgICAgICAgICAgcmV0dXJuIGh5cG90ZW51c2UgKyBNRENSaXBwbGVGb3VuZGF0aW9uLm51bWJlcnMuUEFERElORztcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5tYXhSYWRpdXNfID0gdGhpcy5hZGFwdGVyLmlzVW5ib3VuZGVkKCkgPyBtYXhEaW0gOiBnZXRCb3VuZGVkUmFkaXVzKCk7XG4gICAgICAgIC8vIFJpcHBsZSBpcyBzaXplZCBhcyBhIGZyYWN0aW9uIG9mIHRoZSBsYXJnZXN0IGRpbWVuc2lvbiBvZiB0aGUgc3VyZmFjZSwgdGhlbiBzY2FsZXMgdXAgdXNpbmcgYSBDU1Mgc2NhbGUgdHJhbnNmb3JtXG4gICAgICAgIHZhciBpbml0aWFsU2l6ZSA9IE1hdGguZmxvb3IobWF4RGltICogTURDUmlwcGxlRm91bmRhdGlvbi5udW1iZXJzLklOSVRJQUxfT1JJR0lOX1NDQUxFKTtcbiAgICAgICAgLy8gVW5ib3VuZGVkIHJpcHBsZSBzaXplIHNob3VsZCBhbHdheXMgYmUgZXZlbiBudW1iZXIgdG8gZXF1YWxseSBjZW50ZXIgYWxpZ24uXG4gICAgICAgIGlmICh0aGlzLmFkYXB0ZXIuaXNVbmJvdW5kZWQoKSAmJiBpbml0aWFsU2l6ZSAlIDIgIT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbFNpemVfID0gaW5pdGlhbFNpemUgLSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pbml0aWFsU2l6ZV8gPSBpbml0aWFsU2l6ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZnU2NhbGVfID0gXCJcIiArIHRoaXMubWF4UmFkaXVzXyAvIHRoaXMuaW5pdGlhbFNpemVfO1xuICAgICAgICB0aGlzLnVwZGF0ZUxheW91dENzc1ZhcnNfKCk7XG4gICAgfTtcbiAgICBNRENSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS51cGRhdGVMYXlvdXRDc3NWYXJzXyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gTURDUmlwcGxlRm91bmRhdGlvbi5zdHJpbmdzLCBWQVJfRkdfU0laRSA9IF9hLlZBUl9GR19TSVpFLCBWQVJfTEVGVCA9IF9hLlZBUl9MRUZULCBWQVJfVE9QID0gX2EuVkFSX1RPUCwgVkFSX0ZHX1NDQUxFID0gX2EuVkFSX0ZHX1NDQUxFO1xuICAgICAgICB0aGlzLmFkYXB0ZXIudXBkYXRlQ3NzVmFyaWFibGUoVkFSX0ZHX1NJWkUsIHRoaXMuaW5pdGlhbFNpemVfICsgXCJweFwiKTtcbiAgICAgICAgdGhpcy5hZGFwdGVyLnVwZGF0ZUNzc1ZhcmlhYmxlKFZBUl9GR19TQ0FMRSwgdGhpcy5mZ1NjYWxlXyk7XG4gICAgICAgIGlmICh0aGlzLmFkYXB0ZXIuaXNVbmJvdW5kZWQoKSkge1xuICAgICAgICAgICAgdGhpcy51bmJvdW5kZWRDb29yZHNfID0ge1xuICAgICAgICAgICAgICAgIGxlZnQ6IE1hdGgucm91bmQoKHRoaXMuZnJhbWVfLndpZHRoIC8gMikgLSAodGhpcy5pbml0aWFsU2l6ZV8gLyAyKSksXG4gICAgICAgICAgICAgICAgdG9wOiBNYXRoLnJvdW5kKCh0aGlzLmZyYW1lXy5oZWlnaHQgLyAyKSAtICh0aGlzLmluaXRpYWxTaXplXyAvIDIpKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIudXBkYXRlQ3NzVmFyaWFibGUoVkFSX0xFRlQsIHRoaXMudW5ib3VuZGVkQ29vcmRzXy5sZWZ0ICsgXCJweFwiKTtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci51cGRhdGVDc3NWYXJpYWJsZShWQVJfVE9QLCB0aGlzLnVuYm91bmRlZENvb3Jkc18udG9wICsgXCJweFwiKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE1EQ1JpcHBsZUZvdW5kYXRpb247XG59KE1EQ0ZvdW5kYXRpb24pKTtcbmV4cG9ydCB7IE1EQ1JpcHBsZUZvdW5kYXRpb24gfTtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1kZWZhdWx0LWV4cG9ydCBOZWVkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBNREMgV2ViIHYwLjQ0LjAgYW5kIGVhcmxpZXIuXG5leHBvcnQgZGVmYXVsdCBNRENSaXBwbGVGb3VuZGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm91bmRhdGlvbi5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbmltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgTURDQ29tcG9uZW50IH0gZnJvbSAnQG1hdGVyaWFsL2Jhc2UvY29tcG9uZW50JztcbmltcG9ydCB7IGFwcGx5UGFzc2l2ZSB9IGZyb20gJ0BtYXRlcmlhbC9kb20vZXZlbnRzJztcbmltcG9ydCB7IG1hdGNoZXMgfSBmcm9tICdAbWF0ZXJpYWwvZG9tL3BvbnlmaWxsJztcbmltcG9ydCB7IE1EQ1JpcHBsZUZvdW5kYXRpb24gfSBmcm9tICcuL2ZvdW5kYXRpb24nO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuL3V0aWwnO1xudmFyIE1EQ1JpcHBsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTURDUmlwcGxlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1EQ1JpcHBsZSgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgTURDUmlwcGxlLmF0dGFjaFRvID0gZnVuY3Rpb24gKHJvb3QsIG9wdHMpIHtcbiAgICAgICAgaWYgKG9wdHMgPT09IHZvaWQgMCkgeyBvcHRzID0geyBpc1VuYm91bmRlZDogdW5kZWZpbmVkIH07IH1cbiAgICAgICAgdmFyIHJpcHBsZSA9IG5ldyBNRENSaXBwbGUocm9vdCk7XG4gICAgICAgIC8vIE9ubHkgb3ZlcnJpZGUgdW5ib3VuZGVkIGJlaGF2aW9yIGlmIG9wdGlvbiBpcyBleHBsaWNpdGx5IHNwZWNpZmllZFxuICAgICAgICBpZiAob3B0cy5pc1VuYm91bmRlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByaXBwbGUudW5ib3VuZGVkID0gb3B0cy5pc1VuYm91bmRlZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmlwcGxlO1xuICAgIH07XG4gICAgTURDUmlwcGxlLmNyZWF0ZUFkYXB0ZXIgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFkZENsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7IHJldHVybiBpbnN0YW5jZS5yb290LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTsgfSxcbiAgICAgICAgICAgIGJyb3dzZXJTdXBwb3J0c0Nzc1ZhcnM6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWwuc3VwcG9ydHNDc3NWYXJpYWJsZXMod2luZG93KTsgfSxcbiAgICAgICAgICAgIGNvbXB1dGVCb3VuZGluZ1JlY3Q6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGluc3RhbmNlLnJvb3QuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7IH0sXG4gICAgICAgICAgICBjb250YWluc0V2ZW50VGFyZ2V0OiBmdW5jdGlvbiAodGFyZ2V0KSB7IHJldHVybiBpbnN0YW5jZS5yb290LmNvbnRhaW5zKHRhcmdldCk7IH0sXG4gICAgICAgICAgICBkZXJlZ2lzdGVyRG9jdW1lbnRJbnRlcmFjdGlvbkhhbmRsZXI6IGZ1bmN0aW9uIChldnRUeXBlLCBoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2dFR5cGUsIGhhbmRsZXIsIGFwcGx5UGFzc2l2ZSgpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZXJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyOiBmdW5jdGlvbiAoZXZ0VHlwZSwgaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZS5yb290XG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVFdmVudExpc3RlbmVyKGV2dFR5cGUsIGhhbmRsZXIsIGFwcGx5UGFzc2l2ZSgpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZXJlZ2lzdGVyUmVzaXplSGFuZGxlcjogZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZXIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldFdpbmRvd1BhZ2VPZmZzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHsgeDogd2luZG93LnBhZ2VYT2Zmc2V0LCB5OiB3aW5kb3cucGFnZVlPZmZzZXQgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNTdXJmYWNlQWN0aXZlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBtYXRjaGVzKGluc3RhbmNlLnJvb3QsICc6YWN0aXZlJyk7IH0sXG4gICAgICAgICAgICBpc1N1cmZhY2VEaXNhYmxlZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQm9vbGVhbihpbnN0YW5jZS5kaXNhYmxlZCk7IH0sXG4gICAgICAgICAgICBpc1VuYm91bmRlZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQm9vbGVhbihpbnN0YW5jZS51bmJvdW5kZWQpOyB9LFxuICAgICAgICAgICAgcmVnaXN0ZXJEb2N1bWVudEludGVyYWN0aW9uSGFuZGxlcjogZnVuY3Rpb24gKGV2dFR5cGUsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZ0VHlwZSwgaGFuZGxlciwgYXBwbHlQYXNzaXZlKCkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyOiBmdW5jdGlvbiAoZXZ0VHlwZSwgaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZS5yb290XG4gICAgICAgICAgICAgICAgICAgIC5hZGRFdmVudExpc3RlbmVyKGV2dFR5cGUsIGhhbmRsZXIsIGFwcGx5UGFzc2l2ZSgpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWdpc3RlclJlc2l6ZUhhbmRsZXI6IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVyKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24gKGNsYXNzTmFtZSkgeyByZXR1cm4gaW5zdGFuY2Uucm9vdC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7IH0sXG4gICAgICAgICAgICB1cGRhdGVDc3NWYXJpYWJsZTogZnVuY3Rpb24gKHZhck5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlLnJvb3Quc3R5bGUuc2V0UHJvcGVydHkodmFyTmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENSaXBwbGUucHJvdG90eXBlLCBcInVuYm91bmRlZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIEJvb2xlYW4odGhpcy51bmJvdW5kZWRfKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodW5ib3VuZGVkKSB7XG4gICAgICAgICAgICB0aGlzLnVuYm91bmRlZF8gPSBCb29sZWFuKHVuYm91bmRlZCk7XG4gICAgICAgICAgICB0aGlzLnNldFVuYm91bmRlZF8oKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgTURDUmlwcGxlLnByb3RvdHlwZS5hY3RpdmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5mb3VuZGF0aW9uLmFjdGl2YXRlKCk7XG4gICAgfTtcbiAgICBNRENSaXBwbGUucHJvdG90eXBlLmRlYWN0aXZhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZm91bmRhdGlvbi5kZWFjdGl2YXRlKCk7XG4gICAgfTtcbiAgICBNRENSaXBwbGUucHJvdG90eXBlLmxheW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5mb3VuZGF0aW9uLmxheW91dCgpO1xuICAgIH07XG4gICAgTURDUmlwcGxlLnByb3RvdHlwZS5nZXREZWZhdWx0Rm91bmRhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNRENSaXBwbGVGb3VuZGF0aW9uKE1EQ1JpcHBsZS5jcmVhdGVBZGFwdGVyKHRoaXMpKTtcbiAgICB9O1xuICAgIE1EQ1JpcHBsZS5wcm90b3R5cGUuaW5pdGlhbFN5bmNXaXRoRE9NID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcm9vdCA9IHRoaXMucm9vdDtcbiAgICAgICAgdGhpcy51bmJvdW5kZWQgPSAnbWRjUmlwcGxlSXNVbmJvdW5kZWQnIGluIHJvb3QuZGF0YXNldDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENsb3N1cmUgQ29tcGlsZXIgdGhyb3dzIGFuIGFjY2VzcyBjb250cm9sIGVycm9yIHdoZW4gZGlyZWN0bHkgYWNjZXNzaW5nIGFcbiAgICAgKiBwcm90ZWN0ZWQgb3IgcHJpdmF0ZSBwcm9wZXJ0eSBpbnNpZGUgYSBnZXR0ZXIvc2V0dGVyLCBsaWtlIHVuYm91bmRlZCBhYm92ZS5cbiAgICAgKiBCeSBhY2Nlc3NpbmcgdGhlIHByb3RlY3RlZCBwcm9wZXJ0eSBpbnNpZGUgYSBtZXRob2QsIHdlIHNvbHZlIHRoYXQgcHJvYmxlbS5cbiAgICAgKiBUaGF0J3Mgd2h5IHRoaXMgZnVuY3Rpb24gZXhpc3RzLlxuICAgICAqL1xuICAgIE1EQ1JpcHBsZS5wcm90b3R5cGUuc2V0VW5ib3VuZGVkXyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5mb3VuZGF0aW9uLnNldFVuYm91bmRlZChCb29sZWFuKHRoaXMudW5ib3VuZGVkXykpO1xuICAgIH07XG4gICAgcmV0dXJuIE1EQ1JpcHBsZTtcbn0oTURDQ29tcG9uZW50KSk7XG5leHBvcnQgeyBNRENSaXBwbGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBvbmVudC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbnZhciBjc3NDbGFzc2VzID0ge1xuICAgIEFDVElWRTogJ21kYy10YWItaW5kaWNhdG9yLS1hY3RpdmUnLFxuICAgIEZBREU6ICdtZGMtdGFiLWluZGljYXRvci0tZmFkZScsXG4gICAgTk9fVFJBTlNJVElPTjogJ21kYy10YWItaW5kaWNhdG9yLS1uby10cmFuc2l0aW9uJyxcbn07XG52YXIgc3RyaW5ncyA9IHtcbiAgICBDT05URU5UX1NFTEVDVE9SOiAnLm1kYy10YWItaW5kaWNhdG9yX19jb250ZW50Jyxcbn07XG5leHBvcnQgeyBjc3NDbGFzc2VzLCBzdHJpbmdzLCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuaW1wb3J0IHsgX19hc3NpZ24sIF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgTURDRm91bmRhdGlvbiB9IGZyb20gJ0BtYXRlcmlhbC9iYXNlL2ZvdW5kYXRpb24nO1xuaW1wb3J0IHsgY3NzQ2xhc3Nlcywgc3RyaW5ncyB9IGZyb20gJy4vY29uc3RhbnRzJztcbnZhciBNRENUYWJJbmRpY2F0b3JGb3VuZGF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNRENUYWJJbmRpY2F0b3JGb3VuZGF0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1EQ1RhYkluZGljYXRvckZvdW5kYXRpb24oYWRhcHRlcikge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgX19hc3NpZ24oX19hc3NpZ24oe30sIE1EQ1RhYkluZGljYXRvckZvdW5kYXRpb24uZGVmYXVsdEFkYXB0ZXIpLCBhZGFwdGVyKSkgfHwgdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1RhYkluZGljYXRvckZvdW5kYXRpb24sIFwiY3NzQ2xhc3Nlc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNzc0NsYXNzZXM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENUYWJJbmRpY2F0b3JGb3VuZGF0aW9uLCBcInN0cmluZ3NcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVGFiSW5kaWNhdG9yRm91bmRhdGlvbiwgXCJkZWZhdWx0QWRhcHRlclwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzIE1ldGhvZHMgc2hvdWxkIGJlIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSBhZGFwdGVyIGludGVyZmFjZS5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGNvbXB1dGVDb250ZW50Q2xpZW50UmVjdDogZnVuY3Rpb24gKCkgeyByZXR1cm4gKHsgdG9wOiAwLCByaWdodDogMCwgYm90dG9tOiAwLCBsZWZ0OiAwLCB3aWR0aDogMCwgaGVpZ2h0OiAwIH0pOyB9LFxuICAgICAgICAgICAgICAgIHNldENvbnRlbnRTdHlsZVByb3BlcnR5OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXNcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgTURDVGFiSW5kaWNhdG9yRm91bmRhdGlvbi5wcm90b3R5cGUuY29tcHV0ZUNvbnRlbnRDbGllbnRSZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmNvbXB1dGVDb250ZW50Q2xpZW50UmVjdCgpO1xuICAgIH07XG4gICAgcmV0dXJuIE1EQ1RhYkluZGljYXRvckZvdW5kYXRpb247XG59KE1EQ0ZvdW5kYXRpb24pKTtcbmV4cG9ydCB7IE1EQ1RhYkluZGljYXRvckZvdW5kYXRpb24gfTtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1kZWZhdWx0LWV4cG9ydCBOZWVkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBNREMgV2ViIHYwLjQ0LjAgYW5kIGVhcmxpZXIuXG5leHBvcnQgZGVmYXVsdCBNRENUYWJJbmRpY2F0b3JGb3VuZGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm91bmRhdGlvbi5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbmltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgTURDVGFiSW5kaWNhdG9yRm91bmRhdGlvbiB9IGZyb20gJy4vZm91bmRhdGlvbic7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogc3ViY2xhc3MgaXMgbm90IGEgYnJhbmNoIHN0YXRlbWVudCAqL1xudmFyIE1EQ0ZhZGluZ1RhYkluZGljYXRvckZvdW5kYXRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1EQ0ZhZGluZ1RhYkluZGljYXRvckZvdW5kYXRpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTURDRmFkaW5nVGFiSW5kaWNhdG9yRm91bmRhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBNRENGYWRpbmdUYWJJbmRpY2F0b3JGb3VuZGF0aW9uLnByb3RvdHlwZS5hY3RpdmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hZGFwdGVyLmFkZENsYXNzKE1EQ1RhYkluZGljYXRvckZvdW5kYXRpb24uY3NzQ2xhc3Nlcy5BQ1RJVkUpO1xuICAgIH07XG4gICAgTURDRmFkaW5nVGFiSW5kaWNhdG9yRm91bmRhdGlvbi5wcm90b3R5cGUuZGVhY3RpdmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKE1EQ1RhYkluZGljYXRvckZvdW5kYXRpb24uY3NzQ2xhc3Nlcy5BQ1RJVkUpO1xuICAgIH07XG4gICAgcmV0dXJuIE1EQ0ZhZGluZ1RhYkluZGljYXRvckZvdW5kYXRpb247XG59KE1EQ1RhYkluZGljYXRvckZvdW5kYXRpb24pKTtcbmV4cG9ydCB7IE1EQ0ZhZGluZ1RhYkluZGljYXRvckZvdW5kYXRpb24gfTtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1kZWZhdWx0LWV4cG9ydCBOZWVkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBNREMgV2ViIHYwLjQ0LjAgYW5kIGVhcmxpZXIuXG5leHBvcnQgZGVmYXVsdCBNRENGYWRpbmdUYWJJbmRpY2F0b3JGb3VuZGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmFkaW5nLWZvdW5kYXRpb24uanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5pbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE1EQ1RhYkluZGljYXRvckZvdW5kYXRpb24gfSBmcm9tICcuL2ZvdW5kYXRpb24nO1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IHN1YmNsYXNzIGlzIG5vdCBhIGJyYW5jaCBzdGF0ZW1lbnQgKi9cbnZhciBNRENTbGlkaW5nVGFiSW5kaWNhdG9yRm91bmRhdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTURDU2xpZGluZ1RhYkluZGljYXRvckZvdW5kYXRpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTURDU2xpZGluZ1RhYkluZGljYXRvckZvdW5kYXRpb24oKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgTURDU2xpZGluZ1RhYkluZGljYXRvckZvdW5kYXRpb24ucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24gKHByZXZpb3VzSW5kaWNhdG9yQ2xpZW50UmVjdCkge1xuICAgICAgICAvLyBFYXJseSBleGl0IGlmIG5vIGluZGljYXRvciBpcyBwcmVzZW50IHRvIGhhbmRsZSBjYXNlcyB3aGVyZSBhbiBpbmRpY2F0b3JcbiAgICAgICAgLy8gbWF5IGJlIGFjdGl2YXRlZCB3aXRob3V0IGEgcHJpb3IgaW5kaWNhdG9yIHN0YXRlXG4gICAgICAgIGlmICghcHJldmlvdXNJbmRpY2F0b3JDbGllbnRSZWN0KSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuYWRkQ2xhc3MoTURDVGFiSW5kaWNhdG9yRm91bmRhdGlvbi5jc3NDbGFzc2VzLkFDVElWRSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhpcyBhbmltYXRpb24gdXNlcyB0aGUgRkxJUCBhcHByb2FjaC4gWW91IGNhbiByZWFkIG1vcmUgYWJvdXQgaXQgYXQgdGhlIGxpbmsgYmVsb3c6XG4gICAgICAgIC8vIGh0dHBzOi8vYWVyb3R3aXN0LmNvbS9ibG9nL2ZsaXAteW91ci1hbmltYXRpb25zL1xuICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGRpbWVuc2lvbnMgYmFzZWQgb24gdGhlIGRpbWVuc2lvbnMgb2YgdGhlIHByZXZpb3VzIGluZGljYXRvclxuICAgICAgICB2YXIgY3VycmVudENsaWVudFJlY3QgPSB0aGlzLmNvbXB1dGVDb250ZW50Q2xpZW50UmVjdCgpO1xuICAgICAgICB2YXIgd2lkdGhEZWx0YSA9IHByZXZpb3VzSW5kaWNhdG9yQ2xpZW50UmVjdC53aWR0aCAvIGN1cnJlbnRDbGllbnRSZWN0LndpZHRoO1xuICAgICAgICB2YXIgeFBvc2l0aW9uID0gcHJldmlvdXNJbmRpY2F0b3JDbGllbnRSZWN0LmxlZnQgLSBjdXJyZW50Q2xpZW50UmVjdC5sZWZ0O1xuICAgICAgICB0aGlzLmFkYXB0ZXIuYWRkQ2xhc3MoTURDVGFiSW5kaWNhdG9yRm91bmRhdGlvbi5jc3NDbGFzc2VzLk5PX1RSQU5TSVRJT04pO1xuICAgICAgICB0aGlzLmFkYXB0ZXIuc2V0Q29udGVudFN0eWxlUHJvcGVydHkoJ3RyYW5zZm9ybScsIFwidHJhbnNsYXRlWChcIiArIHhQb3NpdGlvbiArIFwicHgpIHNjYWxlWChcIiArIHdpZHRoRGVsdGEgKyBcIilcIik7XG4gICAgICAgIC8vIEZvcmNlIHJlcGFpbnQgYmVmb3JlIHVwZGF0aW5nIGNsYXNzZXMgYW5kIHRyYW5zZm9ybSB0byBlbnN1cmUgdGhlIHRyYW5zZm9ybSBwcm9wZXJseSB0YWtlcyBlZmZlY3RcbiAgICAgICAgdGhpcy5jb21wdXRlQ29udGVudENsaWVudFJlY3QoKTtcbiAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKE1EQ1RhYkluZGljYXRvckZvdW5kYXRpb24uY3NzQ2xhc3Nlcy5OT19UUkFOU0lUSU9OKTtcbiAgICAgICAgdGhpcy5hZGFwdGVyLmFkZENsYXNzKE1EQ1RhYkluZGljYXRvckZvdW5kYXRpb24uY3NzQ2xhc3Nlcy5BQ1RJVkUpO1xuICAgICAgICB0aGlzLmFkYXB0ZXIuc2V0Q29udGVudFN0eWxlUHJvcGVydHkoJ3RyYW5zZm9ybScsICcnKTtcbiAgICB9O1xuICAgIE1EQ1NsaWRpbmdUYWJJbmRpY2F0b3JGb3VuZGF0aW9uLnByb3RvdHlwZS5kZWFjdGl2YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFkYXB0ZXIucmVtb3ZlQ2xhc3MoTURDVGFiSW5kaWNhdG9yRm91bmRhdGlvbi5jc3NDbGFzc2VzLkFDVElWRSk7XG4gICAgfTtcbiAgICByZXR1cm4gTURDU2xpZGluZ1RhYkluZGljYXRvckZvdW5kYXRpb247XG59KE1EQ1RhYkluZGljYXRvckZvdW5kYXRpb24pKTtcbmV4cG9ydCB7IE1EQ1NsaWRpbmdUYWJJbmRpY2F0b3JGb3VuZGF0aW9uIH07XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZGVmYXVsdC1leHBvcnQgTmVlZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGggTURDIFdlYiB2MC40NC4wIGFuZCBlYXJsaWVyLlxuZXhwb3J0IGRlZmF1bHQgTURDU2xpZGluZ1RhYkluZGljYXRvckZvdW5kYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zbGlkaW5nLWZvdW5kYXRpb24uanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5pbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE1EQ0NvbXBvbmVudCB9IGZyb20gJ0BtYXRlcmlhbC9iYXNlL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBNRENGYWRpbmdUYWJJbmRpY2F0b3JGb3VuZGF0aW9uIH0gZnJvbSAnLi9mYWRpbmctZm91bmRhdGlvbic7XG5pbXBvcnQgeyBNRENUYWJJbmRpY2F0b3JGb3VuZGF0aW9uIH0gZnJvbSAnLi9mb3VuZGF0aW9uJztcbmltcG9ydCB7IE1EQ1NsaWRpbmdUYWJJbmRpY2F0b3JGb3VuZGF0aW9uIH0gZnJvbSAnLi9zbGlkaW5nLWZvdW5kYXRpb24nO1xudmFyIE1EQ1RhYkluZGljYXRvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTURDVGFiSW5kaWNhdG9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1EQ1RhYkluZGljYXRvcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBNRENUYWJJbmRpY2F0b3IuYXR0YWNoVG8gPSBmdW5jdGlvbiAocm9vdCkge1xuICAgICAgICByZXR1cm4gbmV3IE1EQ1RhYkluZGljYXRvcihyb290KTtcbiAgICB9O1xuICAgIE1EQ1RhYkluZGljYXRvci5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jb250ZW50XyA9IHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKE1EQ1RhYkluZGljYXRvckZvdW5kYXRpb24uc3RyaW5ncy5DT05URU5UX1NFTEVDVE9SKTtcbiAgICB9O1xuICAgIE1EQ1RhYkluZGljYXRvci5wcm90b3R5cGUuY29tcHV0ZUNvbnRlbnRDbGllbnRSZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mb3VuZGF0aW9uLmNvbXB1dGVDb250ZW50Q2xpZW50UmVjdCgpO1xuICAgIH07XG4gICAgTURDVGFiSW5kaWNhdG9yLnByb3RvdHlwZS5nZXREZWZhdWx0Rm91bmRhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gRE8gTk9UIElOTElORSB0aGlzIHZhcmlhYmxlLiBGb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgZm91bmRhdGlvbnMgdGFrZSBhIFBhcnRpYWw8TURDRm9vQWRhcHRlcj4uXG4gICAgICAgIC8vIFRvIGVuc3VyZSB3ZSBkb24ndCBhY2NpZGVudGFsbHkgb21pdCBhbnkgbWV0aG9kcywgd2UgbmVlZCBhIHNlcGFyYXRlLCBzdHJvbmdseSB0eXBlZCBhZGFwdGVyIHZhcmlhYmxlLlxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgTWV0aG9kcyBzaG91bGQgYmUgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIGFkYXB0ZXIgaW50ZXJmYWNlLlxuICAgICAgICB2YXIgYWRhcHRlciA9IHtcbiAgICAgICAgICAgIGFkZENsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7IHJldHVybiBfdGhpcy5yb290LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTsgfSxcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7IHJldHVybiBfdGhpcy5yb290LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTsgfSxcbiAgICAgICAgICAgIGNvbXB1dGVDb250ZW50Q2xpZW50UmVjdDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuY29udGVudF8uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7IH0sXG4gICAgICAgICAgICBzZXRDb250ZW50U3R5bGVQcm9wZXJ0eTogZnVuY3Rpb24gKHByb3AsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNvbnRlbnRfLnN0eWxlLnNldFByb3BlcnR5KHByb3AsIHZhbHVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIC8vIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzXG4gICAgICAgIGlmICh0aGlzLnJvb3QuY2xhc3NMaXN0LmNvbnRhaW5zKE1EQ1RhYkluZGljYXRvckZvdW5kYXRpb24uY3NzQ2xhc3Nlcy5GQURFKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBNRENGYWRpbmdUYWJJbmRpY2F0b3JGb3VuZGF0aW9uKGFkYXB0ZXIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIERlZmF1bHQgdG8gdGhlIHNsaWRpbmcgaW5kaWNhdG9yXG4gICAgICAgIHJldHVybiBuZXcgTURDU2xpZGluZ1RhYkluZGljYXRvckZvdW5kYXRpb24oYWRhcHRlcik7XG4gICAgfTtcbiAgICBNRENUYWJJbmRpY2F0b3IucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24gKHByZXZpb3VzSW5kaWNhdG9yQ2xpZW50UmVjdCkge1xuICAgICAgICB0aGlzLmZvdW5kYXRpb24uYWN0aXZhdGUocHJldmlvdXNJbmRpY2F0b3JDbGllbnRSZWN0KTtcbiAgICB9O1xuICAgIE1EQ1RhYkluZGljYXRvci5wcm90b3R5cGUuZGVhY3RpdmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5mb3VuZGF0aW9uLmRlYWN0aXZhdGUoKTtcbiAgICB9O1xuICAgIHJldHVybiBNRENUYWJJbmRpY2F0b3I7XG59KE1EQ0NvbXBvbmVudCkpO1xuZXhwb3J0IHsgTURDVGFiSW5kaWNhdG9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wb25lbnQuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG52YXIgY3NzQ2xhc3NlcyA9IHtcbiAgICBBQ1RJVkU6ICdtZGMtdGFiLS1hY3RpdmUnLFxufTtcbnZhciBzdHJpbmdzID0ge1xuICAgIEFSSUFfU0VMRUNURUQ6ICdhcmlhLXNlbGVjdGVkJyxcbiAgICBDT05URU5UX1NFTEVDVE9SOiAnLm1kYy10YWJfX2NvbnRlbnQnLFxuICAgIElOVEVSQUNURURfRVZFTlQ6ICdNRENUYWI6aW50ZXJhY3RlZCcsXG4gICAgUklQUExFX1NFTEVDVE9SOiAnLm1kYy10YWJfX3JpcHBsZScsXG4gICAgVEFCSU5ERVg6ICd0YWJJbmRleCcsXG4gICAgVEFCX0lORElDQVRPUl9TRUxFQ1RPUjogJy5tZGMtdGFiLWluZGljYXRvcicsXG59O1xuZXhwb3J0IHsgY3NzQ2xhc3Nlcywgc3RyaW5ncywgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbmltcG9ydCB7IF9fYXNzaWduLCBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE1EQ0ZvdW5kYXRpb24gfSBmcm9tICdAbWF0ZXJpYWwvYmFzZS9mb3VuZGF0aW9uJztcbmltcG9ydCB7IGNzc0NsYXNzZXMsIHN0cmluZ3MgfSBmcm9tICcuL2NvbnN0YW50cyc7XG52YXIgTURDVGFiRm91bmRhdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTURDVGFiRm91bmRhdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNRENUYWJGb3VuZGF0aW9uKGFkYXB0ZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgX19hc3NpZ24oX19hc3NpZ24oe30sIE1EQ1RhYkZvdW5kYXRpb24uZGVmYXVsdEFkYXB0ZXIpLCBhZGFwdGVyKSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZm9jdXNPbkFjdGl2YXRlXyA9IHRydWU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1RhYkZvdW5kYXRpb24sIFwiY3NzQ2xhc3Nlc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNzc0NsYXNzZXM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENUYWJGb3VuZGF0aW9uLCBcInN0cmluZ3NcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVGFiRm91bmRhdGlvbiwgXCJkZWZhdWx0QWRhcHRlclwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzIE1ldGhvZHMgc2hvdWxkIGJlIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSBhZGFwdGVyIGludGVyZmFjZS5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGhhc0NsYXNzOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfSxcbiAgICAgICAgICAgICAgICBzZXRBdHRyOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgYWN0aXZhdGVJbmRpY2F0b3I6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBkZWFjdGl2YXRlSW5kaWNhdG9yOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgbm90aWZ5SW50ZXJhY3RlZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGdldE9mZnNldExlZnQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDA7IH0sXG4gICAgICAgICAgICAgICAgZ2V0T2Zmc2V0V2lkdGg6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDA7IH0sXG4gICAgICAgICAgICAgICAgZ2V0Q29udGVudE9mZnNldExlZnQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDA7IH0sXG4gICAgICAgICAgICAgICAgZ2V0Q29udGVudE9mZnNldFdpZHRoOiBmdW5jdGlvbiAoKSB7IHJldHVybiAwOyB9LFxuICAgICAgICAgICAgICAgIGZvY3VzOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXNcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgTURDVGFiRm91bmRhdGlvbi5wcm90b3R5cGUuaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIEl0J3MgdXAgdG8gdGhlIHBhcmVudCBjb21wb25lbnQgdG8ga2VlcCB0cmFjayBvZiB0aGUgYWN0aXZlIFRhYiBhbmRcbiAgICAgICAgLy8gZW5zdXJlIHdlIGRvbid0IGFjdGl2YXRlIGEgVGFiIHRoYXQncyBhbHJlYWR5IGFjdGl2ZS5cbiAgICAgICAgdGhpcy5hZGFwdGVyLm5vdGlmeUludGVyYWN0ZWQoKTtcbiAgICB9O1xuICAgIE1EQ1RhYkZvdW5kYXRpb24ucHJvdG90eXBlLmlzQWN0aXZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmhhc0NsYXNzKGNzc0NsYXNzZXMuQUNUSVZFKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldHMgd2hldGhlciB0aGUgdGFiIHNob3VsZCBmb2N1cyBpdHNlbGYgd2hlbiBhY3RpdmF0ZWRcbiAgICAgKi9cbiAgICBNRENUYWJGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRGb2N1c09uQWN0aXZhdGUgPSBmdW5jdGlvbiAoZm9jdXNPbkFjdGl2YXRlKSB7XG4gICAgICAgIHRoaXMuZm9jdXNPbkFjdGl2YXRlXyA9IGZvY3VzT25BY3RpdmF0ZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFjdGl2YXRlcyB0aGUgVGFiXG4gICAgICovXG4gICAgTURDVGFiRm91bmRhdGlvbi5wcm90b3R5cGUuYWN0aXZhdGUgPSBmdW5jdGlvbiAocHJldmlvdXNJbmRpY2F0b3JDbGllbnRSZWN0KSB7XG4gICAgICAgIHRoaXMuYWRhcHRlci5hZGRDbGFzcyhjc3NDbGFzc2VzLkFDVElWRSk7XG4gICAgICAgIHRoaXMuYWRhcHRlci5zZXRBdHRyKHN0cmluZ3MuQVJJQV9TRUxFQ1RFRCwgJ3RydWUnKTtcbiAgICAgICAgdGhpcy5hZGFwdGVyLnNldEF0dHIoc3RyaW5ncy5UQUJJTkRFWCwgJzAnKTtcbiAgICAgICAgdGhpcy5hZGFwdGVyLmFjdGl2YXRlSW5kaWNhdG9yKHByZXZpb3VzSW5kaWNhdG9yQ2xpZW50UmVjdCk7XG4gICAgICAgIGlmICh0aGlzLmZvY3VzT25BY3RpdmF0ZV8pIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5mb2N1cygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEZWFjdGl2YXRlcyB0aGUgVGFiXG4gICAgICovXG4gICAgTURDVGFiRm91bmRhdGlvbi5wcm90b3R5cGUuZGVhY3RpdmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRWFybHkgZXhpdFxuICAgICAgICBpZiAoIXRoaXMuaXNBY3RpdmUoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWRhcHRlci5yZW1vdmVDbGFzcyhjc3NDbGFzc2VzLkFDVElWRSk7XG4gICAgICAgIHRoaXMuYWRhcHRlci5zZXRBdHRyKHN0cmluZ3MuQVJJQV9TRUxFQ1RFRCwgJ2ZhbHNlJyk7XG4gICAgICAgIHRoaXMuYWRhcHRlci5zZXRBdHRyKHN0cmluZ3MuVEFCSU5ERVgsICctMScpO1xuICAgICAgICB0aGlzLmFkYXB0ZXIuZGVhY3RpdmF0ZUluZGljYXRvcigpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZGltZW5zaW9ucyBvZiB0aGUgVGFiXG4gICAgICovXG4gICAgTURDVGFiRm91bmRhdGlvbi5wcm90b3R5cGUuY29tcHV0ZURpbWVuc2lvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByb290V2lkdGggPSB0aGlzLmFkYXB0ZXIuZ2V0T2Zmc2V0V2lkdGgoKTtcbiAgICAgICAgdmFyIHJvb3RMZWZ0ID0gdGhpcy5hZGFwdGVyLmdldE9mZnNldExlZnQoKTtcbiAgICAgICAgdmFyIGNvbnRlbnRXaWR0aCA9IHRoaXMuYWRhcHRlci5nZXRDb250ZW50T2Zmc2V0V2lkdGgoKTtcbiAgICAgICAgdmFyIGNvbnRlbnRMZWZ0ID0gdGhpcy5hZGFwdGVyLmdldENvbnRlbnRPZmZzZXRMZWZ0KCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb250ZW50TGVmdDogcm9vdExlZnQgKyBjb250ZW50TGVmdCxcbiAgICAgICAgICAgIGNvbnRlbnRSaWdodDogcm9vdExlZnQgKyBjb250ZW50TGVmdCArIGNvbnRlbnRXaWR0aCxcbiAgICAgICAgICAgIHJvb3RMZWZ0OiByb290TGVmdCxcbiAgICAgICAgICAgIHJvb3RSaWdodDogcm9vdExlZnQgKyByb290V2lkdGgsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gTURDVGFiRm91bmRhdGlvbjtcbn0oTURDRm91bmRhdGlvbikpO1xuZXhwb3J0IHsgTURDVGFiRm91bmRhdGlvbiB9O1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWRlZmF1bHQtZXhwb3J0IE5lZWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIE1EQyBXZWIgdjAuNDQuMCBhbmQgZWFybGllci5cbmV4cG9ydCBkZWZhdWx0IE1EQ1RhYkZvdW5kYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3VuZGF0aW9uLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuaW1wb3J0IHsgX19hc3NpZ24sIF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgTURDQ29tcG9uZW50IH0gZnJvbSAnQG1hdGVyaWFsL2Jhc2UvY29tcG9uZW50JztcbmltcG9ydCB7IE1EQ1JpcHBsZSB9IGZyb20gJ0BtYXRlcmlhbC9yaXBwbGUvY29tcG9uZW50JztcbmltcG9ydCB7IE1EQ1JpcHBsZUZvdW5kYXRpb24gfSBmcm9tICdAbWF0ZXJpYWwvcmlwcGxlL2ZvdW5kYXRpb24nO1xuaW1wb3J0IHsgTURDVGFiSW5kaWNhdG9yIH0gZnJvbSAnQG1hdGVyaWFsL3RhYi1pbmRpY2F0b3IvY29tcG9uZW50JztcbmltcG9ydCB7IE1EQ1RhYkZvdW5kYXRpb24gfSBmcm9tICcuL2ZvdW5kYXRpb24nO1xudmFyIE1EQ1RhYiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTURDVGFiLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1EQ1RhYigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBNRENUYWIuYXR0YWNoVG8gPSBmdW5jdGlvbiAocm9vdCkge1xuICAgICAgICByZXR1cm4gbmV3IE1EQ1RhYihyb290KTtcbiAgICB9O1xuICAgIE1EQ1RhYi5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChyaXBwbGVGYWN0b3J5LCB0YWJJbmRpY2F0b3JGYWN0b3J5KSB7XG4gICAgICAgIGlmIChyaXBwbGVGYWN0b3J5ID09PSB2b2lkIDApIHsgcmlwcGxlRmFjdG9yeSA9IGZ1bmN0aW9uIChlbCwgZm91bmRhdGlvbikgeyByZXR1cm4gbmV3IE1EQ1JpcHBsZShlbCwgZm91bmRhdGlvbik7IH07IH1cbiAgICAgICAgaWYgKHRhYkluZGljYXRvckZhY3RvcnkgPT09IHZvaWQgMCkgeyB0YWJJbmRpY2F0b3JGYWN0b3J5ID0gZnVuY3Rpb24gKGVsKSB7IHJldHVybiBuZXcgTURDVGFiSW5kaWNhdG9yKGVsKTsgfTsgfVxuICAgICAgICB0aGlzLmlkID0gdGhpcy5yb290LmlkO1xuICAgICAgICB2YXIgcmlwcGxlU3VyZmFjZSA9IHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKE1EQ1RhYkZvdW5kYXRpb24uc3RyaW5ncy5SSVBQTEVfU0VMRUNUT1IpO1xuICAgICAgICB2YXIgcmlwcGxlQWRhcHRlciA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBNRENSaXBwbGUuY3JlYXRlQWRhcHRlcih0aGlzKSksIHsgYWRkQ2xhc3M6IGZ1bmN0aW9uIChjbGFzc05hbWUpIHsgcmV0dXJuIHJpcHBsZVN1cmZhY2UuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpOyB9LCByZW1vdmVDbGFzczogZnVuY3Rpb24gKGNsYXNzTmFtZSkgeyByZXR1cm4gcmlwcGxlU3VyZmFjZS5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7IH0sIHVwZGF0ZUNzc1ZhcmlhYmxlOiBmdW5jdGlvbiAodmFyTmFtZSwgdmFsdWUpIHsgcmV0dXJuIHJpcHBsZVN1cmZhY2Uuc3R5bGUuc2V0UHJvcGVydHkodmFyTmFtZSwgdmFsdWUpOyB9IH0pO1xuICAgICAgICB2YXIgcmlwcGxlRm91bmRhdGlvbiA9IG5ldyBNRENSaXBwbGVGb3VuZGF0aW9uKHJpcHBsZUFkYXB0ZXIpO1xuICAgICAgICB0aGlzLnJpcHBsZV8gPSByaXBwbGVGYWN0b3J5KHRoaXMucm9vdCwgcmlwcGxlRm91bmRhdGlvbik7XG4gICAgICAgIHZhciB0YWJJbmRpY2F0b3JFbGVtZW50ID0gdGhpcy5yb290LnF1ZXJ5U2VsZWN0b3IoTURDVGFiRm91bmRhdGlvbi5zdHJpbmdzLlRBQl9JTkRJQ0FUT1JfU0VMRUNUT1IpO1xuICAgICAgICB0aGlzLnRhYkluZGljYXRvcl8gPSB0YWJJbmRpY2F0b3JGYWN0b3J5KHRhYkluZGljYXRvckVsZW1lbnQpO1xuICAgICAgICB0aGlzLmNvbnRlbnRfID0gdGhpcy5yb290LnF1ZXJ5U2VsZWN0b3IoTURDVGFiRm91bmRhdGlvbi5zdHJpbmdzLkNPTlRFTlRfU0VMRUNUT1IpO1xuICAgIH07XG4gICAgTURDVGFiLnByb3RvdHlwZS5pbml0aWFsU3luY1dpdGhET00gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuaGFuZGxlQ2xpY2tfID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuZm91bmRhdGlvbi5oYW5kbGVDbGljaygpOyB9O1xuICAgICAgICB0aGlzLmxpc3RlbignY2xpY2snLCB0aGlzLmhhbmRsZUNsaWNrXyk7XG4gICAgfTtcbiAgICBNRENUYWIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudW5saXN0ZW4oJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGlja18pO1xuICAgICAgICB0aGlzLnJpcHBsZV8uZGVzdHJveSgpO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIE1EQ1RhYi5wcm90b3R5cGUuZ2V0RGVmYXVsdEZvdW5kYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIC8vIERPIE5PVCBJTkxJTkUgdGhpcyB2YXJpYWJsZS4gRm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIGZvdW5kYXRpb25zIHRha2UgYSBQYXJ0aWFsPE1EQ0Zvb0FkYXB0ZXI+LlxuICAgICAgICAvLyBUbyBlbnN1cmUgd2UgZG9uJ3QgYWNjaWRlbnRhbGx5IG9taXQgYW55IG1ldGhvZHMsIHdlIG5lZWQgYSBzZXBhcmF0ZSwgc3Ryb25nbHkgdHlwZWQgYWRhcHRlciB2YXJpYWJsZS5cbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzIE1ldGhvZHMgc2hvdWxkIGJlIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSBhZGFwdGVyIGludGVyZmFjZS5cbiAgICAgICAgdmFyIGFkYXB0ZXIgPSB7XG4gICAgICAgICAgICBzZXRBdHRyOiBmdW5jdGlvbiAoYXR0ciwgdmFsdWUpIHsgcmV0dXJuIF90aGlzLnJvb3Quc2V0QXR0cmlidXRlKGF0dHIsIHZhbHVlKTsgfSxcbiAgICAgICAgICAgIGFkZENsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7IHJldHVybiBfdGhpcy5yb290LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTsgfSxcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7IHJldHVybiBfdGhpcy5yb290LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTsgfSxcbiAgICAgICAgICAgIGhhc0NsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7IHJldHVybiBfdGhpcy5yb290LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpOyB9LFxuICAgICAgICAgICAgYWN0aXZhdGVJbmRpY2F0b3I6IGZ1bmN0aW9uIChwcmV2aW91c0luZGljYXRvckNsaWVudFJlY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMudGFiSW5kaWNhdG9yXy5hY3RpdmF0ZShwcmV2aW91c0luZGljYXRvckNsaWVudFJlY3QpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlYWN0aXZhdGVJbmRpY2F0b3I6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnRhYkluZGljYXRvcl8uZGVhY3RpdmF0ZSgpOyB9LFxuICAgICAgICAgICAgbm90aWZ5SW50ZXJhY3RlZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuZW1pdChNRENUYWJGb3VuZGF0aW9uLnN0cmluZ3MuSU5URVJBQ1RFRF9FVkVOVCwgeyB0YWJJZDogX3RoaXMuaWQgfSwgdHJ1ZSAvKiBidWJibGUgKi8pOyB9LFxuICAgICAgICAgICAgZ2V0T2Zmc2V0TGVmdDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMucm9vdC5vZmZzZXRMZWZ0OyB9LFxuICAgICAgICAgICAgZ2V0T2Zmc2V0V2lkdGg6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnJvb3Qub2Zmc2V0V2lkdGg7IH0sXG4gICAgICAgICAgICBnZXRDb250ZW50T2Zmc2V0TGVmdDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuY29udGVudF8ub2Zmc2V0TGVmdDsgfSxcbiAgICAgICAgICAgIGdldENvbnRlbnRPZmZzZXRXaWR0aDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuY29udGVudF8ub2Zmc2V0V2lkdGg7IH0sXG4gICAgICAgICAgICBmb2N1czogZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMucm9vdC5mb2N1cygpOyB9LFxuICAgICAgICB9O1xuICAgICAgICAvLyB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5c1xuICAgICAgICByZXR1cm4gbmV3IE1EQ1RhYkZvdW5kYXRpb24oYWRhcHRlcik7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVGFiLnByb3RvdHlwZSwgXCJhY3RpdmVcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0dGVyIGZvciB0aGUgYWN0aXZlIHN0YXRlIG9mIHRoZSB0YWJcbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm91bmRhdGlvbi5pc0FjdGl2ZSgpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVGFiLnByb3RvdHlwZSwgXCJmb2N1c09uQWN0aXZhdGVcIiwge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChmb2N1c09uQWN0aXZhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuZm91bmRhdGlvbi5zZXRGb2N1c09uQWN0aXZhdGUoZm9jdXNPbkFjdGl2YXRlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogQWN0aXZhdGVzIHRoZSB0YWJcbiAgICAgKi9cbiAgICBNRENUYWIucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24gKGNvbXB1dGVJbmRpY2F0b3JDbGllbnRSZWN0KSB7XG4gICAgICAgIHRoaXMuZm91bmRhdGlvbi5hY3RpdmF0ZShjb21wdXRlSW5kaWNhdG9yQ2xpZW50UmVjdCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEZWFjdGl2YXRlcyB0aGUgdGFiXG4gICAgICovXG4gICAgTURDVGFiLnByb3RvdHlwZS5kZWFjdGl2YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmZvdW5kYXRpb24uZGVhY3RpdmF0ZSgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaW5kaWNhdG9yJ3MgY2xpZW50IHJlY3RcbiAgICAgKi9cbiAgICBNRENUYWIucHJvdG90eXBlLmNvbXB1dGVJbmRpY2F0b3JDbGllbnRSZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50YWJJbmRpY2F0b3JfLmNvbXB1dGVDb250ZW50Q2xpZW50UmVjdCgpO1xuICAgIH07XG4gICAgTURDVGFiLnByb3RvdHlwZS5jb21wdXRlRGltZW5zaW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm91bmRhdGlvbi5jb21wdXRlRGltZW5zaW9ucygpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRm9jdXNlcyB0aGUgdGFiXG4gICAgICovXG4gICAgTURDVGFiLnByb3RvdHlwZS5mb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5yb290LmZvY3VzKCk7XG4gICAgfTtcbiAgICByZXR1cm4gTURDVGFiO1xufShNRENDb21wb25lbnQpKTtcbmV4cG9ydCB7IE1EQ1RhYiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcG9uZW50LmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xudmFyIHN0cmluZ3MgPSB7XG4gICAgQVJST1dfTEVGVF9LRVk6ICdBcnJvd0xlZnQnLFxuICAgIEFSUk9XX1JJR0hUX0tFWTogJ0Fycm93UmlnaHQnLFxuICAgIEVORF9LRVk6ICdFbmQnLFxuICAgIEVOVEVSX0tFWTogJ0VudGVyJyxcbiAgICBIT01FX0tFWTogJ0hvbWUnLFxuICAgIFNQQUNFX0tFWTogJ1NwYWNlJyxcbiAgICBUQUJfQUNUSVZBVEVEX0VWRU5UOiAnTURDVGFiQmFyOmFjdGl2YXRlZCcsXG4gICAgVEFCX1NDUk9MTEVSX1NFTEVDVE9SOiAnLm1kYy10YWItc2Nyb2xsZXInLFxuICAgIFRBQl9TRUxFQ1RPUjogJy5tZGMtdGFiJyxcbn07XG52YXIgbnVtYmVycyA9IHtcbiAgICBBUlJPV19MRUZUX0tFWUNPREU6IDM3LFxuICAgIEFSUk9XX1JJR0hUX0tFWUNPREU6IDM5LFxuICAgIEVORF9LRVlDT0RFOiAzNSxcbiAgICBFTlRFUl9LRVlDT0RFOiAxMyxcbiAgICBFWFRSQV9TQ1JPTExfQU1PVU5UOiAyMCxcbiAgICBIT01FX0tFWUNPREU6IDM2LFxuICAgIFNQQUNFX0tFWUNPREU6IDMyLFxufTtcbmV4cG9ydCB7IG51bWJlcnMsIHN0cmluZ3MgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbmltcG9ydCB7IF9fYXNzaWduLCBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE1EQ0ZvdW5kYXRpb24gfSBmcm9tICdAbWF0ZXJpYWwvYmFzZS9mb3VuZGF0aW9uJztcbmltcG9ydCB7IG51bWJlcnMsIHN0cmluZ3MgfSBmcm9tICcuL2NvbnN0YW50cyc7XG52YXIgQUNDRVBUQUJMRV9LRVlTID0gbmV3IFNldCgpO1xuLy8gSUUxMSBoYXMgbm8gc3VwcG9ydCBmb3IgbmV3IFNldCB3aXRoIGl0ZXJhYmxlIHNvIHdlIG5lZWQgdG8gaW5pdGlhbGl6ZSB0aGlzIGJ5IGhhbmRcbkFDQ0VQVEFCTEVfS0VZUy5hZGQoc3RyaW5ncy5BUlJPV19MRUZUX0tFWSk7XG5BQ0NFUFRBQkxFX0tFWVMuYWRkKHN0cmluZ3MuQVJST1dfUklHSFRfS0VZKTtcbkFDQ0VQVEFCTEVfS0VZUy5hZGQoc3RyaW5ncy5FTkRfS0VZKTtcbkFDQ0VQVEFCTEVfS0VZUy5hZGQoc3RyaW5ncy5IT01FX0tFWSk7XG5BQ0NFUFRBQkxFX0tFWVMuYWRkKHN0cmluZ3MuRU5URVJfS0VZKTtcbkFDQ0VQVEFCTEVfS0VZUy5hZGQoc3RyaW5ncy5TUEFDRV9LRVkpO1xudmFyIEtFWUNPREVfTUFQID0gbmV3IE1hcCgpO1xuLy8gSUUxMSBoYXMgbm8gc3VwcG9ydCBmb3IgbmV3IE1hcCB3aXRoIGl0ZXJhYmxlIHNvIHdlIG5lZWQgdG8gaW5pdGlhbGl6ZSB0aGlzIGJ5IGhhbmRcbktFWUNPREVfTUFQLnNldChudW1iZXJzLkFSUk9XX0xFRlRfS0VZQ09ERSwgc3RyaW5ncy5BUlJPV19MRUZUX0tFWSk7XG5LRVlDT0RFX01BUC5zZXQobnVtYmVycy5BUlJPV19SSUdIVF9LRVlDT0RFLCBzdHJpbmdzLkFSUk9XX1JJR0hUX0tFWSk7XG5LRVlDT0RFX01BUC5zZXQobnVtYmVycy5FTkRfS0VZQ09ERSwgc3RyaW5ncy5FTkRfS0VZKTtcbktFWUNPREVfTUFQLnNldChudW1iZXJzLkhPTUVfS0VZQ09ERSwgc3RyaW5ncy5IT01FX0tFWSk7XG5LRVlDT0RFX01BUC5zZXQobnVtYmVycy5FTlRFUl9LRVlDT0RFLCBzdHJpbmdzLkVOVEVSX0tFWSk7XG5LRVlDT0RFX01BUC5zZXQobnVtYmVycy5TUEFDRV9LRVlDT0RFLCBzdHJpbmdzLlNQQUNFX0tFWSk7XG52YXIgTURDVGFiQmFyRm91bmRhdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTURDVGFiQmFyRm91bmRhdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNRENUYWJCYXJGb3VuZGF0aW9uKGFkYXB0ZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgX19hc3NpZ24oX19hc3NpZ24oe30sIE1EQ1RhYkJhckZvdW5kYXRpb24uZGVmYXVsdEFkYXB0ZXIpLCBhZGFwdGVyKSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMudXNlQXV0b21hdGljQWN0aXZhdGlvbl8gPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVGFiQmFyRm91bmRhdGlvbiwgXCJzdHJpbmdzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5ncztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1RhYkJhckZvdW5kYXRpb24sIFwibnVtYmVyc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlcnM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENUYWJCYXJGb3VuZGF0aW9uLCBcImRlZmF1bHRBZGFwdGVyXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgTWV0aG9kcyBzaG91bGQgYmUgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIGFkYXB0ZXIgaW50ZXJmYWNlLlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzY3JvbGxUbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGluY3JlbWVudFNjcm9sbDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGdldFNjcm9sbFBvc2l0aW9uOiBmdW5jdGlvbiAoKSB7IHJldHVybiAwOyB9LFxuICAgICAgICAgICAgICAgIGdldFNjcm9sbENvbnRlbnRXaWR0aDogZnVuY3Rpb24gKCkgeyByZXR1cm4gMDsgfSxcbiAgICAgICAgICAgICAgICBnZXRPZmZzZXRXaWR0aDogZnVuY3Rpb24gKCkgeyByZXR1cm4gMDsgfSxcbiAgICAgICAgICAgICAgICBpc1JUTDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH0sXG4gICAgICAgICAgICAgICAgc2V0QWN0aXZlVGFiOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgYWN0aXZhdGVUYWJBdEluZGV4OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgZGVhY3RpdmF0ZVRhYkF0SW5kZXg6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBmb2N1c1RhYkF0SW5kZXg6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBnZXRUYWJJbmRpY2F0b3JDbGllbnRSZWN0QXRJbmRleDogZnVuY3Rpb24gKCkgeyByZXR1cm4gKHsgdG9wOiAwLCByaWdodDogMCwgYm90dG9tOiAwLCBsZWZ0OiAwLCB3aWR0aDogMCwgaGVpZ2h0OiAwIH0pOyB9LFxuICAgICAgICAgICAgICAgIGdldFRhYkRpbWVuc2lvbnNBdEluZGV4OiBmdW5jdGlvbiAoKSB7IHJldHVybiAoeyByb290TGVmdDogMCwgcm9vdFJpZ2h0OiAwLCBjb250ZW50TGVmdDogMCwgY29udGVudFJpZ2h0OiAwIH0pOyB9LFxuICAgICAgICAgICAgICAgIGdldFByZXZpb3VzQWN0aXZlVGFiSW5kZXg6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIC0xOyB9LFxuICAgICAgICAgICAgICAgIGdldEZvY3VzZWRUYWJJbmRleDogZnVuY3Rpb24gKCkgeyByZXR1cm4gLTE7IH0sXG4gICAgICAgICAgICAgICAgZ2V0SW5kZXhPZlRhYkJ5SWQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIC0xOyB9LFxuICAgICAgICAgICAgICAgIGdldFRhYkxpc3RMZW5ndGg6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDA7IH0sXG4gICAgICAgICAgICAgICAgbm90aWZ5VGFiQWN0aXZhdGVkOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXNcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogU3dpdGNoZXMgYmV0d2VlbiBhdXRvbWF0aWMgYW5kIG1hbnVhbCBhY3RpdmF0aW9uIG1vZGVzLlxuICAgICAqIFNlZSBodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtcHJhY3RpY2VzLyN0YWJwYW5lbCBmb3IgZXhhbXBsZXMuXG4gICAgICovXG4gICAgTURDVGFiQmFyRm91bmRhdGlvbi5wcm90b3R5cGUuc2V0VXNlQXV0b21hdGljQWN0aXZhdGlvbiA9IGZ1bmN0aW9uICh1c2VBdXRvbWF0aWNBY3RpdmF0aW9uKSB7XG4gICAgICAgIHRoaXMudXNlQXV0b21hdGljQWN0aXZhdGlvbl8gPSB1c2VBdXRvbWF0aWNBY3RpdmF0aW9uO1xuICAgIH07XG4gICAgTURDVGFiQmFyRm91bmRhdGlvbi5wcm90b3R5cGUuYWN0aXZhdGVUYWIgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgdmFyIHByZXZpb3VzQWN0aXZlSW5kZXggPSB0aGlzLmFkYXB0ZXIuZ2V0UHJldmlvdXNBY3RpdmVUYWJJbmRleCgpO1xuICAgICAgICBpZiAoIXRoaXMuaW5kZXhJc0luUmFuZ2VfKGluZGV4KSB8fCBpbmRleCA9PT0gcHJldmlvdXNBY3RpdmVJbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmV2aW91c0NsaWVudFJlY3Q7XG4gICAgICAgIGlmIChwcmV2aW91c0FjdGl2ZUluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLmRlYWN0aXZhdGVUYWJBdEluZGV4KHByZXZpb3VzQWN0aXZlSW5kZXgpO1xuICAgICAgICAgICAgcHJldmlvdXNDbGllbnRSZWN0ID1cbiAgICAgICAgICAgICAgICB0aGlzLmFkYXB0ZXIuZ2V0VGFiSW5kaWNhdG9yQ2xpZW50UmVjdEF0SW5kZXgocHJldmlvdXNBY3RpdmVJbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZGFwdGVyLmFjdGl2YXRlVGFiQXRJbmRleChpbmRleCwgcHJldmlvdXNDbGllbnRSZWN0KTtcbiAgICAgICAgdGhpcy5zY3JvbGxJbnRvVmlldyhpbmRleCk7XG4gICAgICAgIHRoaXMuYWRhcHRlci5ub3RpZnlUYWJBY3RpdmF0ZWQoaW5kZXgpO1xuICAgIH07XG4gICAgTURDVGFiQmFyRm91bmRhdGlvbi5wcm90b3R5cGUuaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgLy8gR2V0IHRoZSBrZXkgZnJvbSB0aGUgZXZlbnRcbiAgICAgICAgdmFyIGtleSA9IHRoaXMuZ2V0S2V5RnJvbUV2ZW50XyhldnQpO1xuICAgICAgICAvLyBFYXJseSBleGl0IGlmIHRoZSBldmVudCBrZXkgaXNuJ3Qgb25lIG9mIHRoZSBrZXlib2FyZCBuYXZpZ2F0aW9uIGtleXNcbiAgICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gUHJldmVudCBkZWZhdWx0IGJlaGF2aW9yIGZvciBtb3ZlbWVudCBrZXlzLCBidXQgbm90IGZvciBhY3RpdmF0aW9uIGtleXMsIHNpbmNlIDphY3RpdmUgaXMgdXNlZCB0byBhcHBseSByaXBwbGVcbiAgICAgICAgaWYgKCF0aGlzLmlzQWN0aXZhdGlvbktleV8oa2V5KSkge1xuICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudXNlQXV0b21hdGljQWN0aXZhdGlvbl8pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzQWN0aXZhdGlvbktleV8oa2V5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuZGV0ZXJtaW5lVGFyZ2V0RnJvbUtleV8odGhpcy5hZGFwdGVyLmdldFByZXZpb3VzQWN0aXZlVGFiSW5kZXgoKSwga2V5KTtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5zZXRBY3RpdmVUYWIoaW5kZXgpO1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxJbnRvVmlldyhpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgZm9jdXNlZFRhYkluZGV4ID0gdGhpcy5hZGFwdGVyLmdldEZvY3VzZWRUYWJJbmRleCgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNBY3RpdmF0aW9uS2V5XyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnNldEFjdGl2ZVRhYihmb2N1c2VkVGFiSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5kZXRlcm1pbmVUYXJnZXRGcm9tS2V5Xyhmb2N1c2VkVGFiSW5kZXgsIGtleSk7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGFwdGVyLmZvY3VzVGFiQXRJbmRleChpbmRleCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxJbnRvVmlldyhpbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgdGhlIE1EQ1RhYjppbnRlcmFjdGVkIGV2ZW50XG4gICAgICovXG4gICAgTURDVGFiQmFyRm91bmRhdGlvbi5wcm90b3R5cGUuaGFuZGxlVGFiSW50ZXJhY3Rpb24gPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIHRoaXMuYWRhcHRlci5zZXRBY3RpdmVUYWIodGhpcy5hZGFwdGVyLmdldEluZGV4T2ZUYWJCeUlkKGV2dC5kZXRhaWwudGFiSWQpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNjcm9sbHMgdGhlIHRhYiBhdCB0aGUgZ2l2ZW4gaW5kZXggaW50byB2aWV3XG4gICAgICogQHBhcmFtIGluZGV4IFRoZSB0YWIgaW5kZXggdG8gbWFrZSB2aXNpYmxlXG4gICAgICovXG4gICAgTURDVGFiQmFyRm91bmRhdGlvbi5wcm90b3R5cGUuc2Nyb2xsSW50b1ZpZXcgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgLy8gRWFybHkgZXhpdCBpZiB0aGUgaW5kZXggaXMgb3V0IG9mIHJhbmdlXG4gICAgICAgIGlmICghdGhpcy5pbmRleElzSW5SYW5nZV8oaW5kZXgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWx3YXlzIHNjcm9sbCB0byAwIGlmIHNjcm9sbGluZyB0byB0aGUgMHRoIGluZGV4XG4gICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRhcHRlci5zY3JvbGxUbygwKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBbHdheXMgc2Nyb2xsIHRvIHRoZSBtYXggdmFsdWUgaWYgc2Nyb2xsaW5nIHRvIHRoZSBOdGggaW5kZXhcbiAgICAgICAgLy8gTURDVGFiU2Nyb2xsZXIuc2Nyb2xsVG8oKSB3aWxsIG5ldmVyIHNjcm9sbCBwYXN0IHRoZSBtYXggcG9zc2libGUgdmFsdWVcbiAgICAgICAgaWYgKGluZGV4ID09PSB0aGlzLmFkYXB0ZXIuZ2V0VGFiTGlzdExlbmd0aCgpIC0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRhcHRlci5zY3JvbGxUbyh0aGlzLmFkYXB0ZXIuZ2V0U2Nyb2xsQ29udGVudFdpZHRoKCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzUlRMXygpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zY3JvbGxJbnRvVmlld1JUTF8oaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2Nyb2xsSW50b1ZpZXdfKGluZGV4KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFByaXZhdGUgbWV0aG9kIGZvciBkZXRlcm1pbmluZyB0aGUgaW5kZXggb2YgdGhlIGRlc3RpbmF0aW9uIHRhYiBiYXNlZCBvbiB3aGF0IGtleSB3YXMgcHJlc3NlZFxuICAgICAqIEBwYXJhbSBvcmlnaW4gVGhlIG9yaWdpbmFsIGluZGV4IGZyb20gd2hpY2ggdG8gZGV0ZXJtaW5lIHRoZSBkZXN0aW5hdGlvblxuICAgICAqIEBwYXJhbSBrZXkgVGhlIG5hbWUgb2YgdGhlIGtleVxuICAgICAqL1xuICAgIE1EQ1RhYkJhckZvdW5kYXRpb24ucHJvdG90eXBlLmRldGVybWluZVRhcmdldEZyb21LZXlfID0gZnVuY3Rpb24gKG9yaWdpbiwga2V5KSB7XG4gICAgICAgIHZhciBpc1JUTCA9IHRoaXMuaXNSVExfKCk7XG4gICAgICAgIHZhciBtYXhJbmRleCA9IHRoaXMuYWRhcHRlci5nZXRUYWJMaXN0TGVuZ3RoKCkgLSAxO1xuICAgICAgICB2YXIgc2hvdWxkR29Ub0VuZCA9IGtleSA9PT0gc3RyaW5ncy5FTkRfS0VZO1xuICAgICAgICB2YXIgc2hvdWxkRGVjcmVtZW50ID0ga2V5ID09PSBzdHJpbmdzLkFSUk9XX0xFRlRfS0VZICYmICFpc1JUTCB8fCBrZXkgPT09IHN0cmluZ3MuQVJST1dfUklHSFRfS0VZICYmIGlzUlRMO1xuICAgICAgICB2YXIgc2hvdWxkSW5jcmVtZW50ID0ga2V5ID09PSBzdHJpbmdzLkFSUk9XX1JJR0hUX0tFWSAmJiAhaXNSVEwgfHwga2V5ID09PSBzdHJpbmdzLkFSUk9XX0xFRlRfS0VZICYmIGlzUlRMO1xuICAgICAgICB2YXIgaW5kZXggPSBvcmlnaW47XG4gICAgICAgIGlmIChzaG91bGRHb1RvRW5kKSB7XG4gICAgICAgICAgICBpbmRleCA9IG1heEluZGV4O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNob3VsZERlY3JlbWVudCkge1xuICAgICAgICAgICAgaW5kZXggLT0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzaG91bGRJbmNyZW1lbnQpIHtcbiAgICAgICAgICAgIGluZGV4ICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICAgICAgaW5kZXggPSBtYXhJbmRleDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpbmRleCA+IG1heEluZGV4KSB7XG4gICAgICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgc2Nyb2xsIGluY3JlbWVudCB0aGF0IHdpbGwgbWFrZSB0aGUgdGFiIGF0IHRoZSBnaXZlbiBpbmRleCB2aXNpYmxlXG4gICAgICogQHBhcmFtIGluZGV4IFRoZSBpbmRleCBvZiB0aGUgdGFiXG4gICAgICogQHBhcmFtIG5leHRJbmRleCBUaGUgaW5kZXggb2YgdGhlIG5leHQgdGFiXG4gICAgICogQHBhcmFtIHNjcm9sbFBvc2l0aW9uIFRoZSBjdXJyZW50IHNjcm9sbCBwb3NpdGlvblxuICAgICAqIEBwYXJhbSBiYXJXaWR0aCBUaGUgd2lkdGggb2YgdGhlIFRhYiBCYXJcbiAgICAgKi9cbiAgICBNRENUYWJCYXJGb3VuZGF0aW9uLnByb3RvdHlwZS5jYWxjdWxhdGVTY3JvbGxJbmNyZW1lbnRfID0gZnVuY3Rpb24gKGluZGV4LCBuZXh0SW5kZXgsIHNjcm9sbFBvc2l0aW9uLCBiYXJXaWR0aCkge1xuICAgICAgICB2YXIgbmV4dFRhYkRpbWVuc2lvbnMgPSB0aGlzLmFkYXB0ZXIuZ2V0VGFiRGltZW5zaW9uc0F0SW5kZXgobmV4dEluZGV4KTtcbiAgICAgICAgdmFyIHJlbGF0aXZlQ29udGVudExlZnQgPSBuZXh0VGFiRGltZW5zaW9ucy5jb250ZW50TGVmdCAtIHNjcm9sbFBvc2l0aW9uIC0gYmFyV2lkdGg7XG4gICAgICAgIHZhciByZWxhdGl2ZUNvbnRlbnRSaWdodCA9IG5leHRUYWJEaW1lbnNpb25zLmNvbnRlbnRSaWdodCAtIHNjcm9sbFBvc2l0aW9uO1xuICAgICAgICB2YXIgbGVmdEluY3JlbWVudCA9IHJlbGF0aXZlQ29udGVudFJpZ2h0IC0gbnVtYmVycy5FWFRSQV9TQ1JPTExfQU1PVU5UO1xuICAgICAgICB2YXIgcmlnaHRJbmNyZW1lbnQgPSByZWxhdGl2ZUNvbnRlbnRMZWZ0ICsgbnVtYmVycy5FWFRSQV9TQ1JPTExfQU1PVU5UO1xuICAgICAgICBpZiAobmV4dEluZGV4IDwgaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLm1pbihsZWZ0SW5jcmVtZW50LCAwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTWF0aC5tYXgocmlnaHRJbmNyZW1lbnQsIDApO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgc2Nyb2xsIGluY3JlbWVudCB0aGF0IHdpbGwgbWFrZSB0aGUgdGFiIGF0IHRoZSBnaXZlbiBpbmRleCB2aXNpYmxlIGluIFJUTFxuICAgICAqIEBwYXJhbSBpbmRleCBUaGUgaW5kZXggb2YgdGhlIHRhYlxuICAgICAqIEBwYXJhbSBuZXh0SW5kZXggVGhlIGluZGV4IG9mIHRoZSBuZXh0IHRhYlxuICAgICAqIEBwYXJhbSBzY3JvbGxQb3NpdGlvbiBUaGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb25cbiAgICAgKiBAcGFyYW0gYmFyV2lkdGggVGhlIHdpZHRoIG9mIHRoZSBUYWIgQmFyXG4gICAgICogQHBhcmFtIHNjcm9sbENvbnRlbnRXaWR0aCBUaGUgd2lkdGggb2YgdGhlIHNjcm9sbCBjb250ZW50XG4gICAgICovXG4gICAgTURDVGFiQmFyRm91bmRhdGlvbi5wcm90b3R5cGUuY2FsY3VsYXRlU2Nyb2xsSW5jcmVtZW50UlRMXyA9IGZ1bmN0aW9uIChpbmRleCwgbmV4dEluZGV4LCBzY3JvbGxQb3NpdGlvbiwgYmFyV2lkdGgsIHNjcm9sbENvbnRlbnRXaWR0aCkge1xuICAgICAgICB2YXIgbmV4dFRhYkRpbWVuc2lvbnMgPSB0aGlzLmFkYXB0ZXIuZ2V0VGFiRGltZW5zaW9uc0F0SW5kZXgobmV4dEluZGV4KTtcbiAgICAgICAgdmFyIHJlbGF0aXZlQ29udGVudExlZnQgPSBzY3JvbGxDb250ZW50V2lkdGggLSBuZXh0VGFiRGltZW5zaW9ucy5jb250ZW50TGVmdCAtIHNjcm9sbFBvc2l0aW9uO1xuICAgICAgICB2YXIgcmVsYXRpdmVDb250ZW50UmlnaHQgPSBzY3JvbGxDb250ZW50V2lkdGggLSBuZXh0VGFiRGltZW5zaW9ucy5jb250ZW50UmlnaHQgLSBzY3JvbGxQb3NpdGlvbiAtIGJhcldpZHRoO1xuICAgICAgICB2YXIgbGVmdEluY3JlbWVudCA9IHJlbGF0aXZlQ29udGVudFJpZ2h0ICsgbnVtYmVycy5FWFRSQV9TQ1JPTExfQU1PVU5UO1xuICAgICAgICB2YXIgcmlnaHRJbmNyZW1lbnQgPSByZWxhdGl2ZUNvbnRlbnRMZWZ0IC0gbnVtYmVycy5FWFRSQV9TQ1JPTExfQU1PVU5UO1xuICAgICAgICBpZiAobmV4dEluZGV4ID4gaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLm1heChsZWZ0SW5jcmVtZW50LCAwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTWF0aC5taW4ocmlnaHRJbmNyZW1lbnQsIDApO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB0aGUgaW5kZXggb2YgdGhlIGFkamFjZW50IHRhYiBjbG9zZXN0IHRvIGVpdGhlciBlZGdlIG9mIHRoZSBUYWIgQmFyXG4gICAgICogQHBhcmFtIGluZGV4IFRoZSBpbmRleCBvZiB0aGUgdGFiXG4gICAgICogQHBhcmFtIHRhYkRpbWVuc2lvbnMgVGhlIGRpbWVuc2lvbnMgb2YgdGhlIHRhYlxuICAgICAqIEBwYXJhbSBzY3JvbGxQb3NpdGlvbiBUaGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb25cbiAgICAgKiBAcGFyYW0gYmFyV2lkdGggVGhlIHdpZHRoIG9mIHRoZSB0YWIgYmFyXG4gICAgICovXG4gICAgTURDVGFiQmFyRm91bmRhdGlvbi5wcm90b3R5cGUuZmluZEFkamFjZW50VGFiSW5kZXhDbG9zZXN0VG9FZGdlXyA9IGZ1bmN0aW9uIChpbmRleCwgdGFiRGltZW5zaW9ucywgc2Nyb2xsUG9zaXRpb24sIGJhcldpZHRoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUYWJzIGFyZSBsYWlkIG91dCBpbiB0aGUgVGFiIFNjcm9sbGVyIGxpa2UgdGhpczpcbiAgICAgICAgICpcbiAgICAgICAgICogICAgU2Nyb2xsIFBvc2l0aW9uXG4gICAgICAgICAqICAgICstLS0rXG4gICAgICAgICAqICAgIHwgICB8ICAgQmFyIFdpZHRoXG4gICAgICAgICAqICAgIHwgICArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rXG4gICAgICAgICAqICAgIHwgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqICAgIHwgICBWICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWXG4gICAgICAgICAqICAgIHwgICArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rXG4gICAgICAgICAqICAgIFYgICB8ICAgICAgICAgICAgIFRhYiBTY3JvbGxlciAgICAgICAgICB8XG4gICAgICAgICAqICAgICstLS0tLS0tLS0tLS0rLS0tLS0tLS0tLS0tLS0rLS0tLS0tLS0tLS0tLS0tLS0tLStcbiAgICAgICAgICogICAgfCAgICBUYWIgICAgIHwgICAgICBUYWIgICAgIHwgICAgICAgIFRhYiAgICAgICAgfFxuICAgICAgICAgKiAgICArLS0tLS0tLS0tLS0tKy0tLS0tLS0tLS0tLS0tKy0tLS0tLS0tLS0tLS0tLS0tLS0rXG4gICAgICAgICAqICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqICAgICAgICArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rXG4gICAgICAgICAqXG4gICAgICAgICAqIFRvIGRldGVybWluZSB0aGUgbmV4dCBhZGphY2VudCBpbmRleCwgd2UgbG9vayBhdCB0aGUgVGFiIHJvb3QgbGVmdCBhbmRcbiAgICAgICAgICogVGFiIHJvb3QgcmlnaHQsIGJvdGggcmVsYXRpdmUgdG8gdGhlIHNjcm9sbCBwb3NpdGlvbi4gSWYgdGhlIFRhYiByb290XG4gICAgICAgICAqIGxlZnQgaXMgbGVzcyB0aGFuIDAsIHRoZW4gd2Uga25vdyBpdCdzIG91dCBvZiB2aWV3IHRvIHRoZSBsZWZ0LiBJZiB0aGVcbiAgICAgICAgICogVGFiIHJvb3QgcmlnaHQgbWludXMgdGhlIGJhciB3aWR0aCBpcyBncmVhdGVyIHRoYW4gMCwgd2Uga25vdyB0aGUgVGFiIGlzXG4gICAgICAgICAqIG91dCBvZiB2aWV3IHRvIHRoZSByaWdodC4gRnJvbSB0aGVyZSwgd2UgZWl0aGVyIGluY3JlbWVudCBvciBkZWNyZW1lbnRcbiAgICAgICAgICogdGhlIGluZGV4LlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIHJlbGF0aXZlUm9vdExlZnQgPSB0YWJEaW1lbnNpb25zLnJvb3RMZWZ0IC0gc2Nyb2xsUG9zaXRpb247XG4gICAgICAgIHZhciByZWxhdGl2ZVJvb3RSaWdodCA9IHRhYkRpbWVuc2lvbnMucm9vdFJpZ2h0IC0gc2Nyb2xsUG9zaXRpb24gLSBiYXJXaWR0aDtcbiAgICAgICAgdmFyIHJlbGF0aXZlUm9vdERlbHRhID0gcmVsYXRpdmVSb290TGVmdCArIHJlbGF0aXZlUm9vdFJpZ2h0O1xuICAgICAgICB2YXIgbGVmdEVkZ2VJc0Nsb3NlciA9IHJlbGF0aXZlUm9vdExlZnQgPCAwIHx8IHJlbGF0aXZlUm9vdERlbHRhIDwgMDtcbiAgICAgICAgdmFyIHJpZ2h0RWRnZUlzQ2xvc2VyID0gcmVsYXRpdmVSb290UmlnaHQgPiAwIHx8IHJlbGF0aXZlUm9vdERlbHRhID4gMDtcbiAgICAgICAgaWYgKGxlZnRFZGdlSXNDbG9zZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBpbmRleCAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJpZ2h0RWRnZUlzQ2xvc2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgdGhlIGluZGV4IG9mIHRoZSBhZGphY2VudCB0YWIgY2xvc2VzdCB0byBlaXRoZXIgZWRnZSBvZiB0aGUgVGFiIEJhciBpbiBSVExcbiAgICAgKiBAcGFyYW0gaW5kZXggVGhlIGluZGV4IG9mIHRoZSB0YWJcbiAgICAgKiBAcGFyYW0gdGFiRGltZW5zaW9ucyBUaGUgZGltZW5zaW9ucyBvZiB0aGUgdGFiXG4gICAgICogQHBhcmFtIHNjcm9sbFBvc2l0aW9uIFRoZSBjdXJyZW50IHNjcm9sbCBwb3NpdGlvblxuICAgICAqIEBwYXJhbSBiYXJXaWR0aCBUaGUgd2lkdGggb2YgdGhlIHRhYiBiYXJcbiAgICAgKiBAcGFyYW0gc2Nyb2xsQ29udGVudFdpZHRoIFRoZSB3aWR0aCBvZiB0aGUgc2Nyb2xsZXIgY29udGVudFxuICAgICAqL1xuICAgIE1EQ1RhYkJhckZvdW5kYXRpb24ucHJvdG90eXBlLmZpbmRBZGphY2VudFRhYkluZGV4Q2xvc2VzdFRvRWRnZVJUTF8gPSBmdW5jdGlvbiAoaW5kZXgsIHRhYkRpbWVuc2lvbnMsIHNjcm9sbFBvc2l0aW9uLCBiYXJXaWR0aCwgc2Nyb2xsQ29udGVudFdpZHRoKSB7XG4gICAgICAgIHZhciByb290TGVmdCA9IHNjcm9sbENvbnRlbnRXaWR0aCAtIHRhYkRpbWVuc2lvbnMucm9vdExlZnQgLSBiYXJXaWR0aCAtIHNjcm9sbFBvc2l0aW9uO1xuICAgICAgICB2YXIgcm9vdFJpZ2h0ID0gc2Nyb2xsQ29udGVudFdpZHRoIC0gdGFiRGltZW5zaW9ucy5yb290UmlnaHQgLSBzY3JvbGxQb3NpdGlvbjtcbiAgICAgICAgdmFyIHJvb3REZWx0YSA9IHJvb3RMZWZ0ICsgcm9vdFJpZ2h0O1xuICAgICAgICB2YXIgbGVmdEVkZ2VJc0Nsb3NlciA9IHJvb3RMZWZ0ID4gMCB8fCByb290RGVsdGEgPiAwO1xuICAgICAgICB2YXIgcmlnaHRFZGdlSXNDbG9zZXIgPSByb290UmlnaHQgPCAwIHx8IHJvb3REZWx0YSA8IDA7XG4gICAgICAgIGlmIChsZWZ0RWRnZUlzQ2xvc2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyaWdodEVkZ2VJc0Nsb3Nlcikge1xuICAgICAgICAgICAgcmV0dXJuIGluZGV4IC0gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBrZXkgYXNzb2NpYXRlZCB3aXRoIGEga2V5ZG93biBldmVudFxuICAgICAqIEBwYXJhbSBldnQgVGhlIGtleWRvd24gZXZlbnRcbiAgICAgKi9cbiAgICBNRENUYWJCYXJGb3VuZGF0aW9uLnByb3RvdHlwZS5nZXRLZXlGcm9tRXZlbnRfID0gZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICBpZiAoQUNDRVBUQUJMRV9LRVlTLmhhcyhldnQua2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuIGV2dC5rZXk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEtFWUNPREVfTUFQLmdldChldnQua2V5Q29kZSk7XG4gICAgfTtcbiAgICBNRENUYWJCYXJGb3VuZGF0aW9uLnByb3RvdHlwZS5pc0FjdGl2YXRpb25LZXlfID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4ga2V5ID09PSBzdHJpbmdzLlNQQUNFX0tFWSB8fCBrZXkgPT09IHN0cmluZ3MuRU5URVJfS0VZO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIGEgZ2l2ZW4gaW5kZXggaXMgaW5jbHVzaXZlbHkgYmV0d2VlbiB0aGUgZW5kc1xuICAgICAqIEBwYXJhbSBpbmRleCBUaGUgaW5kZXggdG8gdGVzdFxuICAgICAqL1xuICAgIE1EQ1RhYkJhckZvdW5kYXRpb24ucHJvdG90eXBlLmluZGV4SXNJblJhbmdlXyA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICByZXR1cm4gaW5kZXggPj0gMCAmJiBpbmRleCA8IHRoaXMuYWRhcHRlci5nZXRUYWJMaXN0TGVuZ3RoKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB2aWV3J3MgUlRMIHByb3BlcnR5XG4gICAgICovXG4gICAgTURDVGFiQmFyRm91bmRhdGlvbi5wcm90b3R5cGUuaXNSVExfID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmlzUlRMKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTY3JvbGxzIHRoZSB0YWIgYXQgdGhlIGdpdmVuIGluZGV4IGludG8gdmlldyBmb3IgbGVmdC10by1yaWdodCB1c2VyIGFnZW50cy5cbiAgICAgKiBAcGFyYW0gaW5kZXggVGhlIGluZGV4IG9mIHRoZSB0YWIgdG8gc2Nyb2xsIGludG8gdmlld1xuICAgICAqL1xuICAgIE1EQ1RhYkJhckZvdW5kYXRpb24ucHJvdG90eXBlLnNjcm9sbEludG9WaWV3XyA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICB2YXIgc2Nyb2xsUG9zaXRpb24gPSB0aGlzLmFkYXB0ZXIuZ2V0U2Nyb2xsUG9zaXRpb24oKTtcbiAgICAgICAgdmFyIGJhcldpZHRoID0gdGhpcy5hZGFwdGVyLmdldE9mZnNldFdpZHRoKCk7XG4gICAgICAgIHZhciB0YWJEaW1lbnNpb25zID0gdGhpcy5hZGFwdGVyLmdldFRhYkRpbWVuc2lvbnNBdEluZGV4KGluZGV4KTtcbiAgICAgICAgdmFyIG5leHRJbmRleCA9IHRoaXMuZmluZEFkamFjZW50VGFiSW5kZXhDbG9zZXN0VG9FZGdlXyhpbmRleCwgdGFiRGltZW5zaW9ucywgc2Nyb2xsUG9zaXRpb24sIGJhcldpZHRoKTtcbiAgICAgICAgaWYgKCF0aGlzLmluZGV4SXNJblJhbmdlXyhuZXh0SW5kZXgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNjcm9sbEluY3JlbWVudCA9IHRoaXMuY2FsY3VsYXRlU2Nyb2xsSW5jcmVtZW50XyhpbmRleCwgbmV4dEluZGV4LCBzY3JvbGxQb3NpdGlvbiwgYmFyV2lkdGgpO1xuICAgICAgICB0aGlzLmFkYXB0ZXIuaW5jcmVtZW50U2Nyb2xsKHNjcm9sbEluY3JlbWVudCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTY3JvbGxzIHRoZSB0YWIgYXQgdGhlIGdpdmVuIGluZGV4IGludG8gdmlldyBpbiBSVExcbiAgICAgKiBAcGFyYW0gaW5kZXggVGhlIHRhYiBpbmRleCB0byBtYWtlIHZpc2libGVcbiAgICAgKi9cbiAgICBNRENUYWJCYXJGb3VuZGF0aW9uLnByb3RvdHlwZS5zY3JvbGxJbnRvVmlld1JUTF8gPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgdmFyIHNjcm9sbFBvc2l0aW9uID0gdGhpcy5hZGFwdGVyLmdldFNjcm9sbFBvc2l0aW9uKCk7XG4gICAgICAgIHZhciBiYXJXaWR0aCA9IHRoaXMuYWRhcHRlci5nZXRPZmZzZXRXaWR0aCgpO1xuICAgICAgICB2YXIgdGFiRGltZW5zaW9ucyA9IHRoaXMuYWRhcHRlci5nZXRUYWJEaW1lbnNpb25zQXRJbmRleChpbmRleCk7XG4gICAgICAgIHZhciBzY3JvbGxXaWR0aCA9IHRoaXMuYWRhcHRlci5nZXRTY3JvbGxDb250ZW50V2lkdGgoKTtcbiAgICAgICAgdmFyIG5leHRJbmRleCA9IHRoaXMuZmluZEFkamFjZW50VGFiSW5kZXhDbG9zZXN0VG9FZGdlUlRMXyhpbmRleCwgdGFiRGltZW5zaW9ucywgc2Nyb2xsUG9zaXRpb24sIGJhcldpZHRoLCBzY3JvbGxXaWR0aCk7XG4gICAgICAgIGlmICghdGhpcy5pbmRleElzSW5SYW5nZV8obmV4dEluZGV4KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzY3JvbGxJbmNyZW1lbnQgPSB0aGlzLmNhbGN1bGF0ZVNjcm9sbEluY3JlbWVudFJUTF8oaW5kZXgsIG5leHRJbmRleCwgc2Nyb2xsUG9zaXRpb24sIGJhcldpZHRoLCBzY3JvbGxXaWR0aCk7XG4gICAgICAgIHRoaXMuYWRhcHRlci5pbmNyZW1lbnRTY3JvbGwoc2Nyb2xsSW5jcmVtZW50KTtcbiAgICB9O1xuICAgIHJldHVybiBNRENUYWJCYXJGb3VuZGF0aW9uO1xufShNRENGb3VuZGF0aW9uKSk7XG5leHBvcnQgeyBNRENUYWJCYXJGb3VuZGF0aW9uIH07XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZGVmYXVsdC1leHBvcnQgTmVlZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGggTURDIFdlYiB2MC40NC4wIGFuZCBlYXJsaWVyLlxuZXhwb3J0IGRlZmF1bHQgTURDVGFiQmFyRm91bmRhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvdW5kYXRpb24uanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5pbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE1EQ0NvbXBvbmVudCB9IGZyb20gJ0BtYXRlcmlhbC9iYXNlL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBNRENUYWJTY3JvbGxlciB9IGZyb20gJ0BtYXRlcmlhbC90YWItc2Nyb2xsZXIvY29tcG9uZW50JztcbmltcG9ydCB7IE1EQ1RhYiB9IGZyb20gJ0BtYXRlcmlhbC90YWIvY29tcG9uZW50JztcbmltcG9ydCB7IE1EQ1RhYkZvdW5kYXRpb24gfSBmcm9tICdAbWF0ZXJpYWwvdGFiL2ZvdW5kYXRpb24nO1xuaW1wb3J0IHsgTURDVGFiQmFyRm91bmRhdGlvbiB9IGZyb20gJy4vZm91bmRhdGlvbic7XG52YXIgc3RyaW5ncyA9IE1EQ1RhYkJhckZvdW5kYXRpb24uc3RyaW5ncztcbnZhciB0YWJJZENvdW50ZXIgPSAwO1xudmFyIE1EQ1RhYkJhciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTURDVGFiQmFyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1EQ1RhYkJhcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBNRENUYWJCYXIuYXR0YWNoVG8gPSBmdW5jdGlvbiAocm9vdCkge1xuICAgICAgICByZXR1cm4gbmV3IE1EQ1RhYkJhcihyb290KTtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENUYWJCYXIucHJvdG90eXBlLCBcImZvY3VzT25BY3RpdmF0ZVwiLCB7XG4gICAgICAgIHNldDogZnVuY3Rpb24gKGZvY3VzT25BY3RpdmF0ZSkge1xuICAgICAgICAgICAgdGhpcy50YWJMaXN0Xy5mb3JFYWNoKGZ1bmN0aW9uICh0YWIpIHsgcmV0dXJuIHRhYi5mb2N1c09uQWN0aXZhdGUgPSBmb2N1c09uQWN0aXZhdGU7IH0pO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVGFiQmFyLnByb3RvdHlwZSwgXCJ1c2VBdXRvbWF0aWNBY3RpdmF0aW9uXCIsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodXNlQXV0b21hdGljQWN0aXZhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5mb3VuZGF0aW9uLnNldFVzZUF1dG9tYXRpY0FjdGl2YXRpb24odXNlQXV0b21hdGljQWN0aXZhdGlvbik7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE1EQ1RhYkJhci5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICh0YWJGYWN0b3J5LCB0YWJTY3JvbGxlckZhY3RvcnkpIHtcbiAgICAgICAgaWYgKHRhYkZhY3RvcnkgPT09IHZvaWQgMCkgeyB0YWJGYWN0b3J5ID0gZnVuY3Rpb24gKGVsKSB7IHJldHVybiBuZXcgTURDVGFiKGVsKTsgfTsgfVxuICAgICAgICBpZiAodGFiU2Nyb2xsZXJGYWN0b3J5ID09PSB2b2lkIDApIHsgdGFiU2Nyb2xsZXJGYWN0b3J5ID0gZnVuY3Rpb24gKGVsKSB7IHJldHVybiBuZXcgTURDVGFiU2Nyb2xsZXIoZWwpOyB9OyB9XG4gICAgICAgIHRoaXMudGFiTGlzdF8gPSB0aGlzLmluc3RhbnRpYXRlVGFic18odGFiRmFjdG9yeSk7XG4gICAgICAgIHRoaXMudGFiU2Nyb2xsZXJfID0gdGhpcy5pbnN0YW50aWF0ZVRhYlNjcm9sbGVyXyh0YWJTY3JvbGxlckZhY3RvcnkpO1xuICAgIH07XG4gICAgTURDVGFiQmFyLnByb3RvdHlwZS5pbml0aWFsU3luY1dpdGhET00gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuaGFuZGxlVGFiSW50ZXJhY3Rpb25fID0gZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmZvdW5kYXRpb24uaGFuZGxlVGFiSW50ZXJhY3Rpb24oZXZ0KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVLZXlEb3duXyA9IGZ1bmN0aW9uIChldnQpIHsgcmV0dXJuIF90aGlzLmZvdW5kYXRpb24uaGFuZGxlS2V5RG93bihldnQpOyB9O1xuICAgICAgICB0aGlzLmxpc3RlbihNRENUYWJGb3VuZGF0aW9uLnN0cmluZ3MuSU5URVJBQ1RFRF9FVkVOVCwgdGhpcy5oYW5kbGVUYWJJbnRlcmFjdGlvbl8pO1xuICAgICAgICB0aGlzLmxpc3Rlbigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5RG93bl8pO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudGFiTGlzdF8ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRhYkxpc3RfW2ldLmFjdGl2ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsSW50b1ZpZXcoaSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1EQ1RhYkJhci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMudW5saXN0ZW4oTURDVGFiRm91bmRhdGlvbi5zdHJpbmdzLklOVEVSQUNURURfRVZFTlQsIHRoaXMuaGFuZGxlVGFiSW50ZXJhY3Rpb25fKTtcbiAgICAgICAgdGhpcy51bmxpc3Rlbigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5RG93bl8pO1xuICAgICAgICB0aGlzLnRhYkxpc3RfLmZvckVhY2goZnVuY3Rpb24gKHRhYikgeyByZXR1cm4gdGFiLmRlc3Ryb3koKTsgfSk7XG4gICAgICAgIGlmICh0aGlzLnRhYlNjcm9sbGVyXykge1xuICAgICAgICAgICAgdGhpcy50YWJTY3JvbGxlcl8uZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNRENUYWJCYXIucHJvdG90eXBlLmdldERlZmF1bHRGb3VuZGF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAvLyBETyBOT1QgSU5MSU5FIHRoaXMgdmFyaWFibGUuIEZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCBmb3VuZGF0aW9ucyB0YWtlIGEgUGFydGlhbDxNRENGb29BZGFwdGVyPi5cbiAgICAgICAgLy8gVG8gZW5zdXJlIHdlIGRvbid0IGFjY2lkZW50YWxseSBvbWl0IGFueSBtZXRob2RzLCB3ZSBuZWVkIGEgc2VwYXJhdGUsIHN0cm9uZ2x5IHR5cGVkIGFkYXB0ZXIgdmFyaWFibGUuXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyBNZXRob2RzIHNob3VsZCBiZSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgYWRhcHRlciBpbnRlcmZhY2UuXG4gICAgICAgIHZhciBhZGFwdGVyID0ge1xuICAgICAgICAgICAgc2Nyb2xsVG86IGZ1bmN0aW9uIChzY3JvbGxYKSB7IHJldHVybiBfdGhpcy50YWJTY3JvbGxlcl8uc2Nyb2xsVG8oc2Nyb2xsWCk7IH0sXG4gICAgICAgICAgICBpbmNyZW1lbnRTY3JvbGw6IGZ1bmN0aW9uIChzY3JvbGxYSW5jcmVtZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnRhYlNjcm9sbGVyXy5pbmNyZW1lbnRTY3JvbGwoc2Nyb2xsWEluY3JlbWVudCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0U2Nyb2xsUG9zaXRpb246IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnRhYlNjcm9sbGVyXy5nZXRTY3JvbGxQb3NpdGlvbigpOyB9LFxuICAgICAgICAgICAgZ2V0U2Nyb2xsQ29udGVudFdpZHRoOiBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy50YWJTY3JvbGxlcl8uZ2V0U2Nyb2xsQ29udGVudFdpZHRoKCk7IH0sXG4gICAgICAgICAgICBnZXRPZmZzZXRXaWR0aDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMucm9vdC5vZmZzZXRXaWR0aDsgfSxcbiAgICAgICAgICAgIGlzUlRMOiBmdW5jdGlvbiAoKSB7IHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShfdGhpcy5yb290KS5nZXRQcm9wZXJ0eVZhbHVlKCdkaXJlY3Rpb24nKSA9PT0gJ3J0bCc7IH0sXG4gICAgICAgICAgICBzZXRBY3RpdmVUYWI6IGZ1bmN0aW9uIChpbmRleCkgeyByZXR1cm4gX3RoaXMuZm91bmRhdGlvbi5hY3RpdmF0ZVRhYihpbmRleCk7IH0sXG4gICAgICAgICAgICBhY3RpdmF0ZVRhYkF0SW5kZXg6IGZ1bmN0aW9uIChpbmRleCwgY2xpZW50UmVjdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy50YWJMaXN0X1tpbmRleF0uYWN0aXZhdGUoY2xpZW50UmVjdCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVhY3RpdmF0ZVRhYkF0SW5kZXg6IGZ1bmN0aW9uIChpbmRleCkgeyByZXR1cm4gX3RoaXMudGFiTGlzdF9baW5kZXhdLmRlYWN0aXZhdGUoKTsgfSxcbiAgICAgICAgICAgIGZvY3VzVGFiQXRJbmRleDogZnVuY3Rpb24gKGluZGV4KSB7IHJldHVybiBfdGhpcy50YWJMaXN0X1tpbmRleF0uZm9jdXMoKTsgfSxcbiAgICAgICAgICAgIGdldFRhYkluZGljYXRvckNsaWVudFJlY3RBdEluZGV4OiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMudGFiTGlzdF9baW5kZXhdLmNvbXB1dGVJbmRpY2F0b3JDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0VGFiRGltZW5zaW9uc0F0SW5kZXg6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy50YWJMaXN0X1tpbmRleF0uY29tcHV0ZURpbWVuc2lvbnMoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRQcmV2aW91c0FjdGl2ZVRhYkluZGV4OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfdGhpcy50YWJMaXN0Xy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMudGFiTGlzdF9baV0uYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0Rm9jdXNlZFRhYkluZGV4OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhYkVsZW1lbnRzID0gX3RoaXMuZ2V0VGFiRWxlbWVudHNfKCk7XG4gICAgICAgICAgICAgICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgICAgICAgICAgICAgIHJldHVybiB0YWJFbGVtZW50cy5pbmRleE9mKGFjdGl2ZUVsZW1lbnQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldEluZGV4T2ZUYWJCeUlkOiBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IF90aGlzLnRhYkxpc3RfLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy50YWJMaXN0X1tpXS5pZCA9PT0gaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRUYWJMaXN0TGVuZ3RoOiBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy50YWJMaXN0Xy5sZW5ndGg7IH0sXG4gICAgICAgICAgICBub3RpZnlUYWJBY3RpdmF0ZWQ6IGZ1bmN0aW9uIChpbmRleCkgeyByZXR1cm4gX3RoaXMuZW1pdChzdHJpbmdzLlRBQl9BQ1RJVkFURURfRVZFTlQsIHsgaW5kZXg6IGluZGV4IH0sIHRydWUpOyB9LFxuICAgICAgICB9O1xuICAgICAgICAvLyB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5c1xuICAgICAgICByZXR1cm4gbmV3IE1EQ1RhYkJhckZvdW5kYXRpb24oYWRhcHRlcik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBY3RpdmF0ZXMgdGhlIHRhYiBhdCB0aGUgZ2l2ZW4gaW5kZXhcbiAgICAgKiBAcGFyYW0gaW5kZXggVGhlIGluZGV4IG9mIHRoZSB0YWJcbiAgICAgKi9cbiAgICBNRENUYWJCYXIucHJvdG90eXBlLmFjdGl2YXRlVGFiID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHRoaXMuZm91bmRhdGlvbi5hY3RpdmF0ZVRhYihpbmRleCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTY3JvbGxzIHRoZSB0YWIgYXQgdGhlIGdpdmVuIGluZGV4IGludG8gdmlld1xuICAgICAqIEBwYXJhbSBpbmRleCBUSGUgaW5kZXggb2YgdGhlIHRhYlxuICAgICAqL1xuICAgIE1EQ1RhYkJhci5wcm90b3R5cGUuc2Nyb2xsSW50b1ZpZXcgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgdGhpcy5mb3VuZGF0aW9uLnNjcm9sbEludG9WaWV3KGluZGV4KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYWxsIHRoZSB0YWIgZWxlbWVudHMgaW4gYSBuaWNlIGNsZWFuIGFycmF5XG4gICAgICovXG4gICAgTURDVGFiQmFyLnByb3RvdHlwZS5nZXRUYWJFbGVtZW50c18gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBbXS5zbGljZS5jYWxsKHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yQWxsKHN0cmluZ3MuVEFCX1NFTEVDVE9SKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBJbnN0YW50aWF0ZXMgdGFiIGNvbXBvbmVudHMgb24gYWxsIGNoaWxkIHRhYiBlbGVtZW50c1xuICAgICAqL1xuICAgIE1EQ1RhYkJhci5wcm90b3R5cGUuaW5zdGFudGlhdGVUYWJzXyA9IGZ1bmN0aW9uICh0YWJGYWN0b3J5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFRhYkVsZW1lbnRzXygpLm1hcChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgIGVsLmlkID0gZWwuaWQgfHwgXCJtZGMtdGFiLVwiICsgKyt0YWJJZENvdW50ZXI7XG4gICAgICAgICAgICByZXR1cm4gdGFiRmFjdG9yeShlbCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSW5zdGFudGlhdGVzIHRhYiBzY3JvbGxlciBjb21wb25lbnQgb24gdGhlIGNoaWxkIHRhYiBzY3JvbGxlciBlbGVtZW50XG4gICAgICovXG4gICAgTURDVGFiQmFyLnByb3RvdHlwZS5pbnN0YW50aWF0ZVRhYlNjcm9sbGVyXyA9IGZ1bmN0aW9uICh0YWJTY3JvbGxlckZhY3RvcnkpIHtcbiAgICAgICAgdmFyIHRhYlNjcm9sbGVyRWxlbWVudCA9IHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKHN0cmluZ3MuVEFCX1NDUk9MTEVSX1NFTEVDVE9SKTtcbiAgICAgICAgaWYgKHRhYlNjcm9sbGVyRWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRhYlNjcm9sbGVyRmFjdG9yeSh0YWJTY3JvbGxlckVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgcmV0dXJuIE1EQ1RhYkJhcjtcbn0oTURDQ29tcG9uZW50KSk7XG5leHBvcnQgeyBNRENUYWJCYXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBvbmVudC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHtNRENUYWJCYXJ9IGZyb20gJ0BtYXRlcmlhbC90YWItYmFyJztcblxuLy8gVXBkYXRlIHVybCB0byBjdXJyZW50IHRhYiBuYW1lXG5jb25zdCB1cGRhdGVVUkwgPSAoaW5kZXgpID0+IHtcbiAgLy8gZ3JhYiB0YWIgYmFyLCBhbmQgZXh0cmFjdCBuYW1lIGZyb20gdGFiIHdlIGFyZSBuYXZpZ2F0aW5nIHRvXG4gIGNvbnN0IHRhYkJhciA9IG5ldyBNRENUYWJCYXIoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1kYy10YWItYmFyJykpO1xuICBsZXQgdGFiTmFtZSA9IHRhYkJhci50YWJMaXN0X1tpbmRleF0uY29udGVudF8uZmlyc3RFbGVtZW50Q2hpbGQuaW5uZXJUZXh0LnRvTG93ZXJDYXNlKClcbiAgLy8gVXBkYXRlIHVybCB3aXRoIG5hbWVcbiAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKCcnLCAnJywgYD8ke3RhYk5hbWV9YCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHVwZGF0ZVVSTDtcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gUmVzZXQgI2NvbnRlbnQgZm9yIG5ldyBwYWdlLCByZXR1cm5zIG91ciBuZXcgY29udGVudCBzZWN0aW9uIHRvIHJlbmRlciBpblxuY29uc3QgY2xlYXJDb250ZW50ID0gKGJvZHkpID0+IHtcbiAgLy8gR3JhYiBvbGQgY29udGVudCBhbmQgZGVsZXRlIGlmIHByZXNlbnRcbiAgY29uc3Qgb2xkQ29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjb250ZW50Jyk7XG4gIGlmIChvbGRDb250ZW50KSB7XG4gICAgYm9keS5yZW1vdmVDaGlsZChvbGRDb250ZW50KTtcbiAgfVxuICAvLyBCdWlsZCBhbmQgYWRkIG5ldyBjb250YWN0LCByZXR1cm5pbmcgaXQgc28gd2UgY2FuIHJlbmRlciBpbiBpdFxuICBjb25zdCBuZXdDb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbWFpbicpO1xuICBuZXdDb250ZW50LnNldEF0dHJpYnV0ZSgnaWQnLCAnY29udGVudCcpO1xuICBsZXQgZm9vdGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZm9vdGVyJyk7XG4gIGJvZHkuaW5zZXJ0QmVmb3JlKG5ld0NvbnRlbnQsIGZvb3Rlcik7XG5cbiAgcmV0dXJuIG5ld0NvbnRlbnQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsZWFyQ29udGVudDtcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gSW1wb3J0c1xuaW1wb3J0IHJlbmRlckhvdXJzIGZyb20gJy4uL3BhZ2VzL3JlbmRlckhvdXJzJztcbmltcG9ydCByZW5kZXJNZW51cyBmcm9tICcuLi9wYWdlcy9yZW5kZXJNZW51cyc7XG5pbXBvcnQgcmVuZGVyTWFuaWZlc3RvIGZyb20gJy4uL3BhZ2VzL3JlbmRlck1hbmlmZXN0byc7XG5pbXBvcnQgcmVuZGVyQ29udGFjdCBmcm9tICcuLi9wYWdlcy9yZW5kZXJDb250YWN0JztcbmltcG9ydCB1cGRhdGVVUkwgZnJvbSAnLi91cGRhdGVVUkwnO1xuXG5pbXBvcnQgY2xlYXJDb250ZW50IGZyb20gJy4vY2xlYXJDb250ZW50JztcblxuLy8gR2l2ZW4gdGhlIGluZGV4IG9mIHRoZSBwYWdlLCBjYWxsIGFwcHJvcHJvYXRlIHJlbmRlciBmdW5jdGlvbiwgcGFzc2luZ1xuLy8gaW4gdGhlIG1haW4gYm9keSBjb250ZW50IGl0IHdpbGwgcmVuZGVyIHRvLlxuY29uc3QgZGlzcGxheUNvbnRyb2xsZXIgPSAoaW5kZXgpID0+IHtcblxuICAvLyBSZXNldCAjY29udGVudCBmb3IgbmV3IHBhZ2UsIHJldHVybnMgb3VyIG5ldyBjb250ZW50IHNlY3Rpb25cbiAgY29uc3QgYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKTtcbiAgbGV0IG5ld0NvbnRlbnQgPSBjbGVhckNvbnRlbnQoYm9keSk7XG5cbiAgLy8gU2Nyb2xsIHRvIHRvcCBvZiBwYWdlXG4gIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcblxuICAvLyBSZW5kZXIgcGFnZSBiYXNlZCBvbiBpbmRleCwgdXBkYXRlIHVybCB0byB0YWIgbmFtZVxuICBzd2l0Y2ggKGluZGV4KSB7XG4gICAgY2FzZSAoMCk6XG4gICAgICByZW5kZXJIb3VycyhuZXdDb250ZW50KTtcbiAgICAgIHVwZGF0ZVVSTChpbmRleCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICgxKTpcbiAgICAgIHJlbmRlck1lbnVzKG5ld0NvbnRlbnQpO1xuICAgICAgdXBkYXRlVVJMKGluZGV4KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgKDIpOlxuICAgICAgcmVuZGVyTWFuaWZlc3RvKG5ld0NvbnRlbnQpO1xuICAgICAgdXBkYXRlVVJMKGluZGV4KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgKDMpOlxuICAgICAgcmVuZGVyQ29udGFjdChuZXdDb250ZW50KTtcbiAgICAgIHVwZGF0ZVVSTChpbmRleCk7XG4gICAgICBicmVhaztcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBkaXNwbGF5Q29udHJvbGxlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgcmVuZGVyTmF2IGZyb20gJy4uL2NvbXBvbmVudHMvcmVuZGVyTmF2JztcbmltcG9ydCB7cmVuZGVyRm9vdGVyfSBmcm9tICcuLi9jb21wb25lbnRzL2Zvb3Rlcic7XG5pbXBvcnQgZGlzcGxheUNvbnRyb2xsZXIgZnJvbSAnLi9kaXNwbGF5Q29udHJvbGxlcic7XG5pbXBvcnQge01EQ1RhYkJhcn0gZnJvbSAnQG1hdGVyaWFsL3RhYi1iYXInO1xuXG4vLyBCYXNpYyBwYWdlIGVsZW1lbnQgc2V0dXAsIGxvYWQgbmF2IGFuZCBhY3RpdmF0ZSBvdXIgbGFuZGluZyBwYWdlXG5jb25zdCBwYWdlTG9hZCA9IChpID0gMCkgPT4ge1xuXG4gIC8vIFdob2xlIHBhZ2UgaG9sZGVyXG4gIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XG5cbiAgLy8gcmVuZGVyTmF2IHdpbGwgc2V0dXAgbGlzdGVuZXIgYW5kIG5hdmJhciwgd2Ugd2lsbCBhY3RpdmF0ZSBvbmNlIHBhZ2Ugc2V0dXAgYmVsb3cuXG4gIHJlbmRlck5hdihib2R5KTtcblxuICAvLyBNYWluIGNvbnRlbnQgYm9keSAtLVRPRE86IFR1cm4gdGhpcyAqbWFrZSBtYWluKiBhY3Rpb24gaW50byBjb25zdHJ1Y3RvclxuICBjb25zdCBjb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbWFpbicpO1xuICBjb250ZW50LnNldEF0dHJpYnV0ZSgnaWQnLCAnY29udGVudCcpO1xuICBib2R5LmFwcGVuZENoaWxkKGNvbnRlbnQpO1xuXG4gIC8vIHJlbmRlckZvb3RlciB3aWxsIGJ1aWxkIGFuZCBhcHBlbmQgZm9vdGVyIHRvIGJvZHkgZWxlbWVudFxuICByZW5kZXJGb290ZXIoYm9keSk7XG5cbiAgLy8gQWRkIGxpc3RlbmVyIHRvIGJvZHkgdGhhdCB3aWxsIGNhbGwgb3VyIGRpc3BsYXkgY29udHJvbGxlciB3aGVuIGl0IGhlYXJzXG4gIC8vIGEgdGFiIGFjdGl2YXRlZCBldmVudCBhbmQgcGFzcyBhbG9uZyBpbmZvIGZyb20gZXZlbnRcbiAgYm9keS5hZGRFdmVudExpc3RlbmVyKCdNRENUYWJCYXI6YWN0aXZhdGVkJywgKGUpID0+IHtcbiAgICAvLyBQYXNzIGFsb25nIGluZGV4IG9mIGV2ZW50IHRvIGNvbnRyb2xsZXIgb3QgcmVuZGVyIGFzc29jaWF0ZWQgYm9keVxuICAgIGRpc3BsYXlDb250cm9sbGVyKGUuZGV0YWlsLmluZGV4KTtcbiAgfSlcblxuICAvLyBHcmFiIHRhYkJhciBhbmQgYWN0aXZhdGUgb3VyIGRlc2lyZWQgbGFuZGluZyBwYWdlIChIb3VycyBpbiBvdXIgY2FzZSlcbiAgY29uc3QgdGFiQmFyID0gbmV3IE1EQ1RhYkJhcihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWRjLXRhYi1iYXInKSk7XG4gIHRhYkJhci5hY3RpdmF0ZVRhYihpKTsgLy90cmlnZ2VyIGRlZmF1bHQgYWN0aXZhdGUgb24gbG9hZC5cblxufVxuXG5leHBvcnQgZGVmYXVsdCBwYWdlTG9hZDtcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gSW1wb3J0IG1ldGhvZHMvZnVuY3Rpb25hbGl0eVxuaW1wb3J0IHBhZ2VMb2FkIGZyb20gJy4vY29udHJvbGxlcnMvcGFnZUxvYWQnO1xuXG4vLyBJbXBvcnQgc3R5bGVzXG5pbXBvcnQgJy4vc3R5bGUvcmVzZXQuc2Nzcyc7XG5pbXBvcnQgJy4vc3R5bGUvc3R5bGUuc2Nzcyc7XG5cbi8vIE9uIHBhZ2Vsb2FkLCBjaGVjayB1cmwgdG8gc2VlIGlmIHBhZ2UgcXVlcmllZCwgbmF2aWdhdGUgdG8gZ2l2ZW4gcGFnZSwgb3IgaG91cnNcbi8vICBhcyBkZWZhdWx0XG5jb25zdCBxdWVyeVN0cmluZyA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2g7XG5cbi8vIFN3aXRjaCB0aHJvdWdoIG9wdGlvbnMgaW4gcXVlcnkgc3RyaW5nXG5zd2l0Y2ggKHF1ZXJ5U3RyaW5nKSB7XG4gIGNhc2UgKCc/aG91cnMnKTpcbiAgICBwYWdlTG9hZCgwKTtcbiAgICBicmVhaztcbiAgY2FzZSAoJz9tZW51cycpOlxuICAgIHBhZ2VMb2FkKDEpO1xuICAgIGJyZWFrO1xuICBjYXNlICgnP21hbmlmZXN0bycpOlxuICAgIHBhZ2VMb2FkKDIpO1xuICAgIGJyZWFrO1xuICBjYXNlICgnP2NvbnRhY3QnKTpcbiAgICBwYWdlTG9hZCgzKTtcbiAgICBicmVhaztcbiAgZGVmYXVsdDpcbiAgZG9jdW1lbnQub25sb2FkID0gcGFnZUxvYWQoMCk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9